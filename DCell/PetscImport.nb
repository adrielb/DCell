(************** Content-type: application/mathematica **************
                     CreatedBy='Mathematica 5.2'

                    Mathematica-Compatible Notebook

This notebook can be used with any Mathematica-compatible
application, such as Mathematica, MathReader or Publicon. The data
for the notebook starts with the line containing stars above.

To get the notebook into a Mathematica-compatible application, do
one of the following:

* Save the data starting with the line of stars above into a file
  with a name ending in .nb, then open the file inside the
  application;

* Copy the data starting with the line of stars above to the
  clipboard, then use the Paste menu command inside the application.

Data for notebooks contains only printable 7-bit ASCII and can be
sent directly in email or through ftp in text mode.  Newlines can be
CR, LF or CRLF (Unix, Macintosh or MS-DOS style).

NOTE: If you modify the data for this notebook not in a Mathematica-
compatible application, you must delete the line below containing
the word CacheID, otherwise Mathematica-compatible applications may
try to use invalid cache data.

For more information on notebooks and Mathematica-compatible 
applications, contact Wolfram Research:
  web: http://www.wolfram.com
  email: info@wolfram.com
  phone: +1-217-398-0700 (U.S.)

Notebook reader applications are available free of charge from 
Wolfram Research.
*******************************************************************)

(*CacheID: 232*)


(*NotebookFileLineBreakTest
NotebookFileLineBreakTest*)
(*NotebookOptionsPosition[     19798,        470]*)
(*NotebookOutlinePosition[     20482,        494]*)
(*  CellTagsIndexPosition[     20438,        490]*)
(*WindowFrame->Generic*)



Notebook[{

Cell[CellGroupData[{
Cell["Init", "Subsection"],

Cell[BoxData[{
    \(<< Graphics`PlotField`\), "\[IndentingNewLine]", 
    \(<< Graphics`Graphics`\), "\[IndentingNewLine]", 
    \(\(SetDirectory[
        Environment["\<PETSC_TMP\>"]];\)\), "\[IndentingNewLine]", 
    \(\(SetOptions[ListDensityPlot, Mesh \[Rule] False, 
        PlotRange \[Rule] All];\)\)}], "Input",
  InitializationCell->True],

Cell[BoxData[{
    \(\(\(ImportVec = 
        Function[{MX, dof, name}, 
          Module[{dat}, \[IndentingNewLine]dat = 
              Rest@Import[name <> "\<.Real64\>", "\<Real64\>", 
                  ByteOrdering \[Rule] 1]; \[IndentingNewLine]dat = 
              Partition[dat, dof]; \[IndentingNewLine]dat = 
              Partition[dat, MX]; \[IndentingNewLine]dat = 
              Partition[dat, MX]\n]];\)\(\[IndentingNewLine]\)
    \)\), "\[IndentingNewLine]", 
    \(\(\(ImportVec2 = 
        Function[{MX, dof, name}, 
          Module[{dat}, \[IndentingNewLine]dat = 
              Rest@Import[name, "\<Real64\>", 
                  ByteOrdering \[Rule] 1]; \[IndentingNewLine]If[dof > 1, 
              dat = Partition[dat, dof]]; \[IndentingNewLine]dat = 
              Partition[dat, MX]; \[IndentingNewLine]Transpose[
              dat, {2, 3, 1}]\n]];\)\(\[IndentingNewLine]\)
    \)\), "\[IndentingNewLine]", 
    \(\(\(ImportVec2t = 
        Function[{MX, dof, 
            name}, \[IndentingNewLine]\(ImportVec2[MX, dof, #] &\) /@ 
            FileNames[
              name <> "\<.*.Real64\>"]\[IndentingNewLine]];\)\(\
\[IndentingNewLine]\)
    \)\), "\[IndentingNewLine]", 
    \(\(\(ImportGrid[name_] := 
        Module[{dat, files, sizes, pos, tmp, f}, \[IndentingNewLine]sizes = 
            Import[name <> "\<.size\>", "\<Table\>"]; \[IndentingNewLine]pos \
= Import[name <> "\<.pos\>", "\<Table\>"]; \[IndentingNewLine]files = 
            FileNames[name <> "\<.*.Real64\>"]; \[IndentingNewLine]f = 
            Function[
              idx, \[IndentingNewLine]tmp = 
                Rest@Import[files[\([idx]\)], "\<Real64\>", 
                    ByteOrdering \[Rule] 1]; \[IndentingNewLine]Partition[
                tmp, sizes[\([idx, 1]\)]]]; \[IndentingNewLine]dat = 
            Array[f, Length[files]]; \[IndentingNewLine]{dat, 
            pos}\[IndentingNewLine]];\)\(\[IndentingNewLine]\)
    \)\), "\[IndentingNewLine]", 
    \(\(\(ImportGrid[name_, dof_] := 
        Module[{dat, files, sizes, pos, tmp, f}, \[IndentingNewLine]sizes = 
            Import[name <> "\<.size\>", "\<Table\>"]; \[IndentingNewLine]pos \
= Import[name <> "\<.pos\>", "\<Table\>"]; \[IndentingNewLine]files = 
            FileNames[name <> "\<.*.Real64\>"]; \[IndentingNewLine]f = 
            Function[{file, size}, \[IndentingNewLine]tmp = 
                Rest@Import[file, "\<Real64\>", 
                    ByteOrdering \[Rule] 1]; \[IndentingNewLine]Partition[
                Partition[tmp, dof], 
                size[\([1]\)]]]; \[IndentingNewLine]dat = 
            MapThread[f, {files, sizes}]; \[IndentingNewLine]{dat, 
            pos}\[IndentingNewLine]];\)\(\[IndentingNewLine]\)
    \)\), "\[IndentingNewLine]", 
    \(\(\(ImportFluid = 
        Function[{MX, MY, prefix, time}, \[IndentingNewLine]ImportVec2[MX, 3, 
            prefix <> "\<.\>" <> 
              ToString[
                time] <> "\<.Real64\>"]\[IndentingNewLine]];\)\(\
\[IndentingNewLine]\)
    \)\), "\[IndentingNewLine]", 
    \(\(\(ImportFluid0 = 
        Function[{MX, MY, dx, prefix, time}, 
          Module[{uvp, uvel, vvel, pvel}, \[IndentingNewLine]uvp = 
              ImportVec2[MX, 3, 
                prefix <> "\<.\>" <> 
                  ToString[time] <> "\<.Real64\>"]; \[IndentingNewLine]pvel = 
              ListInterpolation[
                uvp[\([1]\)], {{1, MY} - 0.5, {1, MX} - 0.5}*dx, 
                InterpolationOrder \[Rule] 0]; 
            uvel = ListInterpolation[
                uvp[\([2]\)], {{1, MY} - 0.5, {1, MX} - 1.0}*dx, 
                InterpolationOrder \[Rule] 0]; 
            vvel = ListInterpolation[
                uvp[\([3]\)], {{1, MY} - 1.0, {1, MX} - 0.5}*dx, 
                InterpolationOrder \[Rule] 0]; \[IndentingNewLine]{pvel, 
              uvel, vvel}\[IndentingNewLine]]];\)\(\[IndentingNewLine]\)
    \)\), "\[IndentingNewLine]", 
    \(\(\(ImportFluid1 = 
        Function[{MX, MY, dx, prefix, time}, 
          Module[{uvp, uvel, vvel, pvel}, \[IndentingNewLine]uvp = 
              ImportVec2[MX, 3, 
                prefix <> "\<.\>" <> 
                  ToString[time] <> "\<.Real64\>"]; \[IndentingNewLine]pvel = 
              ListInterpolation[uvp[\([1]\)], {{1, MY} - 1, {1, MX} - 1}*dx, 
                InterpolationOrder \[Rule] 1]; 
            uvel = ListInterpolation[
                uvp[\([2]\)], {{1, MY} - 1, {1, MX} - 1.5}*dx, 
                InterpolationOrder \[Rule] 1]; 
            vvel = ListInterpolation[
                uvp[\([3]\)], {{1, MY} - 1.5, {1, MX} - 1}*dx, 
                InterpolationOrder \[Rule] 1]; \[IndentingNewLine]{pvel, 
              uvel, vvel}\[IndentingNewLine]]];\)\(\[IndentingNewLine]\)
    \)\), "\[IndentingNewLine]", 
    \(\(ImportMat = 
        Function[
          file, \[IndentingNewLine]Module[{str, exp, exp2, 
              rules}, \[IndentingNewLine]str = 
              Import[file, "\<String\>"]; \[IndentingNewLine]If[
              str \[Equal] $Failed, Abort[]]; \[IndentingNewLine]exp = 
              StringReplace[
                  str, {"\< \nrow \>" \[Rule] "\<}},\n{\>", "\<)  (\>" \
\[Rule] "\<},{\>", "\<(\>" \[Rule] "\<{\>", "\<)\>" \[Rule] "\<}\>", "\<:\>" \
\[Rule] "\<,{\>", "\<row \>" \[Rule] "\<{\n{\>"}] <> "\<}}}\>"; \
\[IndentingNewLine]exp2 = ToExpression[exp]; \[IndentingNewLine]rules = 
              Flatten@MapThread[
                      Function[{r, 
                          cv}, \({r + 1, #[\([1]\)] + 
                                  1} \[Rule] #[\([2]\)] &\) /@ cv], 
                      Transpose[exp2]] /. Rule \[Rule] List // 
                Transpose; \[IndentingNewLine]SparseArray[
              Rule @@ rules]\[IndentingNewLine]]];\)\)}], "Input",
  InitializationCell->True],

Cell[BoxData[{
    \(ImportIrreg\), "\[IndentingNewLine]", 
    \(\(Begin["\<ir`\>"];\)\), "\[IndentingNewLine]", 
    \(\(ImportIrreg[filename_] := 
        Module[{r, i, format, s, len = 9}, \[IndentingNewLine]r[n_] := 
            Table["\<Real64\>", {n}]; \[IndentingNewLine]i[n_] := 
            Table["\<Integer32\>", {n}]; \[IndentingNewLine]raw = 
            BinaryReadList[filename, r[len], 
              ByteOrdering \[Rule] 1]; \[IndentingNewLine]If[raw === $Failed, 
            Return[]]; \[IndentingNewLine]raw = 
            Transpose[raw]; \[IndentingNewLine]s = 1; \[IndentingNewLine]T1 := 
            raw[\([\(s++\)]\)]; \[IndentingNewLine]T2 := 
            Transpose[raw[\([{\(s++\), \(s++\)}]\)]]; \[IndentingNewLine]X = 
            T2; \[IndentingNewLine]x = T2; \[IndentingNewLine]nv = 
            T2; \[IndentingNewLine]f1 = T1; \[IndentingNewLine]f2 = 
            T1; \[IndentingNewLine]k = 
            T1;\[IndentingNewLine]];\)\), "\[IndentingNewLine]", 
    \(\(End[];\)\)}], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(ImportIrreg[filename_] := 
        Module[{r, i, format, s}, \[IndentingNewLine]r[n_] := 
            Table["\<Real64\>", {n}]; \[IndentingNewLine]i[n_] := 
            Table["\<Integer32\>", {n}]; \[IndentingNewLine]raw = 
            Transpose@
              BinaryReadList[filename, r[5], 
                ByteOrdering \[Rule] 1]; \[IndentingNewLine]s = 
            1; \[IndentingNewLine]T1 := 
            raw[\([\(s++\)]\)]; \[IndentingNewLine]T2 := 
            Transpose[raw[\([{\(s++\), \(s++\)}]\)]]; \[IndentingNewLine]X = 
            T2; \[IndentingNewLine]nv = T2; \[IndentingNewLine]f1 = 
            T1;\[IndentingNewLine]];\)\)], "Input"],

Cell[BoxData[{
    \(ImportIrreg\), "\[IndentingNewLine]", 
    \(\(Begin["\<ir`\>"];\)\), "\[IndentingNewLine]", 
    \(\(ImportIrreg[filename_] := 
        Module[{r, i, format, s}, \[IndentingNewLine]r[n_] := 
            Table["\<Real64\>", {n}]; \[IndentingNewLine]i[n_] := 
            Table["\<Integer32\>", {n}]; \[IndentingNewLine]format = 
            Join[i[10], r[18 + 18 + 7 + 6]]; \[IndentingNewLine]raw = 
            Transpose@\(Most@
                BinaryReadList[filename, format]\); \[IndentingNewLine]s = 
            1; \[IndentingNewLine]T1 := 
            raw[\([\(s++\)]\)]; \[IndentingNewLine]T2 := 
            Transpose[
              raw[\([{\(s++\), \(s++\)}]\)]]; \[IndentingNewLine]T3 := \
\(Transpose[raw[\([{\(s++\), \(s++\), \(s++\)}]\)]]\)[\([All, {1, 
                  2}]\)]; \[IndentingNewLine]T6 := 
            Transpose[
              raw[\([{\(s++\), \(s++\), \(s++\), \(s++\), \(s++\), \
\(s++\)}]\)]]; \[IndentingNewLine]idx = T3; \[IndentingNewLine]axis = 
            T3; \[IndentingNewLine]shift = 
            T3; \[IndentingNewLine]T1;  (*GAP*) \[IndentingNewLine]gi = 
            T3; \[IndentingNewLine]nv = T3; \[IndentingNewLine]sv = 
            T3; \[IndentingNewLine]rv = T3; \[IndentingNewLine]sign = 
            T1; \[IndentingNewLine]dist = T1; \[IndentingNewLine]k = 
            T1; \[IndentingNewLine]dk = T3; \[IndentingNewLine]df1 = 
            T6; \[IndentingNewLine]df2 = T6; \[IndentingNewLine]df3 = 
            T6; \[IndentingNewLine]ft = T3; \[IndentingNewLine]vn = 
            T1; \[IndentingNewLine]c = T1; \[IndentingNewLine]fa = 
            T2; \[IndentingNewLine]X = T3; \[IndentingNewLine]op = 
            T3;\[IndentingNewLine]];\)\), "\[IndentingNewLine]", 
    \(\(End[];\)\)}], "Input"],

Cell[BoxData[
    \(LSPlot[ls_, opts___] := 
      Module[{lsi}, \[IndentingNewLine]lsi = 
          ListInterpolation[
            Transpose@
              ls, {{1, Length[ls]} - 1, {1, Length[ls[\([1]\)]]} - 1}, 
            InterpolationOrder \[Rule] 1]; \[IndentingNewLine]ContourPlot[
          lsi[x, y], {x, 0.5, Length[ls] - 0.5}, {y, 0.5, 
            Length[ls[\([1]\)]] - 0.5}, opts, Contours \[Rule] {0}, 
          ContourShading \[Rule] None, ContourStyle \[Rule] Red, 
          PlotPoints \[Rule] 2*Length[ls]]\[IndentingNewLine]]\)], "Input",
  InitializationCell->True],

Cell[BoxData[{
    \(\(\(ImportMat = 
        Function[
          file, \[IndentingNewLine]Module[{str, exp, exp2, 
              rules}, \[IndentingNewLine]str = 
              Import[file, "\<String\>"]; \[IndentingNewLine]If[
              str \[Equal] $Failed, Abort[]]; \[IndentingNewLine]exp = 
              StringReplace[
                  str, {"\< \nrow \>" \[Rule] "\<}},\n{\>", "\<)  (\>" \
\[Rule] "\<},{\>", "\<(\>" \[Rule] "\<{\>", "\<)\>" \[Rule] "\<}\>", "\<:\>" \
\[Rule] "\<,{\>", "\<row \>" \[Rule] "\<{\n{\>"}] <> "\<}}}\>"; \
\[IndentingNewLine]exp2 = ToExpression[exp]; \[IndentingNewLine]rules = 
              Flatten@MapThread[
                      Function[{r, 
                          cv}, \({r + 1, #[\([1]\)] + 
                                  1} \[Rule] #[\([2]\)] &\) /@ cv], 
                      Transpose[exp2]] /. Rule \[Rule] List // 
                Transpose; \[IndentingNewLine]SparseArray[
              Rule @@ rules]]];\)\(\[IndentingNewLine]\)
    \)\), "\[IndentingNewLine]", 
    \(ImportTemporal[] := 
      Module[{temporal}, \[IndentingNewLine]temporal = 
          Import["\<temporal.dat\>"]; \[IndentingNewLine]Print[
          temporal[\([1]\)]]; \[IndentingNewLine]{ti, TIME, dt, dtcfl, 
            tiframe, CFL} = 
          Transpose@
            Rest[temporal];\[IndentingNewLine]]\[IndentingNewLine]\), "\
\[IndentingNewLine]", 
    \(\(ImportParticles = 
        Function[t, 
          Module[{file, 
              dat}, \[IndentingNewLine]file = "\<particles.\>" <> 
                ToString[t + 10000] <> "\<.array\>"; \[IndentingNewLine]dat = 
              Import[file, "\<Real64\>"]; \[IndentingNewLine]dat = 
              Partition[dat, 4]; \[IndentingNewLine]dat = 
              Transpose[Most@dat]; \[IndentingNewLine]Xp = 
              dat[\([\)\({1, 2}\)\(]\)] // 
                Transpose; \[IndentingNewLine]radius = 
              dat[\([\)\(4\)\(]\)];\[IndentingNewLine]]];\)\)}], "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{

Cell["Viz", "Section"],

Cell[BoxData[{
    \(\(VizBand;\)\), "\[IndentingNewLine]", 
    \(\(LoadBands;\)\), "\[IndentingNewLine]", 
    \(\(VizLevelSet;\)\), "\[IndentingNewLine]", 
    \(\(StartRealtimeGraph;\)\)}], "Input",
  InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
    \(Begin["\<viz`\>"]\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \("viz`"\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(LoadBands[] := 
        Module[{}, \[IndentingNewLine]\(bands = 
              Function[
                  file, \[IndentingNewLine]band = 
                    Import[file, "\<Integer32\>"]; \[IndentingNewLine]band = 
                    Partition[band, 3]; \[IndentingNewLine]band = 
                    band[\([All, {1, 
                          2}]\)]; \[IndentingNewLine]band\[IndentingNewLine]] \
/@ FileNames["\<band.*\>"];\)\[IndentingNewLine]];\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    RowBox[{\(General::"spell1"\), \(\(:\)\(\ \)\), "\<\"Possible spelling \
error: new symbol name \\\"\\!\\(band\\)\\\" is similar to existing symbol \\\
\"\\!\\(bands\\)\\\". \\!\\(\\*ButtonBox[\\\"More\[Ellipsis]\\\", \
ButtonStyle->\\\"RefGuideLinkText\\\", ButtonFrame->None, \
ButtonData:>\\\"General::spell1\\\"]\\)\"\>"}]], "Message"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(bandbox = 
      Function[p, 
        Line[\(p + # &\) /@ {{0, 0}, {0, 1}, {1, 1}, {1, 0}, {0, 
                0}}]]\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(Function[p, 
      Line[\((p + #1 &)\) /@ {{0, 0}, {0, 1}, {1, 1}, {1, 0}, {0, 
              0}}]]\)], "Output"]
}, Open  ]],

Cell[BoxData[
    \(VizBand[] := 
      Module[{rng}, \[IndentingNewLine]rng = \(Quantile[#, {0, 1}] &\) /@ 
            Transpose[Flatten[bands, 1]]; \[IndentingNewLine]\(Show[
              Graphics[bandbox /@ #, PlotRange \[Rule] rng], 
              AspectRatio \[Rule] 1] &\) /@ 
          bands\[IndentingNewLine]]\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(Epilog \[Rule] {Green, 
        bandbox /@ 
          Transpose[bands[\([i]\)]\[Transpose]  - pos[\([i]\)]]}\)], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
    \(LevelSetColor = 
      If[# > 0, \[IndentingNewLine]If[# > 6, RGBColor[1, 0, 0], 
            RGBColor[1 - #/6, 0, 0]], \[IndentingNewLine]If[# < \(-6\), 
            RGBColor[0, 0, 1], RGBColor[0, 0, 1 + #/6]]] &\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(If[#1 > 0, If[#1 > 6, RGBColor[1, 0, 0], RGBColor[1 - #1\/6, 0, 0]], 
        If[#1 < \(-6\), RGBColor[0, 0, 1], 
          RGBColor[0, 0, 1 + #1\/6]]] &\)], "Output"]
}, Open  ]],

Cell[BoxData[
    \(VizLevelSet[phi_, opts___] := 
      ListDensityPlot[phi, ColorFunction \[Rule] LevelSetColor, 
        ColorFunctionScaling \[Rule] False, opts]\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(StartRealtimeGraph[dt_, RealtimeGraph_] := 
        Module[{time = 1, 
            TestFile}, \[IndentingNewLine]TestFile = "\<mycell.irregNode.\>" <> 
                ToString[# + 
                    10000] <> "\<.array\>" &; \[IndentingNewLine]clear; \
\[IndentingNewLine]While[
            True, \[IndentingNewLine]While[
              FileType[TestFile[time]] == 
                None, \[IndentingNewLine]Pause[ .1]; \[IndentingNewLine]If[
                FileType[TestFile[time - dt]] == 
                  None, \[IndentingNewLine]clear; \[IndentingNewLine]time = 
                  0;\[IndentingNewLine]];\[IndentingNewLine]]; \
\[IndentingNewLine]RealtimeGraph[time]; \[IndentingNewLine]time += 
              dt;\[IndentingNewLine]];\[IndentingNewLine]];\)\)], "Input",
  InitializationCell->True],

Cell[CellGroupData[{

Cell[BoxData[
    \(\(End[];\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[
    \("viz`"\)], "Output"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["SGE", "Section"],

Cell[BoxData[{
    \(MakeViz\), "\[IndentingNewLine]", 
    \(ProgressBar\), "\[IndentingNewLine]", 
    \(ProgressBarTest\[IndentingNewLine]\), "\[IndentingNewLine]", 
    \(\(Begin["\<sge`\>"];\)\)}], "Input",
  InitializationCell->True],

Cell[BoxData[{
    \(\(ID = Environment["\<SGE_TASK_ID\>"];\)\), "\[IndentingNewLine]", 
    \(\(TASKLAST = 
        Environment["\<SGE_TASK_LAST\>"];\)\), "\[IndentingNewLine]", 
    \(\(STARTIDX = 10000;\)\[IndentingNewLine]\), "\[IndentingNewLine]", 
    \(\(If[
        ID =!= $Failed, \[IndentingNewLine]$DisplayFunction = 
          Identity; \[IndentingNewLine]ID = 
          ToExpression[ID]; \[IndentingNewLine]TASKLAST = 
          ToExpression[TASKLAST];\[IndentingNewLine]];\)\)}], "Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(MakeViz[MyViz_] := 
        If[ID === $Failed, \[IndentingNewLine]files = 
            FileNames["\<uvp.*\>"]; \[IndentingNewLine]idx = \(StringSplit[
                files, "\<.\>"]\)[\([All, 2]\)]; \[IndentingNewLine]idx = 
            ToExpression[idx] - 
              STARTIDX; \[IndentingNewLine]$DisplayFunction = 
            Identity; \[IndentingNewLine]MyViz /@ 
            idx;\[IndentingNewLine], \[IndentingNewLine]\(MyViz[
              ID - STARTIDX];\)\[IndentingNewLine]];\)\)], "Input",
  InitializationCell->True],

Cell[BoxData[{
    \(ProgressBar[] := 
      Rectangle[Scaled[{0, 0}], 
        Scaled[{N@\(\(ID - STARTIDX\)\/\(TASKLAST - STARTIDX\)\), 
            0.05}]]\), "\[IndentingNewLine]", 
    \(ProgressBarTest[] := 
      Block[{ID = 1, 
          TASKLAST = 
            10}, \[IndentingNewLine]ProgressBar[]\[IndentingNewLine]]\)}], \
"Input",
  InitializationCell->True],

Cell[BoxData[
    \(\(End[];\)\)], "Input",
  InitializationCell->True]
}, Open  ]]
},
FrontEndVersion->"5.2 for X",
ScreenRectangle->{{0, 2400}, {0, 1600}},
AutoGeneratedPackage->Automatic,
WindowSize->{1200, 1550},
WindowMargins->{{Automatic, 0}, {0, Automatic}},
ShowSelection->True
]

(*******************************************************************
Cached data follows.  If you edit this Notebook file directly, not
using Mathematica, you must remove the line containing CacheID at
the top of  the file.  The cache data will then be recreated when
you save this file from within Mathematica.
*******************************************************************)

(*CellTagsOutline
CellTagsIndex->{}
*)

(*CellTagsIndex
CellTagsIndex->{}
*)

(*NotebookFileOutline
Notebook[{

Cell[CellGroupData[{
Cell[1777, 53, 26, 0, 38, "Subsection"],
Cell[1806, 55, 348, 7, 75, "Input",
  InitializationCell->True],
Cell[2157, 64, 5768, 110, 1115, "Input",
  InitializationCell->True],
Cell[7928, 176, 1047, 18, 315, "Input",
  InitializationCell->True],
Cell[8978, 196, 677, 12, 187, "Input"],
Cell[9658, 210, 1773, 30, 571, "Input"],
Cell[11434, 242, 587, 11, 91, "Input",
  InitializationCell->True],
Cell[12024, 255, 2000, 39, 379, "Input",
  InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{
Cell[14061, 299, 22, 0, 74, "Section"],
Cell[14086, 301, 230, 5, 75, "Input",
  InitializationCell->True],

Cell[CellGroupData[{
Cell[14341, 310, 78, 2, 27, "Input",
  InitializationCell->True],
Cell[14422, 314, 40, 1, 27, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[14499, 320, 518, 10, 139, "Input",
  InitializationCell->True],
Cell[15020, 332, 357, 5, 20, "Message"]
}, Open  ]],

Cell[CellGroupData[{
Cell[15414, 342, 178, 5, 27, "Input",
  InitializationCell->True],
Cell[15595, 349, 133, 3, 27, "Output"]
}, Open  ]],
Cell[15743, 355, 361, 7, 75, "Input",
  InitializationCell->True],
Cell[16107, 364, 141, 3, 27, "Input"],

Cell[CellGroupData[{
Cell[16273, 371, 274, 5, 59, "Input",
  InitializationCell->True],
Cell[16550, 378, 187, 3, 44, "Output"]
}, Open  ]],
Cell[16752, 384, 206, 4, 27, "Input",
  InitializationCell->True],
Cell[16961, 390, 829, 15, 251, "Input",
  InitializationCell->True],

Cell[CellGroupData[{
Cell[17815, 409, 71, 2, 27, "Input",
  InitializationCell->True],
Cell[17889, 413, 40, 1, 27, "Output"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{
Cell[17978, 420, 22, 0, 74, "Section"],
Cell[18003, 422, 239, 5, 91, "Input",
  InitializationCell->True],
Cell[18245, 429, 531, 10, 155, "Input",
  InitializationCell->True],
Cell[18779, 441, 555, 10, 155, "Input",
  InitializationCell->True],
Cell[19337, 453, 371, 10, 93, "Input",
  InitializationCell->True],
Cell[19711, 465, 71, 2, 27, "Input",
  InitializationCell->True]
}, Open  ]]
}
]
*)



(*******************************************************************
End of Mathematica Notebook file.
*******************************************************************)

