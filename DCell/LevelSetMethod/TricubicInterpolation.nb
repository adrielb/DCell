(************** Content-type: application/mathematica **************
                     CreatedBy='Mathematica 5.2'

                    Mathematica-Compatible Notebook

This notebook can be used with any Mathematica-compatible
application, such as Mathematica, MathReader or Publicon. The data
for the notebook starts with the line containing stars above.

To get the notebook into a Mathematica-compatible application, do
one of the following:

* Save the data starting with the line of stars above into a file
  with a name ending in .nb, then open the file inside the
  application;

* Copy the data starting with the line of stars above to the
  clipboard, then use the Paste menu command inside the application.

Data for notebooks contains only printable 7-bit ASCII and can be
sent directly in email or through ftp in text mode.  Newlines can be
CR, LF or CRLF (Unix, Macintosh or MS-DOS style).

NOTE: If you modify the data for this notebook not in a Mathematica-
compatible application, you must delete the line below containing
the word CacheID, otherwise Mathematica-compatible applications may
try to use invalid cache data.

For more information on notebooks and Mathematica-compatible 
applications, contact Wolfram Research:
  web: http://www.wolfram.com
  email: info@wolfram.com
  phone: +1-217-398-0700 (U.S.)

Notebook reader applications are available free of charge from 
Wolfram Research.
*******************************************************************)

(*CacheID: 232*)


(*NotebookFileLineBreakTest
NotebookFileLineBreakTest*)
(*NotebookOptionsPosition[    355001,       5224]*)
(*NotebookOutlinePosition[    355631,       5246]*)
(*  CellTagsIndexPosition[    355587,       5242]*)
(*WindowFrame->Normal*)



Notebook[{

Cell[CellGroupData[{
Cell["Tricubic Interpolation", "Section"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(X = 
      Table[x\^m*y\^n*z\^p, {p, 0, 3}, {n, 0, 3}, {m, 0, 3}] // 
        Flatten\), "\[IndentingNewLine]", 
    \(Length[X]\)}], "Input"],

Cell[BoxData[
    \({1, x, x\^2, x\^3, y, x\ y, x\^2\ y, x\^3\ y, y\^2, x\ y\^2, 
      x\^2\ y\^2, x\^3\ y\^2, y\^3, x\ y\^3, x\^2\ y\^3, x\^3\ y\^3, z, x\ z, 
      x\^2\ z, x\^3\ z, y\ z, x\ y\ z, x\^2\ y\ z, x\^3\ y\ z, y\^2\ z, 
      x\ y\^2\ z, x\^2\ y\^2\ z, x\^3\ y\^2\ z, y\^3\ z, x\ y\^3\ z, 
      x\^2\ y\^3\ z, x\^3\ y\^3\ z, z\^2, x\ z\^2, x\^2\ z\^2, x\^3\ z\^2, 
      y\ z\^2, x\ y\ z\^2, x\^2\ y\ z\^2, x\^3\ y\ z\^2, y\^2\ z\^2, 
      x\ y\^2\ z\^2, x\^2\ y\^2\ z\^2, x\^3\ y\^2\ z\^2, y\^3\ z\^2, 
      x\ y\^3\ z\^2, x\^2\ y\^3\ z\^2, x\^3\ y\^3\ z\^2, z\^3, x\ z\^3, 
      x\^2\ z\^3, x\^3\ z\^3, y\ z\^3, x\ y\ z\^3, x\^2\ y\ z\^3, 
      x\^3\ y\ z\^3, y\^2\ z\^3, x\ y\^2\ z\^3, x\^2\ y\^2\ z\^3, 
      x\^3\ y\^2\ z\^3, y\^3\ z\^3, x\ y\^3\ z\^3, x\^2\ y\^3\ z\^3, 
      x\^3\ y\^3\ z\^3}\)], "Output"],

Cell[BoxData[
    \(64\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
    \(coor = 
      Table[{x \[Rule] m, y \[Rule] n, z \[Rule] p}, {p, 0, 1}, {n, 0, 
            1}, {m, 0, 1}] // Flatten[#, 2] &\), "\[IndentingNewLine]", 
    \(Length[coor]\)}], "Input"],

Cell[BoxData[
    \({{x \[Rule] 0, y \[Rule] 0, z \[Rule] 0}, {x \[Rule] 1, y \[Rule] 0, 
        z \[Rule] 0}, {x \[Rule] 0, y \[Rule] 1, z \[Rule] 0}, {x \[Rule] 1, 
        y \[Rule] 1, z \[Rule] 0}, {x \[Rule] 0, y \[Rule] 0, 
        z \[Rule] 1}, {x \[Rule] 1, y \[Rule] 0, z \[Rule] 1}, {x \[Rule] 0, 
        y \[Rule] 1, z \[Rule] 1}, {x \[Rule] 1, y \[Rule] 1, 
        z \[Rule] 1}}\)], "Output"],

Cell[BoxData[
    \(8\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(mat = {X, D[X, x], D[X, y], D[X, z], D[X, x, y], D[X, x, z], 
            D[X, y, z], D[X, x, y, z]} /. 
          coor[\([1]\)];\)\), "\[IndentingNewLine]", 
    \(Dimensions[mat]\), "\[IndentingNewLine]", 
    \(MatrixForm[Join[{X}, RowReduce@mat]]\)}], "Input"],

Cell[BoxData[
    \({8, 64}\)], "Output"],

Cell[BoxData[
    TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
            {"1", "x", \(x\^2\), \(x\^3\), 
              "y", \(x\ y\), \(x\^2\ y\), \(x\^3\ y\), \(y\^2\), \(x\ y\^2\), \
\(x\^2\ y\^2\), \(x\^3\ y\^2\), \(y\^3\), \(x\ y\^3\), \(x\^2\ y\^3\), \(x\^3\
\ y\^3\), 
              "z", \(x\ z\), \(x\^2\ z\), \(x\^3\ z\), \(y\ z\), \(x\ y\ z\), \
\(x\^2\ y\ z\), \(x\^3\ y\ z\), \(y\^2\ z\), \(x\ y\^2\ z\), \(x\^2\ y\^2\ \
z\), \(x\^3\ y\^2\ z\), \(y\^3\ z\), \(x\ y\^3\ z\), \(x\^2\ y\^3\ z\), \
\(x\^3\ y\^3\ z\), \(z\^2\), \(x\ z\^2\), \(x\^2\ z\^2\), \(x\^3\ z\^2\), \(y\
\ z\^2\), \(x\ y\ z\^2\), \(x\^2\ y\ z\^2\), \(x\^3\ y\ z\^2\), \(y\^2\ \
z\^2\), \(x\ y\^2\ z\^2\), \(x\^2\ y\^2\ z\^2\), \(x\^3\ y\^2\ z\^2\), \(y\^3\
\ z\^2\), \(x\ y\^3\ z\^2\), \(x\^2\ y\^3\ z\^2\), \(x\^3\ y\^3\ z\^2\), \
\(z\^3\), \(x\ z\^3\), \(x\^2\ z\^3\), \(x\^3\ z\^3\), \(y\ z\^3\), \(x\ y\ z\
\^3\), \(x\^2\ y\ z\^3\), \(x\^3\ y\ z\^3\), \(y\^2\ z\^3\), \(x\ y\^2\ \
z\^3\), \(x\^2\ y\^2\ z\^3\), \(x\^3\ y\^2\ z\^3\), \(y\^3\ z\^3\), \(x\ y\^3\
\ z\^3\), \(x\^2\ y\^3\ z\^3\), \(x\^3\ y\^3\ z\^3\)},
            {"1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0"},
            {"0", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0"},
            {"0", "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0"},
            {"0", "0", "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0"}
            },
          RowSpacings->1,
          ColumnSpacings->1,
          ColumnAlignments->{Left}], "\[NoBreak]", ")"}],
      Function[ BoxForm`e$, 
        MatrixForm[ BoxForm`e$]]]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(D[X, x, y, z]\)], "Input"],

Cell[BoxData[
    \({0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
      2\ x, 3\ x\^2, 0, 2\ y, 4\ x\ y, 6\ x\^2\ y, 0, 3\ y\^2, 6\ x\ y\^2, 
      9\ x\^2\ y\^2, 0, 0, 0, 0, 0, 2\ z, 4\ x\ z, 6\ x\^2\ z, 0, 4\ y\ z, 
      8\ x\ y\ z, 12\ x\^2\ y\ z, 0, 6\ y\^2\ z, 12\ x\ y\^2\ z, 
      18\ x\^2\ y\^2\ z, 0, 0, 0, 0, 0, 3\ z\^2, 6\ x\ z\^2, 9\ x\^2\ z\^2, 
      0, 6\ y\ z\^2, 12\ x\ y\ z\^2, 18\ x\^2\ y\ z\^2, 0, 9\ y\^2\ z\^2, 
      18\ x\ y\^2\ z\^2, 27\ x\^2\ y\^2\ z\^2}\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(mat = \({X, D[X, x], D[X, y], D[X, z], D[X, x, y], D[X, x, z], 
                D[X, y, z], D[X, x, y, z]} /. coor // Transpose\) // 
          Flatten[#, 1] &;\)\), "\[IndentingNewLine]", 
    \(\(matRows = \({XX, Dx, Dy, Dz, Dxy, Dxz, Dyz, Dxyz} /. coor // 
            Transpose\) // Flatten[#, 1] &;\)\), "\[IndentingNewLine]", 
    \(MatrixForm /@ {mat, matRows}\)}], "Input"],

Cell[BoxData[
    RowBox[{\(General::"spell"\), \(\(:\)\(\ \)\), "\<\"Possible spelling \
error: new symbol name \\\"\\!\\(Dxyz\\)\\\" is similar to existing symbols \
\\!\\({Dxy, Dxz, Dyz}\\). \\!\\(\\*ButtonBox[\\\"More\[Ellipsis]\\\", \
ButtonStyle->\\\"RefGuideLinkText\\\", ButtonFrame->None, \
ButtonData:>\\\"General::spell\\\"]\\)\"\>"}]], "Message"],

Cell[BoxData[
    RowBox[{"{", 
      RowBox[{
        TagBox[
          RowBox[{"(", "\[NoBreak]", GridBox[{
                {"1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0"},
                {"1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0"},
                {"1", "0", "0", "0", "1", "0", "0", "0", "1", "0", "0", "0", 
                  "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0"},
                {"1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", 
                  "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0"},
                {"1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0"},
                {"1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "1", "1", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0"},
                {"1", "0", "0", "0", "1", "0", "0", "0", "1", "0", "0", "0", 
                  "1", "0", "0", "0", "1", "0", "0", "0", "1", "0", "0", "0", 
                  "1", "0", "0", "0", "1", "0", "0", "0", "1", "0", "0", "0", 
                  "1", "0", "0", "0", "1", "0", "0", "0", "1", "0", "0", "0", 
                  "1", "0", "0", "0", "1", "0", "0", "0", "1", "0", "0", "0", 
                  "1", "0", "0", "0"},
                {"1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", 
                  "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", 
                  "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", 
                  "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", 
                  "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", 
                  "1", "1", "1", "1"},
                {"0", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0"},
                {"0", "1", "2", "3", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0"},
                {"0", "1", "0", "0", "0", "1", "0", "0", "0", "1", "0", "0", 
                  "0", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0"},
                {"0", "1", "2", "3", "0", "1", "2", "3", "0", "1", "2", "3", 
                  "0", "1", "2", "3", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0"},
                {"0", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0"},
                {"0", "1", "2", "3", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "1", "2", "3", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "2", "3", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "1", "2", "3", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0"},
                {"0", "1", "0", "0", "0", "1", "0", "0", "0", "1", "0", "0", 
                  "0", "1", "0", "0", "0", "1", "0", "0", "0", "1", "0", "0", 
                  "0", "1", "0", "0", "0", "1", "0", "0", "0", "1", "0", "0", 
                  "0", "1", "0", "0", "0", "1", "0", "0", "0", "1", "0", "0", 
                  "0", "1", "0", "0", "0", "1", "0", "0", "0", "1", "0", "0", 
                  "0", "1", "0", "0"},
                {"0", "1", "2", "3", "0", "1", "2", "3", "0", "1", "2", "3", 
                  "0", "1", "2", "3", "0", "1", "2", "3", "0", "1", "2", "3", 
                  "0", "1", "2", "3", "0", "1", "2", "3", "0", "1", "2", "3", 
                  "0", "1", "2", "3", "0", "1", "2", "3", "0", "1", "2", "3", 
                  "0", "1", "2", "3", "0", "1", "2", "3", "0", "1", "2", "3", 
                  "0", "1", "2", "3"},
                {"0", "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0"},
                {"0", "0", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0"},
                {"0", "0", "0", "0", "1", "0", "0", "0", "2", "0", "0", "0", 
                  "3", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0"},
                {"0", "0", "0", "0", "1", "1", "1", "1", "2", "2", "2", "2", 
                  "3", "3", "3", "3", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0"},
                {"0", "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0"},
                {"0", "0", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "1", "1", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", 
                  "0", "0", "0", "0"},
                {"0", "0", "0", "0", "1", "0", "0", "0", "2", "0", "0", "0", 
                  "3", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0", 
                  "2", "0", "0", "0", "3", "0", "0", "0", "0", "0", "0", "0", 
                  "1", "0", "0", "0", "2", "0", "0", "0", "3", "0", "0", "0", 
                  "0", "0", "0", "0", "1", "0", "0", "0", "2", "0", "0", "0", 
                  "3", "0", "0", "0"},
                {"0", "0", "0", "0", "1", "1", "1", "1", "2", "2", "2", "2", 
                  "3", "3", "3", "3", "0", "0", "0", "0", "1", "1", "1", "1", 
                  "2", "2", "2", "2", "3", "3", "3", "3", "0", "0", "0", "0", 
                  "1", "1", "1", "1", "2", "2", "2", "2", "3", "3", "3", "3", 
                  "0", "0", "0", "0", "1", "1", "1", "1", "2", "2", "2", "2", 
                  "3", "3", "3", "3"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "1", "0", "0", "0", "1", "0", "0", "0", 
                  "1", "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "1", "1", "1", "1", "1", "1", "1", "1", 
                  "1", "1", "1", "1", "1", "1", "1", "1", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "2", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "3", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "2", "2", "2", "2", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "3", "3", "3", "3", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "1", "0", "0", "0", "1", "0", "0", "0", 
                  "1", "0", "0", "0", "1", "0", "0", "0", "2", "0", "0", "0", 
                  "2", "0", "0", "0", "2", "0", "0", "0", "2", "0", "0", "0", 
                  "3", "0", "0", "0", "3", "0", "0", "0", "3", "0", "0", "0", 
                  "3", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "1", "1", "1", "1", "1", "1", "1", "1", 
                  "1", "1", "1", "1", "1", "1", "1", "1", "2", "2", "2", "2", 
                  "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", "2", 
                  "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", "3", 
                  "3", "3", "3", "3"},
                {"0", "0", "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "1", "2", "3", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "1", "0", "0", "0", "2", "0", "0", 
                  "0", "3", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "1", "2", "3", "0", "2", "4", "6", 
                  "0", "3", "6", "9", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "1", "2", "3", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "2", "3", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "1", "2", "3", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "1", "2", "3", "0", "0", "0", "0", 
                  "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "1", "0", "0", "0", "2", "0", "0", 
                  "0", "3", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", 
                  "0", "2", "0", "0", "0", "3", "0", "0", "0", "0", "0", "0", 
                  "0", "1", "0", "0", "0", "2", "0", "0", "0", "3", "0", "0", 
                  "0", "0", "0", "0", "0", "1", "0", "0", "0", "2", "0", "0", 
                  "0", "3", "0", "0"},
                {"0", "0", "0", "0", "0", "1", "2", "3", "0", "2", "4", "6", 
                  "0", "3", "6", "9", "0", "0", "0", "0", "0", "1", "2", "3", 
                  "0", "2", "4", "6", "0", "3", "6", "9", "0", "0", "0", "0", 
                  "0", "1", "2", "3", "0", "2", "4", "6", "0", "3", "6", "9", 
                  "0", "0", "0", "0", "0", "1", "2", "3", "0", "2", "4", "6", 
                  "0", "3", "6", "9"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "1", "2", "3", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "1", "0", "0", "0", "1", "0", "0", 
                  "0", "1", "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "1", "2", "3", "0", "1", "2", "3", 
                  "0", "1", "2", "3", "0", "1", "2", "3", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "2", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "3", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "1", "2", "3", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "2", "4", "6", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "3", "6", "9", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "1", "0", "0", "0", "1", "0", "0", 
                  "0", "1", "0", "0", "0", "1", "0", "0", "0", "2", "0", "0", 
                  "0", "2", "0", "0", "0", "2", "0", "0", "0", "2", "0", "0", 
                  "0", "3", "0", "0", "0", "3", "0", "0", "0", "3", "0", "0", 
                  "0", "3", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "1", "2", "3", "0", "1", "2", "3", 
                  "0", "1", "2", "3", "0", "1", "2", "3", "0", "2", "4", "6", 
                  "0", "2", "4", "6", "0", "2", "4", "6", "0", "2", "4", "6", 
                  "0", "3", "6", "9", "0", "3", "6", "9", "0", "3", "6", "9", 
                  "0", "3", "6", "9"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "1", "1", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0", 
                  "2", "0", "0", "0", "3", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "1", "1", 
                  "2", "2", "2", "2", "3", "3", "3", "3", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "2", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "3", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "1", "1", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "2", "2", "2", "2", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "3", "3", "3", "3", "0", "0", "0", "0", 
                  "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0", 
                  "2", "0", "0", "0", "3", "0", "0", "0", "0", "0", "0", "0", 
                  "2", "0", "0", "0", "4", "0", "0", "0", "6", "0", "0", "0", 
                  "0", "0", "0", "0", "3", "0", "0", "0", "6", "0", "0", "0", 
                  "9", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "1", "1", 
                  "2", "2", "2", "2", "3", "3", "3", "3", "0", "0", "0", "0", 
                  "2", "2", "2", "2", "4", "4", "4", "4", "6", "6", "6", "6", 
                  "0", "0", "0", "0", "3", "3", "3", "3", "6", "6", "6", "6", 
                  "9", "9", "9", "9"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "2", "3", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", 
                  "0", "2", "0", "0", "0", "3", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "2", "3", 
                  "0", "2", "4", "6", "0", "3", "6", "9", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "2", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "3", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "2", "3", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "2", "4", "6", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "3", "6", "9", "0", "0", "0", "0", 
                  "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", 
                  "0", "2", "0", "0", "0", "3", "0", "0", "0", "0", "0", "0", 
                  "0", "2", "0", "0", "0", "4", "0", "0", "0", "6", "0", "0", 
                  "0", "0", "0", "0", "0", "3", "0", "0", "0", "6", "0", "0", 
                  "0", "9", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "2", "3", 
                  "0", "2", "4", "6", "0", "3", "6", "9", "0", "0", "0", "0", 
                  "0", "2", "4", "6", "0", "4", "8", "12", "0", "6", "12", 
                  "18", "0", "0", "0", "0", "0", "3", "6", "9", "0", "6", 
                  "12", "18", "0", "9", "18", "27"}
                },
              RowSpacings->1,
              ColumnSpacings->1,
              ColumnAlignments->{Left}], "\[NoBreak]", ")"}],
          Function[ BoxForm`e$, 
            MatrixForm[ BoxForm`e$]]], ",", 
        TagBox[
          RowBox[{"(", "\[NoBreak]", 
            TagBox[GridBox[{
                  {"XX"},
                  {"XX"},
                  {"XX"},
                  {"XX"},
                  {"XX"},
                  {"XX"},
                  {"XX"},
                  {"XX"},
                  {"Dx"},
                  {"Dx"},
                  {"Dx"},
                  {"Dx"},
                  {"Dx"},
                  {"Dx"},
                  {"Dx"},
                  {"Dx"},
                  {"Dy"},
                  {"Dy"},
                  {"Dy"},
                  {"Dy"},
                  {"Dy"},
                  {"Dy"},
                  {"Dy"},
                  {"Dy"},
                  {"Dz"},
                  {"Dz"},
                  {"Dz"},
                  {"Dz"},
                  {"Dz"},
                  {"Dz"},
                  {"Dz"},
                  {"Dz"},
                  {"Dxy"},
                  {"Dxy"},
                  {"Dxy"},
                  {"Dxy"},
                  {"Dxy"},
                  {"Dxy"},
                  {"Dxy"},
                  {"Dxy"},
                  {"Dxz"},
                  {"Dxz"},
                  {"Dxz"},
                  {"Dxz"},
                  {"Dxz"},
                  {"Dxz"},
                  {"Dxz"},
                  {"Dxz"},
                  {"Dyz"},
                  {"Dyz"},
                  {"Dyz"},
                  {"Dyz"},
                  {"Dyz"},
                  {"Dyz"},
                  {"Dyz"},
                  {"Dyz"},
                  {"Dxyz"},
                  {"Dxyz"},
                  {"Dxyz"},
                  {"Dxyz"},
                  {"Dxyz"},
                  {"Dxyz"},
                  {"Dxyz"},
                  {"Dxyz"}
                  },
                RowSpacings->1,
                ColumnAlignments->{Left}],
              Column], "\[NoBreak]", ")"}],
          Function[ BoxForm`e$, 
            MatrixForm[ BoxForm`e$]]]}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
    \(MatrixForm /@ {MatrixForm[Join[{X}, RowReduce@mat]], 
        matRows}\)], "Input"],

Cell[BoxData[
    RowBox[{"{", 
      RowBox[{
        TagBox[
          TagBox[
            RowBox[{"(", "\[NoBreak]", GridBox[{
                  {"1", "x", \(x\^2\), \(x\^3\), 
                    "y", \(x\ y\), \(x\^2\ y\), \(x\^3\ y\), \(y\^2\), \(x\ y\
\^2\), \(x\^2\ y\^2\), \(x\^3\ y\^2\), \(y\^3\), \(x\ y\^3\), \(x\^2\ y\^3\), \
\(x\^3\ y\^3\), 
                    "z", \(x\ z\), \(x\^2\ z\), \(x\^3\ z\), \(y\ z\), \(x\ y\
\ z\), \(x\^2\ y\ z\), \(x\^3\ y\ z\), \(y\^2\ z\), \(x\ y\^2\ z\), \(x\^2\ y\
\^2\ z\), \(x\^3\ y\^2\ z\), \(y\^3\ z\), \(x\ y\^3\ z\), \(x\^2\ y\^3\ z\), \
\(x\^3\ y\^3\ z\), \(z\^2\), \(x\ z\^2\), \(x\^2\ z\^2\), \(x\^3\ z\^2\), \(y\
\ z\^2\), \(x\ y\ z\^2\), \(x\^2\ y\ z\^2\), \(x\^3\ y\ z\^2\), \(y\^2\ \
z\^2\), \(x\ y\^2\ z\^2\), \(x\^2\ y\^2\ z\^2\), \(x\^3\ y\^2\ z\^2\), \(y\^3\
\ z\^2\), \(x\ y\^3\ z\^2\), \(x\^2\ y\^3\ z\^2\), \(x\^3\ y\^3\ z\^2\), \
\(z\^3\), \(x\ z\^3\), \(x\^2\ z\^3\), \(x\^3\ z\^3\), \(y\ z\^3\), \(x\ y\ z\
\^3\), \(x\^2\ y\ z\^3\), \(x\^3\ y\ z\^3\), \(y\^2\ z\^3\), \(x\ y\^2\ \
z\^3\), \(x\^2\ y\^2\ z\^3\), \(x\^3\ y\^2\ z\^3\), \(y\^3\ z\^3\), \(x\ y\^3\
\ z\^3\), \(x\^2\ y\^3\ z\^3\), \(x\^3\ y\^3\ z\^3\)},
                  {"1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0"},
                  {"0", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0"},
                  {"0", "0", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0"},
                  {"0", "0", "0", "1", "0", "0", "0", "0", "0", "0", "0", "0",
                     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0"},
                  {"0", "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", "0",
                     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0"},
                  {"0", "0", "0", "0", "0", "1", "0", "0", "0", "0", "0", "0",
                     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0"},
                  {"0", "0", "0", "0", "0", "0", "1", "0", "0", "0", "0", "0",
                     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0"},
                  {"0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0", "0",
                     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0"},
                  {"0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0",
                     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0"},
                  {"0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0",
                     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0"},
                  {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0",
                     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0"},
                  {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1",
                     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0"},
                  {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                     "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0"},
                  {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                     "0", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0"},
                  {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                     "0", "0", "1", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0"},
                  {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                     "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0"},
                  {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                     "0", "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0"},
                  {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                     "0", "0", "0", "0", "0", "1", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0"},
                  {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                     "0", "0", "0", "0", "0", "0", "1", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0"},
                  {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                     "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0"},
                  {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                     "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0"},
                  {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                     "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0"},
                  {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0"},
                  {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0"},
                  {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0"},
                  {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "1", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0"},
                  {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0"},
                  {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0"},
                  {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "1", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0"},
                  {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "1", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0"},
                  {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0"},
                  {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0"},
                  {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0"},
                  {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0"},
                  {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0"},
                  {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0"},
                  {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "1", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0"},
                  {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0"},
                  {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0"},
                  {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "1", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0"},
                  {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "1", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0"},
                  {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0"},
                  {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0"},
                  {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0"},
                  {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0"},
                  {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0"},
                  {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0"},
                  {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "1", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0"},
                  {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0"},
                  {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0"},
                  {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "1", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0"},
                  {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "1", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0"},
                  {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0"},
                  {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0"},
                  {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0"},
                  {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", 
                    "0", "0", "0", "0", "0", "0", "0", "0"},
                  {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "1", "0", "0", "0", "0", "0", "0", "0"},
                  {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "1", "0", "0", "0", "0", "0", "0"},
                  {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "1", "0", "0", "0", "0", "0"},
                  {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "1", "0", "0", "0", "0"},
                  {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "1", "0", "0", "0"},
                  {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "1", "0", "0"},
                  {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "1", "0"},
                  {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                     "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                    "0", "0", "0", "0", "0", "0", "0", "1"}
                  },
                RowSpacings->1,
                ColumnSpacings->1,
                ColumnAlignments->{Left}], "\[NoBreak]", ")"}],
            Function[ BoxForm`e$, 
              MatrixForm[ BoxForm`e$]]],
          Function[ BoxForm`e$, 
            MatrixForm[ BoxForm`e$]]], ",", 
        TagBox[
          RowBox[{"(", "\[NoBreak]", 
            TagBox[GridBox[{
                  {"XX"},
                  {"XX"},
                  {"XX"},
                  {"XX"},
                  {"XX"},
                  {"XX"},
                  {"XX"},
                  {"XX"},
                  {"Dx"},
                  {"Dx"},
                  {"Dx"},
                  {"Dx"},
                  {"Dx"},
                  {"Dx"},
                  {"Dx"},
                  {"Dx"},
                  {"Dy"},
                  {"Dy"},
                  {"Dy"},
                  {"Dy"},
                  {"Dy"},
                  {"Dy"},
                  {"Dy"},
                  {"Dy"},
                  {"Dz"},
                  {"Dz"},
                  {"Dz"},
                  {"Dz"},
                  {"Dz"},
                  {"Dz"},
                  {"Dz"},
                  {"Dz"},
                  {"Dxy"},
                  {"Dxy"},
                  {"Dxy"},
                  {"Dxy"},
                  {"Dxy"},
                  {"Dxy"},
                  {"Dxy"},
                  {"Dxy"},
                  {"Dxz"},
                  {"Dxz"},
                  {"Dxz"},
                  {"Dxz"},
                  {"Dxz"},
                  {"Dxz"},
                  {"Dxz"},
                  {"Dxz"},
                  {"Dyz"},
                  {"Dyz"},
                  {"Dyz"},
                  {"Dyz"},
                  {"Dyz"},
                  {"Dyz"},
                  {"Dyz"},
                  {"Dyz"},
                  {"Dxyz"},
                  {"Dxyz"},
                  {"Dxyz"},
                  {"Dxyz"},
                  {"Dxyz"},
                  {"Dxyz"},
                  {"Dxyz"},
                  {"Dxyz"}
                  },
                RowSpacings->1,
                ColumnAlignments->{Left}],
              Column], "\[NoBreak]", ")"}],
          Function[ BoxForm`e$, 
            MatrixForm[ BoxForm`e$]]]}], "}"}]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(imat = Inverse[mat];\)\), "\[IndentingNewLine]", 
    \(MatrixForm[imat]\)}], "Input"],

Cell[BoxData[
    TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
            {"1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0"},
            {\(-3\), "3", "0", "0", "0", "0", "0", "0", \(-2\), \(-1\), "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0"},
            {"2", \(-2\), "0", "0", "0", "0", "0", "0", "1", "1", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "1", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", \(-3\), "3", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", \(-2\), \(-1\), "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "2", \(-2\), "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "1", "1", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0"},
            {\(-3\), "0", "3", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", \(-2\), "0", \(-1\), "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", \(-3\), "0", "3", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "0", \(-2\), "0", \(-1\), "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0"},
            {"9", \(-9\), \(-9\), "9", "0", "0", "0", "0", "6", 
              "3", \(-6\), \(-3\), "0", "0", "0", "0", "6", \(-6\), 
              "3", \(-3\), "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "4", "2", "2", "1", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {\(-6\), "6", "6", \(-6\), "0", "0", "0", "0", \(-3\), \(-3\), 
              "3", "3", "0", "0", "0", "0", \(-4\), "4", \(-2\), "2", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", \(-2\), \(-2\), \(-1\), \(-1\), "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"2", "0", \(-2\), "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "1", "0", "1", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "2", "0", \(-2\), "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "0", "1", "0", "1", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0"},
            {\(-6\), "6", "6", \(-6\), "0", "0", "0", "0", \(-4\), \(-2\), 
              "4", "2", "0", "0", "0", "0", \(-3\), "3", \(-3\), "3", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", \(-2\), \(-1\), \(-2\), \(-1\), "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"4", \(-4\), \(-4\), "4", "0", "0", "0", "0", "2", 
              "2", \(-2\), \(-2\), "0", "0", "0", "0", "2", \(-2\), 
              "2", \(-2\), "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", \(-3\), 
              "3", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", \(-2\), \(-1\), "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "2", \(-2\), "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "1", "1", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", 
              "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", \(-3\), "3", 
              "0", "0", "0", "0", "0", "0", \(-2\), \(-1\), "0", "0", "0", 
              "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "2", \(-2\), 
              "0", "0", "0", "0", "0", "0", "1", "1", "0", "0", "0", "0", "0",
               "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", \(-3\), 
              "0", "3", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", \(-2\), 
              "0", \(-1\), "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", \(-3\), "0", "3", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", \(-2\), "0", \(-1\), "0", "0", 
              "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "9", \(-9\), \(-9\), "9", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "6", "3", \(-6\), \(-3\), "0", "0", 
              "0", "0", "6", \(-6\), "3", \(-3\), "0", "0", "0", "0", "4", 
              "2", "2", "1", "0", "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", \(-6\), 
              "6", "6", \(-6\), "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", \(-3\), \(-3\), "3", "3", "0", "0", "0", 
              "0", \(-4\), "4", \(-2\), "2", "0", "0", "0", 
              "0", \(-2\), \(-2\), \(-1\), \(-1\), "0", "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "2", 
              "0", \(-2\), "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0",
               "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "2", "0", \(-2\), "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "1", "0", "1", "0", "0", "0", "0",
               "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", \(-6\), 
              "6", "6", \(-6\), "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", \(-4\), \(-2\), "4", "2", "0", "0", "0", 
              "0", \(-3\), "3", \(-3\), "3", "0", "0", "0", 
              "0", \(-2\), \(-1\), \(-2\), \(-1\), "0", "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "4", \(-4\), \(-4\), "4", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "2", "2", \(-2\), \(-2\), "0", "0", 
              "0", "0", "2", \(-2\), "2", \(-2\), "0", "0", "0", "0", "1", 
              "1", "1", "1", "0", "0", "0", "0"},
            {\(-3\), "0", "0", "0", "3", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", \(-2\), "0", "0", "0", \(-1\), "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", \(-3\), "0", "0", "0", 
              "3", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", \(-2\), "0", "0", "0", \(-1\), "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0"},
            {"9", \(-9\), "0", "0", \(-9\), "9", "0", "0", "6", "3", "0", 
              "0", \(-6\), \(-3\), "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "6", \(-6\), "0", "0", "3", \(-3\), "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "4", "2", "0", "0", "2", "1",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0"},
            {\(-6\), "6", "0", "0", "6", \(-6\), "0", "0", \(-3\), \(-3\), 
              "0", "0", "3", "3", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", \(-4\), "4", "0", "0", \(-2\), "2", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", \(-2\), \(-2\), "0", 
              "0", \(-1\), \(-1\), "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", \(-3\), "0", "0", "0", "3", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", \(-2\), "0", 
              "0", "0", \(-1\), "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", \(-3\), "0", "0", "0", "3", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", \(-2\), "0", "0", "0", \(-1\), "0", 
              "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "9", \(-9\), "0", "0", \(-9\), "9", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "6", "3", "0", 
              "0", \(-6\), \(-3\), "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "6", \(-6\), "0", "0", "3", \(-3\), "0", "0", "4", 
              "2", "0", "0", "2", "1", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", \(-6\), "6", "0", "0", "6", \(-6\), "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", \(-3\), \(-3\), "0", 
              "0", "3", "3", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", \(-4\), "4", "0", "0", \(-2\), "2", "0", 
              "0", \(-2\), \(-2\), "0", "0", \(-1\), \(-1\), "0", "0"},
            {"9", "0", \(-9\), "0", \(-9\), "0", "9", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "6", "0", "3", "0", \(-6\), "0", \(-3\), 
              "0", "6", "0", \(-6\), "0", "3", "0", \(-3\), "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "4", "0", "2", "0", "2", "0", "1", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "9", "0", \(-9\), 
              "0", \(-9\), "0", "9", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "6", "0", "3", 
              "0", \(-6\), "0", \(-3\), "0", "6", "0", \(-6\), "0", "3", 
              "0", \(-3\), "0", "0", "0", "0", "0", "0", "0", "0", "0", "4", 
              "0", "2", "0", "2", "0", "1", "0"},
            {\(-27\), "27", "27", \(-27\), "27", \(-27\), \(-27\), 
              "27", \(-18\), \(-9\), "18", "9", "18", 
              "9", \(-18\), \(-9\), \(-18\), "18", \(-9\), "9", "18", \(-18\),
               "9", \(-9\), \(-18\), "18", "18", \(-18\), \(-9\), "9", 
              "9", \(-9\), \(-12\), \(-6\), \(-6\), \(-3\), "12", "6", "6", 
              "3", \(-12\), \(-6\), "12", "6", \(-6\), \(-3\), "6", 
              "3", \(-12\), "12", \(-6\), "6", \(-6\), "6", \(-3\), 
              "3", \(-8\), \(-4\), \(-4\), \(-2\), \(-4\), \(-2\), \(-2\), \
\(-1\)},
            {"18", \(-18\), \(-18\), "18", \(-18\), "18", "18", \(-18\), "9", 
              "9", \(-9\), \(-9\), \(-9\), \(-9\), "9", "9", "12", \(-12\), 
              "6", \(-6\), \(-12\), "12", \(-6\), "6", "12", \(-12\), \(-12\),
               "12", "6", \(-6\), \(-6\), "6", "6", "6", "3", 
              "3", \(-6\), \(-6\), \(-3\), \(-3\), "6", "6", \(-6\), \(-6\), 
              "3", "3", \(-3\), \(-3\), "8", \(-8\), "4", \(-4\), "4", \(-4\),
               "2", \(-2\), "4", "4", "2", "2", "2", "2", "1", "1"},
            {\(-6\), "0", "6", "0", "6", "0", \(-6\), "0", "0", "0", "0", "0",
               "0", "0", "0", "0", \(-3\), "0", \(-3\), "0", "3", "0", "3", 
              "0", \(-4\), "0", "4", "0", \(-2\), "0", "2", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", \(-2\), "0", \(-2\), "0", \(-1\), "0", \(-1\), "0", "0", 
              "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", \(-6\), "0", "6", "0", 
              "6", "0", \(-6\), "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", \(-3\), "0", \(-3\), 
              "0", "3", "0", "3", "0", \(-4\), "0", "4", "0", \(-2\), "0", 
              "2", "0", "0", "0", "0", "0", "0", "0", "0", "0", \(-2\), 
              "0", \(-2\), "0", \(-1\), "0", \(-1\), "0"},
            {"18", \(-18\), \(-18\), "18", \(-18\), "18", "18", \(-18\), "12",
               "6", \(-12\), \(-6\), \(-12\), \(-6\), "12", "6", "9", \(-9\), 
              "9", \(-9\), \(-9\), "9", \(-9\), "9", "12", \(-12\), \(-12\), 
              "12", "6", \(-6\), \(-6\), "6", "6", "3", "6", 
              "3", \(-6\), \(-3\), \(-6\), \(-3\), "8", "4", \(-8\), \(-4\), 
              "4", "2", \(-4\), \(-2\), "6", \(-6\), "6", \(-6\), "3", \(-3\),
               "3", \(-3\), "4", "2", "4", "2", "2", "1", "2", "1"},
            {\(-12\), "12", "12", \(-12\), "12", \(-12\), \(-12\), 
              "12", \(-6\), \(-6\), "6", "6", "6", 
              "6", \(-6\), \(-6\), \(-6\), "6", \(-6\), "6", "6", \(-6\), 
              "6", \(-6\), \(-8\), "8", "8", \(-8\), \(-4\), "4", 
              "4", \(-4\), \(-3\), \(-3\), \(-3\), \(-3\), "3", "3", "3", 
              "3", \(-4\), \(-4\), "4", "4", \(-2\), \(-2\), "2", "2", \(-4\),
               "4", \(-4\), "4", \(-2\), "2", \(-2\), 
              "2", \(-2\), \(-2\), \(-2\), \(-2\), \(-1\), \(-1\), \(-1\), \
\(-1\)},
            {"2", "0", "0", "0", \(-2\), "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1",
               "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "2", "0", "0", 
              "0", \(-2\), "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "1", "0", "0", "0", "1", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0"},
            {\(-6\), "6", "0", "0", "6", \(-6\), "0", "0", \(-4\), \(-2\), 
              "0", "0", "4", "2", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", \(-3\), "3", "0", "0", \(-3\), "3", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", \(-2\), \(-1\), "0", 
              "0", \(-2\), \(-1\), "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
            {"4", \(-4\), "0", "0", \(-4\), "4", "0", "0", "2", "2", "0", 
              "0", \(-2\), \(-2\), "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "2", \(-2\), "0", "0", "2", \(-2\), "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "1", "1", "0", "0", "1", "1",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "2", "0", "0", "0", \(-2\), "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", 
              "0", "0", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "0", "2", "0", "0", "0", \(-2\), "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "0", "1", "0", "0", "0", "1", "0", "0", 
              "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", \(-6\), "6", "0", "0", "6", \(-6\), "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", \(-4\), \(-2\), "0", 
              "0", "4", "2", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", \(-3\), "3", "0", "0", \(-3\), "3", "0", 
              "0", \(-2\), \(-1\), "0", "0", \(-2\), \(-1\), "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "4", \(-4\), "0", "0", \(-4\), "4", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "2", "2", "0", 
              "0", \(-2\), \(-2\), "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "2", \(-2\), "0", "0", "2", \(-2\), "0", "0", "1", 
              "1", "0", "0", "1", "1", "0", "0"},
            {\(-6\), "0", "6", "0", "6", "0", \(-6\), "0", "0", "0", "0", "0",
               "0", "0", "0", "0", \(-4\), "0", \(-2\), "0", "4", "0", "2", 
              "0", \(-3\), "0", "3", "0", \(-3\), "0", "3", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", \(-2\), "0", \(-1\), "0", \(-2\), "0", \(-1\), "0", "0", 
              "0", "0", "0", "0", "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", \(-6\), "0", "6", "0", 
              "6", "0", \(-6\), "0", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", \(-4\), "0", \(-2\), 
              "0", "4", "0", "2", "0", \(-3\), "0", "3", "0", \(-3\), "0", 
              "3", "0", "0", "0", "0", "0", "0", "0", "0", "0", \(-2\), 
              "0", \(-1\), "0", \(-2\), "0", \(-1\), "0"},
            {"18", \(-18\), \(-18\), "18", \(-18\), "18", "18", \(-18\), "12",
               "6", \(-12\), \(-6\), \(-12\), \(-6\), "12", "6", 
              "12", \(-12\), "6", \(-6\), \(-12\), "12", \(-6\), "6", 
              "9", \(-9\), \(-9\), "9", "9", \(-9\), \(-9\), "9", "8", "4", 
              "4", "2", \(-8\), \(-4\), \(-4\), \(-2\), "6", 
              "3", \(-6\), \(-3\), "6", "3", \(-6\), \(-3\), "6", \(-6\), 
              "3", \(-3\), "6", \(-6\), "3", \(-3\), "4", "2", "2", "1", "4", 
              "2", "2", "1"},
            {\(-12\), "12", "12", \(-12\), "12", \(-12\), \(-12\), 
              "12", \(-6\), \(-6\), "6", "6", "6", 
              "6", \(-6\), \(-6\), \(-8\), "8", \(-4\), "4", "8", \(-8\), 
              "4", \(-4\), \(-6\), "6", "6", \(-6\), \(-6\), "6", 
              "6", \(-6\), \(-4\), \(-4\), \(-2\), \(-2\), "4", "4", "2", 
              "2", \(-3\), \(-3\), "3", "3", \(-3\), \(-3\), "3", "3", \(-4\),
               "4", \(-2\), "2", \(-4\), "4", \(-2\), 
              "2", \(-2\), \(-2\), \(-1\), \(-1\), \(-2\), \(-2\), \(-1\), \
\(-1\)},
            {"4", "0", \(-4\), "0", \(-4\), "0", "4", "0", "0", "0", "0", "0",
               "0", "0", "0", "0", "2", "0", "2", "0", \(-2\), "0", \(-2\), 
              "0", "2", "0", \(-2\), "0", "2", "0", \(-2\), "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
               "0", "1", "0", "1", "0", "1", "0", "1", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0"},
            {"0", "0", "0", "0", "0", "0", "0", "0", "4", "0", \(-4\), 
              "0", \(-4\), "0", "4", "0", "0", "0", "0", "0", "0", "0", "0", 
              "0", "0", "0", "0", "0", "0", "0", "0", "0", "2", "0", "2", 
              "0", \(-2\), "0", \(-2\), "0", "2", "0", \(-2\), "0", "2", 
              "0", \(-2\), "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", 
              "0", "1", "0", "1", "0", "1", "0"},
            {\(-12\), "12", "12", \(-12\), "12", \(-12\), \(-12\), 
              "12", \(-8\), \(-4\), "8", "4", "8", 
              "4", \(-8\), \(-4\), \(-6\), "6", \(-6\), "6", "6", \(-6\), 
              "6", \(-6\), \(-6\), "6", "6", \(-6\), \(-6\), "6", 
              "6", \(-6\), \(-4\), \(-2\), \(-4\), \(-2\), "4", "2", "4", 
              "2", \(-4\), \(-2\), "4", "2", \(-4\), \(-2\), "4", "2", \(-3\),
               "3", \(-3\), "3", \(-3\), "3", \(-3\), 
              "3", \(-2\), \(-1\), \(-2\), \(-1\), \(-2\), \(-1\), \(-2\), \
\(-1\)},
            {"8", \(-8\), \(-8\), "8", \(-8\), "8", "8", \(-8\), "4", 
              "4", \(-4\), \(-4\), \(-4\), \(-4\), "4", "4", "4", \(-4\), 
              "4", \(-4\), \(-4\), "4", \(-4\), "4", "4", \(-4\), \(-4\), "4",
               "4", \(-4\), \(-4\), "4", "2", "2", "2", 
              "2", \(-2\), \(-2\), \(-2\), \(-2\), "2", "2", \(-2\), \(-2\), 
              "2", "2", \(-2\), \(-2\), "2", \(-2\), "2", \(-2\), "2", \(-2\),
               "2", \(-2\), "1", "1", "1", "1", "1", "1", "1", "1"}
            },
          RowSpacings->1,
          ColumnSpacings->1,
          ColumnAlignments->{Left}], "\[NoBreak]", ")"}],
      Function[ BoxForm`e$, 
        MatrixForm[ BoxForm`e$]]]], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Code Generation", "Subsection"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(phi =. ;\)\), "\[IndentingNewLine]", 
    \(\(D\[Phi]x := \(phi[\([k + z, j + y, i + x + 1]\)] - phi[\([k + z, j + \
y, i + x - 1]\)]\)\/2;\)\), "\[IndentingNewLine]", 
    \(\(D\[Phi]y := \(phi[\([k + z, j + y + 1, i + x]\)] - phi[\([k + z, j + \
y - 1, i + x]\)]\)\/2;\)\), "\[IndentingNewLine]", 
    \(\(D\[Phi]z := \(phi[\([k + z + 1, j + y, i + x]\)] - phi[\([k + z - 1, \
j + y, i + x]\)]\)\/2;\)\), "\[IndentingNewLine]", 
    \(\(D\[Phi]xy := \(phi[\([k + z, j + y + 1, i + x + 1]\)] + phi[\([k + z, \
j + y - 1, i + x - 1]\)] - phi[\([k + z, j + y - 1, i + x + 1]\)] - phi[\([k \
+ z, j + y + 1, i + x - 1]\)]\)\/4;\)\), "\[IndentingNewLine]", 
    \(\(D\[Phi]xz := \(phi[\([k + z + 1, j + y, i + x + 1]\)] + phi[\([k + z \
- 1, j + y, i + x - 1]\)] - phi[\([k + z - 1, j + y, i + x + 1]\)] - phi[\([k \
+ z + 1, j + y, i + x - 1]\)]\)\/4;\)\), "\[IndentingNewLine]", 
    \(\(D\[Phi]yz := \(phi[\([\)\(k + z + 1, j + y + 1, i + x\)\(]\)] + \
phi[\([\)\(k + z - 1, j + y - 1, i + x\)\(]\)] - phi[\([\)\(k + z - 1, j + y \
+ 1, i + x\)\(]\)] - phi[\([\)\(k + z + 1, j + y - 1, i + \
x\)\(]\)]\)\/4;\)\), "\[IndentingNewLine]", 
    \(\(D\[Phi]xyz := 
        1\/8\((phi[\([k + z + 1, j + y + 1, i + x + 1]\)] + 
            phi[\([k + z + 1, j + y - 1, i + x - 1]\)] - 
            phi[\([k + z + 1, j + y - 1, i + x + 1]\)] - 
            phi[\([k + z + 1, j + y + 1, 
                i + x - 
                  1]\)] - \((phi[\([k + z - 1, j + y + 1, i + x + 1]\)] + 
                phi[\([k + z - 1, j + y - 1, i + x - 1]\)] - 
                phi[\([k + z - 1, j + y - 1, i + x + 1]\)] - 
                phi[\([k + z - 1, j + y + 1, 
                    i + x - 
                      1]\)])\))\);\)\[IndentingNewLine]\), "\
\[IndentingNewLine]", 
    \(coor = 
      Table[{x \[Rule] m, y \[Rule] n, z \[Rule] p}, {p, 1, 2}, {n, 1, 
            2}, {m, 1, 2}] // Flatten[#, 2] &\[IndentingNewLine]\), "\n", 
    \(\(rhs = \({phi[\([k + z, j + y, i + x]\)], D\[Phi]x, D\[Phi]y, 
                D\[Phi]z, D\[Phi]xy, D\[Phi]xz, D\[Phi]yz, D\[Phi]xyz} /. 
              coor // Transpose\) // Flatten[#, 1] &;\)\), "\n", 
    \(MatrixForm /@ {imat, matRows, N@rhs}\)}], "Input"],

Cell[BoxData[
    \({{x \[Rule] 1, y \[Rule] 1, z \[Rule] 1}, {x \[Rule] 2, y \[Rule] 1, 
        z \[Rule] 1}, {x \[Rule] 1, y \[Rule] 2, z \[Rule] 1}, {x \[Rule] 2, 
        y \[Rule] 2, z \[Rule] 1}, {x \[Rule] 1, y \[Rule] 1, 
        z \[Rule] 2}, {x \[Rule] 2, y \[Rule] 1, z \[Rule] 2}, {x \[Rule] 1, 
        y \[Rule] 2, z \[Rule] 2}, {x \[Rule] 2, y \[Rule] 2, 
        z \[Rule] 2}}\)], "Output"],

Cell[BoxData[
    RowBox[{\(Part::"pspec"\), \(\(:\)\(\ \)\), "\<\"Part specification \
\\!\\(k + z\\) is neither an integer nor a list of integers. \
\\!\\(\\*ButtonBox[\\\"More\[Ellipsis]\\\", ButtonStyle->\\\"RefGuideLinkText\
\\\", ButtonFrame->None, ButtonData:>\\\"General::pspec\\\"]\\)\"\>"}]], \
"Message"],

Cell[BoxData[
    RowBox[{\(Part::"pspec"\), \(\(:\)\(\ \)\), "\<\"Part specification \
\\!\\(k + z\\) is neither an integer nor a list of integers. \
\\!\\(\\*ButtonBox[\\\"More\[Ellipsis]\\\", ButtonStyle->\\\"RefGuideLinkText\
\\\", ButtonFrame->None, ButtonData:>\\\"General::pspec\\\"]\\)\"\>"}]], \
"Message"],

Cell[BoxData[
    RowBox[{\(Part::"pspec"\), \(\(:\)\(\ \)\), "\<\"Part specification \
\\!\\(k + z\\) is neither an integer nor a list of integers. \
\\!\\(\\*ButtonBox[\\\"More\[Ellipsis]\\\", ButtonStyle->\\\"RefGuideLinkText\
\\\", ButtonFrame->None, ButtonData:>\\\"General::pspec\\\"]\\)\"\>"}]], \
"Message"],

Cell[BoxData[
    RowBox[{\(General::"stop"\), \(\(:\)\(\ \)\), "\<\"Further output of \
\\!\\(Part :: \\\"pspec\\\"\\) will be suppressed during this calculation. \
\\!\\(\\*ButtonBox[\\\"More\[Ellipsis]\\\", ButtonStyle->\\\"RefGuideLinkText\
\\\", ButtonFrame->None, ButtonData:>\\\"General::stop\\\"]\\)\"\>"}]], \
"Message"],

Cell[BoxData[
    RowBox[{"{", 
      RowBox[{
        TagBox[
          RowBox[{"(", "\[NoBreak]", GridBox[{
                {"1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0"},
                {\(-3\), "3", "0", "0", "0", "0", "0", "0", \(-2\), \(-1\), 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0"},
                {"2", \(-2\), "0", "0", "0", "0", "0", "0", "1", "1", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", \(-3\), "3", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", \(-2\), \(-1\),
                   "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                   "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                   "0", "0", "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "2", \(-2\), "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0"},
                {\(-3\), "0", "3", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", \(-2\), "0", \(-1\), "0", "0", "0",
                   "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                   "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                   "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                   "0", "0", "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", \(-3\), "0", "3", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", \(-2\), 
                  "0", \(-1\), "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0"},
                {"9", \(-9\), \(-9\), "9", "0", "0", "0", "0", "6", 
                  "3", \(-6\), \(-3\), "0", "0", "0", "0", "6", \(-6\), 
                  "3", \(-3\), "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "4", "2", "2", "1", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
                {\(-6\), "6", "6", \(-6\), "0", "0", "0", "0", \(-3\), \(-3\),
                   "3", "3", "0", "0", "0", "0", \(-4\), "4", \(-2\), "2", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", \(-2\), \(-2\), \(-1\), \(-1\), "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0"},
                {"2", "0", \(-2\), "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "1", "0", "1", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "2", "0", \(-2\), 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "1", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0"},
                {\(-6\), "6", "6", \(-6\), "0", "0", "0", "0", \(-4\), \(-2\),
                   "4", "2", "0", "0", "0", "0", \(-3\), "3", \(-3\), "3", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", \(-2\), \(-1\), \(-2\), \(-1\), "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0"},
                {"4", \(-4\), \(-4\), "4", "0", "0", "0", "0", "2", 
                  "2", \(-2\), \(-2\), "0", "0", "0", "0", "2", \(-2\), 
                  "2", \(-2\), "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "1", "1", "1", "1", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", \(-3\), "3", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", \(-2\), \(-1\), "0", "0", "0",
                   "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                   "0", "0", "0", "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "2", \(-2\), "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "1", "1", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "0", "0", 
                  "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", \(-3\), "3", "0", "0", "0", "0", "0", 
                  "0", \(-2\), \(-1\), "0", "0", "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "2", \(-2\), "0", "0", "0", "0", "0", "0", "1", "1", "0", 
                  "0", "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", \(-3\), "0", "3", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", \(-2\), "0", \(-1\), "0", "0", "0", "0", "0", "0",
                   "0", "0", "0", "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", \(-3\), "0", "3", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", \(-2\), 
                  "0", \(-1\), "0", "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "9", \(-9\), \(-9\), "9", "0", "0", "0", "0", "0", "0", "0",
                   "0", "0", "0", "0", "0", "6", "3", \(-6\), \(-3\), "0", 
                  "0", "0", "0", "6", \(-6\), "3", \(-3\), "0", "0", "0", "0",
                   "4", "2", "2", "1", "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", \(-6\), "6", "6", \(-6\), "0", "0", "0", "0", "0", "0",
                   "0", "0", "0", "0", "0", "0", \(-3\), \(-3\), "3", "3", 
                  "0", "0", "0", "0", \(-4\), "4", \(-2\), "2", "0", "0", "0",
                   "0", \(-2\), \(-2\), \(-1\), \(-1\), "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "2", "0", \(-2\), "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "1", "0", "1", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "2", "0", \(-2\), "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", "1", 
                  "0", "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", \(-6\), "6", "6", \(-6\), "0", "0", "0", "0", "0", "0",
                   "0", "0", "0", "0", "0", "0", \(-4\), \(-2\), "4", "2", 
                  "0", "0", "0", "0", \(-3\), "3", \(-3\), "3", "0", "0", "0",
                   "0", \(-2\), \(-1\), \(-2\), \(-1\), "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "4", \(-4\), \(-4\), "4", "0", "0", "0", "0", "0", "0", "0",
                   "0", "0", "0", "0", "0", "2", "2", \(-2\), \(-2\), "0", 
                  "0", "0", "0", "2", \(-2\), "2", \(-2\), "0", "0", "0", "0",
                   "1", "1", "1", "1", "0", "0", "0", "0"},
                {\(-3\), "0", "0", "0", "3", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", \(-2\), "0", "0", "0", \(-1\), "0", "0", "0", "0", "0",
                   "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                   "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                   "0", "0", "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", \(-3\), "0", "0", 
                  "0", "3", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", \(-2\), "0", "0", "0", \(-1\), "0",
                   "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                   "0", "0", "0", "0", "0", "0"},
                {"9", \(-9\), "0", "0", \(-9\), "9", "0", "0", "6", "3", "0", 
                  "0", \(-6\), \(-3\), "0", "0", "0", "0", "0", "0", "0", "0",
                   "0", "0", "6", \(-6\), "0", "0", "3", \(-3\), "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "4", "2", "0", "0", 
                  "2", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0"},
                {\(-6\), "6", "0", "0", "6", \(-6\), "0", "0", \(-3\), \(-3\),
                   "0", "0", "3", "3", "0", "0", "0", "0", "0", "0", "0", "0",
                   "0", "0", \(-4\), "4", "0", "0", \(-2\), "2", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", \(-2\), \(-2\), "0",
                   "0", \(-1\), \(-1\), "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", \(-3\), "0", "0", "0", "3", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", \(-2\), "0", "0", "0", \(-1\), "0", "0", "0", "0", "0",
                   "0", "0", "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", \(-3\), "0", "0", 
                  "0", "3", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", \(-2\), "0", 
                  "0", "0", \(-1\), "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "9", \(-9\), "0", "0", \(-9\), "9", "0",
                   "0", "0", "0", "0", "0", "0", "0", "0", "0", "6", "3", "0",
                   "0", \(-6\), \(-3\), "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "6", \(-6\), "0", "0", "3", \(-3\), "0", "0",
                   "4", "2", "0", "0", "2", "1", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", \(-6\), "6", "0", "0", "6", \(-6\), "0",
                   "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", \(-3\), \(-3\), "0", "0", "3", "3", "0", "0", "0", "0",
                   "0", "0", "0", "0", "0", "0", \(-4\), "4", "0", 
                  "0", \(-2\), "2", "0", "0", \(-2\), \(-2\), "0", 
                  "0", \(-1\), \(-1\), "0", "0"},
                {"9", "0", \(-9\), "0", \(-9\), "0", "9", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "6", "0", "3", "0", \(-6\), 
                  "0", \(-3\), "0", "6", "0", \(-6\), "0", "3", "0", \(-3\), 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "4", "0", "2", "0", "2", "0", "1", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "9", "0", \(-9\), 
                  "0", \(-9\), "0", "9", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "6", "0", 
                  "3", "0", \(-6\), "0", \(-3\), "0", "6", "0", \(-6\), "0", 
                  "3", "0", \(-3\), "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "4", "0", "2", "0", "2", "0", "1", "0"},
                {\(-27\), "27", "27", \(-27\), "27", \(-27\), \(-27\), 
                  "27", \(-18\), \(-9\), "18", "9", "18", 
                  "9", \(-18\), \(-9\), \(-18\), "18", \(-9\), "9", 
                  "18", \(-18\), "9", \(-9\), \(-18\), "18", 
                  "18", \(-18\), \(-9\), "9", 
                  "9", \(-9\), \(-12\), \(-6\), \(-6\), \(-3\), "12", "6", 
                  "6", "3", \(-12\), \(-6\), "12", "6", \(-6\), \(-3\), "6", 
                  "3", \(-12\), "12", \(-6\), "6", \(-6\), "6", \(-3\), 
                  "3", \(-8\), \(-4\), \(-4\), \(-2\), \(-4\), \(-2\), \
\(-2\), \(-1\)},
                {"18", \(-18\), \(-18\), "18", \(-18\), "18", "18", \(-18\), 
                  "9", "9", \(-9\), \(-9\), \(-9\), \(-9\), "9", "9", 
                  "12", \(-12\), "6", \(-6\), \(-12\), "12", \(-6\), "6", 
                  "12", \(-12\), \(-12\), "12", "6", \(-6\), \(-6\), "6", "6",
                   "6", "3", "3", \(-6\), \(-6\), \(-3\), \(-3\), "6", 
                  "6", \(-6\), \(-6\), "3", "3", \(-3\), \(-3\), "8", \(-8\), 
                  "4", \(-4\), "4", \(-4\), "2", \(-2\), "4", "4", "2", "2", 
                  "2", "2", "1", "1"},
                {\(-6\), "0", "6", "0", "6", "0", \(-6\), "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", \(-3\), "0", \(-3\), "0", "3", "0",
                   "3", "0", \(-4\), "0", "4", "0", \(-2\), "0", "2", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", \(-2\), "0", \(-2\), "0", \(-1\), 
                  "0", \(-1\), "0", "0", "0", "0", "0", "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", \(-6\), "0", "6", 
                  "0", "6", "0", \(-6\), "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", \(-3\), 
                  "0", \(-3\), "0", "3", "0", "3", "0", \(-4\), "0", "4", 
                  "0", \(-2\), "0", "2", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", \(-2\), "0", \(-2\), "0", \(-1\), "0", \(-1\), 
                  "0"},
                {"18", \(-18\), \(-18\), "18", \(-18\), "18", "18", \(-18\), 
                  "12", "6", \(-12\), \(-6\), \(-12\), \(-6\), "12", "6", 
                  "9", \(-9\), "9", \(-9\), \(-9\), "9", \(-9\), "9", 
                  "12", \(-12\), \(-12\), "12", "6", \(-6\), \(-6\), "6", "6",
                   "3", "6", "3", \(-6\), \(-3\), \(-6\), \(-3\), "8", 
                  "4", \(-8\), \(-4\), "4", "2", \(-4\), \(-2\), "6", \(-6\), 
                  "6", \(-6\), "3", \(-3\), "3", \(-3\), "4", "2", "4", "2", 
                  "2", "1", "2", "1"},
                {\(-12\), "12", "12", \(-12\), "12", \(-12\), \(-12\), 
                  "12", \(-6\), \(-6\), "6", "6", "6", 
                  "6", \(-6\), \(-6\), \(-6\), "6", \(-6\), "6", "6", \(-6\), 
                  "6", \(-6\), \(-8\), "8", "8", \(-8\), \(-4\), "4", 
                  "4", \(-4\), \(-3\), \(-3\), \(-3\), \(-3\), "3", "3", "3", 
                  "3", \(-4\), \(-4\), "4", "4", \(-2\), \(-2\), "2", 
                  "2", \(-4\), "4", \(-4\), "4", \(-2\), "2", \(-2\), 
                  "2", \(-2\), \(-2\), \(-2\), \(-2\), \(-1\), \(-1\), \
\(-1\), \(-1\)},
                {"2", "0", "0", "0", \(-2\), "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "1", "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "2", "0", "0", 
                  "0", \(-2\), "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "1", "0", "0", "0", "1", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0"},
                {\(-6\), "6", "0", "0", "6", \(-6\), "0", "0", \(-4\), \(-2\),
                   "0", "0", "4", "2", "0", "0", "0", "0", "0", "0", "0", "0",
                   "0", "0", \(-3\), "3", "0", "0", \(-3\), "3", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", \(-2\), \(-1\), "0",
                   "0", \(-2\), \(-1\), "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"},
                {"4", \(-4\), "0", "0", \(-4\), "4", "0", "0", "2", "2", "0", 
                  "0", \(-2\), \(-2\), "0", "0", "0", "0", "0", "0", "0", "0",
                   "0", "0", "2", \(-2\), "0", "0", "2", \(-2\), "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "1", "1", "0", "0", 
                  "1", "1", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "2", "0", "0", "0", \(-2\), "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "1", "0", "0", "0", "1", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "2", "0", "0", 
                  "0", \(-2\), "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "1", "0", 
                  "0", "0", "1", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", \(-6\), "6", "0", "0", "6", \(-6\), "0",
                   "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", \(-4\), \(-2\), "0", "0", "4", "2", "0", "0", "0", "0",
                   "0", "0", "0", "0", "0", "0", \(-3\), "3", "0", 
                  "0", \(-3\), "3", "0", "0", \(-2\), \(-1\), "0", 
                  "0", \(-2\), \(-1\), "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "4", \(-4\), "0", "0", \(-4\), "4", "0",
                   "0", "0", "0", "0", "0", "0", "0", "0", "0", "2", "2", "0",
                   "0", \(-2\), \(-2\), "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "2", \(-2\), "0", "0", "2", \(-2\), "0", "0",
                   "1", "1", "0", "0", "1", "1", "0", "0"},
                {\(-6\), "0", "6", "0", "6", "0", \(-6\), "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", \(-4\), "0", \(-2\), "0", "4", "0",
                   "2", "0", \(-3\), "0", "3", "0", \(-3\), "0", "3", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", \(-2\), "0", \(-1\), "0", \(-2\), 
                  "0", \(-1\), "0", "0", "0", "0", "0", "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", \(-6\), "0", "6", 
                  "0", "6", "0", \(-6\), "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", \(-4\), 
                  "0", \(-2\), "0", "4", "0", "2", "0", \(-3\), "0", "3", 
                  "0", \(-3\), "0", "3", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", \(-2\), "0", \(-1\), "0", \(-2\), "0", \(-1\), 
                  "0"},
                {"18", \(-18\), \(-18\), "18", \(-18\), "18", "18", \(-18\), 
                  "12", "6", \(-12\), \(-6\), \(-12\), \(-6\), "12", "6", 
                  "12", \(-12\), "6", \(-6\), \(-12\), "12", \(-6\), "6", 
                  "9", \(-9\), \(-9\), "9", "9", \(-9\), \(-9\), "9", "8", 
                  "4", "4", "2", \(-8\), \(-4\), \(-4\), \(-2\), "6", 
                  "3", \(-6\), \(-3\), "6", "3", \(-6\), \(-3\), "6", \(-6\), 
                  "3", \(-3\), "6", \(-6\), "3", \(-3\), "4", "2", "2", "1", 
                  "4", "2", "2", "1"},
                {\(-12\), "12", "12", \(-12\), "12", \(-12\), \(-12\), 
                  "12", \(-6\), \(-6\), "6", "6", "6", 
                  "6", \(-6\), \(-6\), \(-8\), "8", \(-4\), "4", "8", \(-8\), 
                  "4", \(-4\), \(-6\), "6", "6", \(-6\), \(-6\), "6", 
                  "6", \(-6\), \(-4\), \(-4\), \(-2\), \(-2\), "4", "4", "2", 
                  "2", \(-3\), \(-3\), "3", "3", \(-3\), \(-3\), "3", 
                  "3", \(-4\), "4", \(-2\), "2", \(-4\), "4", \(-2\), 
                  "2", \(-2\), \(-2\), \(-1\), \(-1\), \(-2\), \(-2\), \
\(-1\), \(-1\)},
                {"4", "0", \(-4\), "0", \(-4\), "0", "4", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "2", "0", "2", "0", \(-2\), 
                  "0", \(-2\), "0", "2", "0", \(-2\), "0", "2", "0", \(-2\), 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "1", "0", "1", "0", "1", "0", "1", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0"},
                {"0", "0", "0", "0", "0", "0", "0", "0", "4", "0", \(-4\), 
                  "0", \(-4\), "0", "4", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "2", "0", 
                  "2", "0", \(-2\), "0", \(-2\), "0", "2", "0", \(-2\), "0", 
                  "2", "0", \(-2\), "0", "0", "0", "0", "0", "0", "0", "0", 
                  "0", "1", "0", "1", "0", "1", "0", "1", "0"},
                {\(-12\), "12", "12", \(-12\), "12", \(-12\), \(-12\), 
                  "12", \(-8\), \(-4\), "8", "4", "8", 
                  "4", \(-8\), \(-4\), \(-6\), "6", \(-6\), "6", "6", \(-6\), 
                  "6", \(-6\), \(-6\), "6", "6", \(-6\), \(-6\), "6", 
                  "6", \(-6\), \(-4\), \(-2\), \(-4\), \(-2\), "4", "2", "4", 
                  "2", \(-4\), \(-2\), "4", "2", \(-4\), \(-2\), "4", 
                  "2", \(-3\), "3", \(-3\), "3", \(-3\), "3", \(-3\), 
                  "3", \(-2\), \(-1\), \(-2\), \(-1\), \(-2\), \(-1\), \
\(-2\), \(-1\)},
                {"8", \(-8\), \(-8\), "8", \(-8\), "8", "8", \(-8\), "4", 
                  "4", \(-4\), \(-4\), \(-4\), \(-4\), "4", "4", "4", \(-4\), 
                  "4", \(-4\), \(-4\), "4", \(-4\), "4", "4", \(-4\), \(-4\), 
                  "4", "4", \(-4\), \(-4\), "4", "2", "2", "2", 
                  "2", \(-2\), \(-2\), \(-2\), \(-2\), "2", 
                  "2", \(-2\), \(-2\), "2", "2", \(-2\), \(-2\), "2", \(-2\), 
                  "2", \(-2\), "2", \(-2\), "2", \(-2\), "1", "1", "1", "1", 
                  "1", "1", "1", "1"}
                },
              RowSpacings->1,
              ColumnSpacings->1,
              ColumnAlignments->{Left}], "\[NoBreak]", ")"}],
          Function[ BoxForm`e$, 
            MatrixForm[ BoxForm`e$]]], ",", 
        TagBox[
          RowBox[{"(", "\[NoBreak]", 
            TagBox[GridBox[{
                  {"XX"},
                  {"XX"},
                  {"XX"},
                  {"XX"},
                  {"XX"},
                  {"XX"},
                  {"XX"},
                  {"XX"},
                  {"Dx"},
                  {"Dx"},
                  {"Dx"},
                  {"Dx"},
                  {"Dx"},
                  {"Dx"},
                  {"Dx"},
                  {"Dx"},
                  {"Dy"},
                  {"Dy"},
                  {"Dy"},
                  {"Dy"},
                  {"Dy"},
                  {"Dy"},
                  {"Dy"},
                  {"Dy"},
                  {"Dz"},
                  {"Dz"},
                  {"Dz"},
                  {"Dz"},
                  {"Dz"},
                  {"Dz"},
                  {"Dz"},
                  {"Dz"},
                  {"Dxy"},
                  {"Dxy"},
                  {"Dxy"},
                  {"Dxy"},
                  {"Dxy"},
                  {"Dxy"},
                  {"Dxy"},
                  {"Dxy"},
                  {"Dxz"},
                  {"Dxz"},
                  {"Dxz"},
                  {"Dxz"},
                  {"Dxz"},
                  {"Dxz"},
                  {"Dxz"},
                  {"Dxz"},
                  {"Dyz"},
                  {"Dyz"},
                  {"Dyz"},
                  {"Dyz"},
                  {"Dyz"},
                  {"Dyz"},
                  {"Dyz"},
                  {"Dyz"},
                  {"Dxyz"},
                  {"Dxyz"},
                  {"Dxyz"},
                  {"Dxyz"},
                  {"Dxyz"},
                  {"Dxyz"},
                  {"Dxyz"},
                  {"Dxyz"}
                  },
                RowSpacings->1,
                ColumnAlignments->{Left}],
              Column], "\[NoBreak]", ")"}],
          Function[ BoxForm`e$, 
            MatrixForm[ BoxForm`e$]]], ",", 
        TagBox[
          RowBox[{"(", "\[NoBreak]", 
            TagBox[GridBox[{
                  {\(phi\[LeftDoubleBracket]1 + k, 1 + j, 
                      1 + i\[RightDoubleBracket]\)},
                  {\(phi\[LeftDoubleBracket]1 + k, 1 + j, 
                      2 + i\[RightDoubleBracket]\)},
                  {\(phi\[LeftDoubleBracket]1 + k, 2 + j, 
                      1 + i\[RightDoubleBracket]\)},
                  {\(phi\[LeftDoubleBracket]1 + k, 2 + j, 
                      2 + i\[RightDoubleBracket]\)},
                  {\(phi\[LeftDoubleBracket]2 + k, 1 + j, 
                      1 + i\[RightDoubleBracket]\)},
                  {\(phi\[LeftDoubleBracket]2 + k, 1 + j, 
                      2 + i\[RightDoubleBracket]\)},
                  {\(phi\[LeftDoubleBracket]2 + k, 2 + j, 
                      1 + i\[RightDoubleBracket]\)},
                  {\(phi\[LeftDoubleBracket]2 + k, 2 + j, 
                      2 + i\[RightDoubleBracket]\)},
                  {\(0.5`\ \((\(-1.`\)\ phi\[LeftDoubleBracket]1 + k, 1 + j, 
                              i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]1 + k, 1 + j, 
                            2 + i\[RightDoubleBracket])\)\)},
                  {\(0.5`\ \((\(-1.`\)\ phi\[LeftDoubleBracket]1 + k, 1 + j, 
                              1 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]1 + k, 1 + j, 
                            3 + i\[RightDoubleBracket])\)\)},
                  {\(0.5`\ \((\(-1.`\)\ phi\[LeftDoubleBracket]1 + k, 2 + j, 
                              i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]1 + k, 2 + j, 
                            2 + i\[RightDoubleBracket])\)\)},
                  {\(0.5`\ \((\(-1.`\)\ phi\[LeftDoubleBracket]1 + k, 2 + j, 
                              1 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]1 + k, 2 + j, 
                            3 + i\[RightDoubleBracket])\)\)},
                  {\(0.5`\ \((\(-1.`\)\ phi\[LeftDoubleBracket]2 + k, 1 + j, 
                              i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]2 + k, 1 + j, 
                            2 + i\[RightDoubleBracket])\)\)},
                  {\(0.5`\ \((\(-1.`\)\ phi\[LeftDoubleBracket]2 + k, 1 + j, 
                              1 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]2 + k, 1 + j, 
                            3 + i\[RightDoubleBracket])\)\)},
                  {\(0.5`\ \((\(-1.`\)\ phi\[LeftDoubleBracket]2 + k, 2 + j, 
                              i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]2 + k, 2 + j, 
                            2 + i\[RightDoubleBracket])\)\)},
                  {\(0.5`\ \((\(-1.`\)\ phi\[LeftDoubleBracket]2 + k, 2 + j, 
                              1 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]2 + k, 2 + j, 
                            3 + i\[RightDoubleBracket])\)\)},
                  {\(0.5`\ \((\(-1.`\)\ phi\[LeftDoubleBracket]1 + k, j, 
                              1 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]1 + k, 2 + j, 
                            1 + i\[RightDoubleBracket])\)\)},
                  {\(0.5`\ \((\(-1.`\)\ phi\[LeftDoubleBracket]1 + k, j, 
                              2 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]1 + k, 2 + j, 
                            2 + i\[RightDoubleBracket])\)\)},
                  {\(0.5`\ \((\(-1.`\)\ phi\[LeftDoubleBracket]1 + k, 1 + j, 
                              1 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]1 + k, 3 + j, 
                            1 + i\[RightDoubleBracket])\)\)},
                  {\(0.5`\ \((\(-1.`\)\ phi\[LeftDoubleBracket]1 + k, 1 + j, 
                              2 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]1 + k, 3 + j, 
                            2 + i\[RightDoubleBracket])\)\)},
                  {\(0.5`\ \((\(-1.`\)\ phi\[LeftDoubleBracket]2 + k, j, 
                              1 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]2 + k, 2 + j, 
                            1 + i\[RightDoubleBracket])\)\)},
                  {\(0.5`\ \((\(-1.`\)\ phi\[LeftDoubleBracket]2 + k, j, 
                              2 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]2 + k, 2 + j, 
                            2 + i\[RightDoubleBracket])\)\)},
                  {\(0.5`\ \((\(-1.`\)\ phi\[LeftDoubleBracket]2 + k, 1 + j, 
                              1 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]2 + k, 3 + j, 
                            1 + i\[RightDoubleBracket])\)\)},
                  {\(0.5`\ \((\(-1.`\)\ phi\[LeftDoubleBracket]2 + k, 1 + j, 
                              2 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]2 + k, 3 + j, 
                            2 + i\[RightDoubleBracket])\)\)},
                  {\(0.5`\ \((\(-1.`\)\ phi\[LeftDoubleBracket]k, 1 + j, 
                              1 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]2 + k, 1 + j, 
                            1 + i\[RightDoubleBracket])\)\)},
                  {\(0.5`\ \((\(-1.`\)\ phi\[LeftDoubleBracket]k, 1 + j, 
                              2 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]2 + k, 1 + j, 
                            2 + i\[RightDoubleBracket])\)\)},
                  {\(0.5`\ \((\(-1.`\)\ phi\[LeftDoubleBracket]k, 2 + j, 
                              1 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]2 + k, 2 + j, 
                            1 + i\[RightDoubleBracket])\)\)},
                  {\(0.5`\ \((\(-1.`\)\ phi\[LeftDoubleBracket]k, 2 + j, 
                              2 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]2 + k, 2 + j, 
                            2 + i\[RightDoubleBracket])\)\)},
                  {\(0.5`\ \((\(-1.`\)\ phi\[LeftDoubleBracket]1 + k, 1 + j, 
                              1 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]3 + k, 1 + j, 
                            1 + i\[RightDoubleBracket])\)\)},
                  {\(0.5`\ \((\(-1.`\)\ phi\[LeftDoubleBracket]1 + k, 1 + j, 
                              2 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]3 + k, 1 + j, 
                            2 + i\[RightDoubleBracket])\)\)},
                  {\(0.5`\ \((\(-1.`\)\ phi\[LeftDoubleBracket]1 + k, 2 + j, 
                              1 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]3 + k, 2 + j, 
                            1 + i\[RightDoubleBracket])\)\)},
                  {\(0.5`\ \((\(-1.`\)\ phi\[LeftDoubleBracket]1 + k, 2 + j, 
                              2 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]3 + k, 2 + j, 
                            2 + i\[RightDoubleBracket])\)\)},
                  {\(0.25`\ \((phi\[LeftDoubleBracket]1 + k, j, 
                            i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]1 + k, j, 
                              2 + i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]1 + k, 2 + j, 
                              i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]1 + k, 2 + j, 
                            2 + i\[RightDoubleBracket])\)\)},
                  {\(0.25`\ \((phi\[LeftDoubleBracket]1 + k, j, 
                            1 + i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]1 + k, j, 
                              3 + i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]1 + k, 2 + j, 
                              1 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]1 + k, 2 + j, 
                            3 + i\[RightDoubleBracket])\)\)},
                  {\(0.25`\ \((phi\[LeftDoubleBracket]1 + k, 1 + j, 
                            i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]1 + k, 1 + j, 
                              2 + i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]1 + k, 3 + j, 
                              i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]1 + k, 3 + j, 
                            2 + i\[RightDoubleBracket])\)\)},
                  {\(0.25`\ \((phi\[LeftDoubleBracket]1 + k, 1 + j, 
                            1 + i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]1 + k, 1 + j, 
                              3 + i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]1 + k, 3 + j, 
                              1 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]1 + k, 3 + j, 
                            3 + i\[RightDoubleBracket])\)\)},
                  {\(0.25`\ \((phi\[LeftDoubleBracket]2 + k, j, 
                            i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]2 + k, j, 
                              2 + i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]2 + k, 2 + j, 
                              i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]2 + k, 2 + j, 
                            2 + i\[RightDoubleBracket])\)\)},
                  {\(0.25`\ \((phi\[LeftDoubleBracket]2 + k, j, 
                            1 + i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]2 + k, j, 
                              3 + i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]2 + k, 2 + j, 
                              1 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]2 + k, 2 + j, 
                            3 + i\[RightDoubleBracket])\)\)},
                  {\(0.25`\ \((phi\[LeftDoubleBracket]2 + k, 1 + j, 
                            i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]2 + k, 1 + j, 
                              2 + i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]2 + k, 3 + j, 
                              i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]2 + k, 3 + j, 
                            2 + i\[RightDoubleBracket])\)\)},
                  {\(0.25`\ \((phi\[LeftDoubleBracket]2 + k, 1 + j, 
                            1 + i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]2 + k, 1 + j, 
                              3 + i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]2 + k, 3 + j, 
                              1 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]2 + k, 3 + j, 
                            3 + i\[RightDoubleBracket])\)\)},
                  {\(0.25`\ \((phi\[LeftDoubleBracket]k, 1 + j, 
                            i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]k, 1 + j, 
                              2 + i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]2 + k, 1 + j, 
                              i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]2 + k, 1 + j, 
                            2 + i\[RightDoubleBracket])\)\)},
                  {\(0.25`\ \((phi\[LeftDoubleBracket]k, 1 + j, 
                            1 + i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]k, 1 + j, 
                              3 + i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]2 + k, 1 + j, 
                              1 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]2 + k, 1 + j, 
                            3 + i\[RightDoubleBracket])\)\)},
                  {\(0.25`\ \((phi\[LeftDoubleBracket]k, 2 + j, 
                            i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]k, 2 + j, 
                              2 + i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]2 + k, 2 + j, 
                              i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]2 + k, 2 + j, 
                            2 + i\[RightDoubleBracket])\)\)},
                  {\(0.25`\ \((phi\[LeftDoubleBracket]k, 2 + j, 
                            1 + i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]k, 2 + j, 
                              3 + i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]2 + k, 2 + j, 
                              1 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]2 + k, 2 + j, 
                            3 + i\[RightDoubleBracket])\)\)},
                  {\(0.25`\ \((phi\[LeftDoubleBracket]1 + k, 1 + j, 
                            i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]1 + k, 1 + j, 
                              2 + i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]3 + k, 1 + j, 
                              i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]3 + k, 1 + j, 
                            2 + i\[RightDoubleBracket])\)\)},
                  {\(0.25`\ \((phi\[LeftDoubleBracket]1 + k, 1 + j, 
                            1 + i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]1 + k, 1 + j, 
                              3 + i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]3 + k, 1 + j, 
                              1 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]3 + k, 1 + j, 
                            3 + i\[RightDoubleBracket])\)\)},
                  {\(0.25`\ \((phi\[LeftDoubleBracket]1 + k, 2 + j, 
                            i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]1 + k, 2 + j, 
                              2 + i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]3 + k, 2 + j, 
                              i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]3 + k, 2 + j, 
                            2 + i\[RightDoubleBracket])\)\)},
                  {\(0.25`\ \((phi\[LeftDoubleBracket]1 + k, 2 + j, 
                            1 + i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]1 + k, 2 + j, 
                              3 + i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]3 + k, 2 + j, 
                              1 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]3 + k, 2 + j, 
                            3 + i\[RightDoubleBracket])\)\)},
                  {\(0.25`\ \((phi\[LeftDoubleBracket]k, j, 
                            1 + i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]k, 2 + j, 
                              1 + i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]2 + k, j, 
                              1 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]2 + k, 2 + j, 
                            1 + i\[RightDoubleBracket])\)\)},
                  {\(0.25`\ \((phi\[LeftDoubleBracket]k, j, 
                            2 + i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]k, 2 + j, 
                              2 + i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]2 + k, j, 
                              2 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]2 + k, 2 + j, 
                            2 + i\[RightDoubleBracket])\)\)},
                  {\(0.25`\ \((phi\[LeftDoubleBracket]k, 1 + j, 
                            1 + i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]k, 3 + j, 
                              1 + i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]2 + k, 1 + j, 
                              1 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]2 + k, 3 + j, 
                            1 + i\[RightDoubleBracket])\)\)},
                  {\(0.25`\ \((phi\[LeftDoubleBracket]k, 1 + j, 
                            2 + i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]k, 3 + j, 
                              2 + i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]2 + k, 1 + j, 
                              2 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]2 + k, 3 + j, 
                            2 + i\[RightDoubleBracket])\)\)},
                  {\(0.25`\ \((phi\[LeftDoubleBracket]1 + k, j, 
                            1 + i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]1 + k, 2 + j, 
                              1 + i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]3 + k, j, 
                              1 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]3 + k, 2 + j, 
                            1 + i\[RightDoubleBracket])\)\)},
                  {\(0.25`\ \((phi\[LeftDoubleBracket]1 + k, j, 
                            2 + i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]1 + k, 2 + j, 
                              2 + i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]3 + k, j, 
                              2 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]3 + k, 2 + j, 
                            2 + i\[RightDoubleBracket])\)\)},
                  {\(0.25`\ \((phi\[LeftDoubleBracket]1 + k, 1 + j, 
                            1 + i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]1 + k, 3 + j, 
                              1 + i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]3 + k, 1 + j, 
                              1 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]3 + k, 3 + j, 
                            1 + i\[RightDoubleBracket])\)\)},
                  {\(0.25`\ \((phi\[LeftDoubleBracket]1 + k, 1 + j, 
                            2 + i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]1 + k, 3 + j, 
                              2 + i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]3 + k, 1 + j, 
                              2 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]3 + k, 3 + j, 
                            2 + i\[RightDoubleBracket])\)\)},
                  {\(0.125`\ \((\(-1.`\)\ phi\[LeftDoubleBracket]k, j, 
                              i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]k, j, 
                            2 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]k, 2 + j, 
                            i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]k, 2 + j, 
                              2 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]2 + k, j, 
                            i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]2 + k, j, 
                              2 + i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]2 + k, 2 + j, 
                              i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]2 + k, 2 + j, 
                            2 + i\[RightDoubleBracket])\)\)},
                  {\(0.125`\ \((\(-1.`\)\ phi\[LeftDoubleBracket]k, j, 
                              1 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]k, j, 
                            3 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]k, 2 + j, 
                            1 + i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]k, 2 + j, 
                              3 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]2 + k, j, 
                            1 + i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]2 + k, j, 
                              3 + i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]2 + k, 2 + j, 
                              1 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]2 + k, 2 + j, 
                            3 + i\[RightDoubleBracket])\)\)},
                  {\(0.125`\ \((\(-1.`\)\ phi\[LeftDoubleBracket]k, 1 + j, 
                              i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]k, 1 + j, 
                            2 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]k, 3 + j, 
                            i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]k, 3 + j, 
                              2 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]2 + k, 1 + j, 
                            i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]2 + k, 1 + j, 
                              2 + i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]2 + k, 3 + j, 
                              i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]2 + k, 3 + j, 
                            2 + i\[RightDoubleBracket])\)\)},
                  {\(0.125`\ \((\(-1.`\)\ phi\[LeftDoubleBracket]k, 1 + j, 
                              1 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]k, 1 + j, 
                            3 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]k, 3 + j, 
                            1 + i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]k, 3 + j, 
                              3 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]2 + k, 1 + j, 
                            1 + i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]2 + k, 1 + j, 
                              3 + i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]2 + k, 3 + j, 
                              1 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]2 + k, 3 + j, 
                            3 + i\[RightDoubleBracket])\)\)},
                  {\(0.125`\ \((\(-1.`\)\ phi\[LeftDoubleBracket]1 + k, j, 
                              i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]1 + k, j, 
                            2 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]1 + k, 2 + j, 
                            i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]1 + k, 2 + j, 
                              2 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]3 + k, j, 
                            i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]3 + k, j, 
                              2 + i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]3 + k, 2 + j, 
                              i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]3 + k, 2 + j, 
                            2 + i\[RightDoubleBracket])\)\)},
                  {\(0.125`\ \((\(-1.`\)\ phi\[LeftDoubleBracket]1 + k, j, 
                              1 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]1 + k, j, 
                            3 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]1 + k, 2 + j, 
                            1 + i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]1 + k, 2 + j, 
                              3 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]3 + k, j, 
                            1 + i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]3 + k, j, 
                              3 + i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]3 + k, 2 + j, 
                              1 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]3 + k, 2 + j, 
                            3 + i\[RightDoubleBracket])\)\)},
                  {\(0.125`\ \((\(-1.`\)\ phi\[LeftDoubleBracket]1 + k, 
                              1 + j, i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]1 + k, 1 + j, 
                            2 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]1 + k, 3 + j, 
                            i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]1 + k, 3 + j, 
                              2 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]3 + k, 1 + j, 
                            i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]3 + k, 1 + j, 
                              2 + i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]3 + k, 3 + j, 
                              i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]3 + k, 3 + j, 
                            2 + i\[RightDoubleBracket])\)\)},
                  {\(0.125`\ \((\(-1.`\)\ phi\[LeftDoubleBracket]1 + k, 
                              1 + j, 1 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]1 + k, 1 + j, 
                            3 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]1 + k, 3 + j, 
                            1 + i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]1 + k, 3 + j, 
                              3 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]3 + k, 1 + j, 
                            1 + i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]3 + k, 1 + j, 
                              3 + i\[RightDoubleBracket] - 
                          1.`\ phi\[LeftDoubleBracket]3 + k, 3 + j, 
                              1 + i\[RightDoubleBracket] + 
                          phi\[LeftDoubleBracket]3 + k, 3 + j, 
                            3 + i\[RightDoubleBracket])\)\)}
                  },
                RowSpacings->1,
                ColumnAlignments->{Left}],
              Column], "\[NoBreak]", ")"}],
          Function[ BoxForm`e$, 
            MatrixForm[ BoxForm`e$]]]}], "}"}]], "Output"]
}, Open  ]],

Cell[BoxData[
    \(\(\(d\^3\) U\)\/\(dx\ dy\ dz\) \[Equal] \(d\/dz\) \((\(\(d\^2\) \
U\)\/\(dx\ dy\))\) \[Equal] \(\((\  . \ )\)\_\(k + 1\) - \((\  . \ )\)\_\(k - \
1\)\)\/2\)], "Input"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(code = \(ToString[CForm[#]] &\) /@ \((imat . 
              rhs)\);\)\), "\[IndentingNewLine]", 
    \(\(code = 
        StringReplace[
          code, "\<Symbol\>" \[Rule] "\<phi[k][j][i]\>"];\)\), "\
\[IndentingNewLine]", 
    \(TableForm[code]\)}], "Input"],

Cell[BoxData[
    RowBox[{\(Part::"pspec"\), \(\(:\)\(\ \)\), "\<\"Part specification \
\\!\\(1 + k\\) is neither an integer nor a list of integers. \
\\!\\(\\*ButtonBox[\\\"More\[Ellipsis]\\\", ButtonStyle->\\\"RefGuideLinkText\
\\\", ButtonFrame->None, ButtonData:>\\\"General::pspec\\\"]\\)\"\>"}]], \
"Message"],

Cell[BoxData[
    RowBox[{\(Part::"pspec"\), \(\(:\)\(\ \)\), "\<\"Part specification \
\\!\\(1 + k\\) is neither an integer nor a list of integers. \
\\!\\(\\*ButtonBox[\\\"More\[Ellipsis]\\\", ButtonStyle->\\\"RefGuideLinkText\
\\\", ButtonFrame->None, ButtonData:>\\\"General::pspec\\\"]\\)\"\>"}]], \
"Message"],

Cell[BoxData[
    RowBox[{\(Part::"pspec"\), \(\(:\)\(\ \)\), "\<\"Part specification \
\\!\\(1 + k\\) is neither an integer nor a list of integers. \
\\!\\(\\*ButtonBox[\\\"More\[Ellipsis]\\\", ButtonStyle->\\\"RefGuideLinkText\
\\\", ButtonFrame->None, ButtonData:>\\\"General::pspec\\\"]\\)\"\>"}]], \
"Message"],

Cell[BoxData[
    RowBox[{\(General::"stop"\), \(\(:\)\(\ \)\), "\<\"Further output of \
\\!\\(Part :: \\\"pspec\\\"\\) will be suppressed during this calculation. \
\\!\\(\\*ButtonBox[\\\"More\[Ellipsis]\\\", ButtonStyle->\\\"RefGuideLinkText\
\\\", ButtonFrame->None, ButtonData:>\\\"General::stop\\\"]\\)\"\>"}]], \
"Message"],

Cell[BoxData[
    InterpretationBox[GridBox[{
          {"\<\"phi[1 + k][1 + j][1 + i]\"\>"},
          {"\<\"(-phi[1 + k][1 + j][i] + phi[1 + k][1 + j][2 + i])/2.\"\>"},
          {"\<\"phi[1 + k][1 + j][i] - 3*phi[1 + k][1 + j][1 + i] + 2*phi[1 + \
k][1 + j][2 + i] + (phi[1 + k][1 + j][1 + i] - phi[1 + k][1 + j][3 + i])/2.\"\
\>"},
          {"\<\"2*phi[1 + k][1 + j][1 + i] - 2*phi[1 + k][1 + j][2 + i] + \
(-phi[1 + k][1 + j][i] + phi[1 + k][1 + j][2 + i])/2. + (-phi[1 + k][1 + j][1 \
+ i] + phi[1 + k][1 + j][3 + i])/2.\"\>"},
          {"\<\"(-phi[1 + k][j][1 + i] + phi[1 + k][2 + j][1 + i])/2.\"\>"},
          {"\<\"(phi[1 + k][j][i] - phi[1 + k][j][2 + i] - phi[1 + k][2 + \
j][i] + phi[1 + k][2 + j][2 + i])/4.\"\>"},
          {"\<\"(-3*(-phi[1 + k][j][1 + i] + phi[1 + k][2 + j][1 + i]))/2. + \
(-phi[1 + k][j][i] + phi[1 + k][j][2 + i] + phi[1 + k][2 + j][i] - phi[1 + \
k][2 + j][2 + i])/2. + (3*(-phi[1 + k][j][2 + i] + phi[1 + k][2 + j][2 + \
i]))/2. + (-phi[1 + k][j][1 + i] + phi[1 + k][j][3 + i] + phi[1 + k][2 + j][1 \
+ i] - phi[1 + k][2 + j][3 + i])/4.\"\>"},
          {"\<\"-phi[1 + k][j][1 + i] + phi[1 + k][j][2 + i] + phi[1 + k][2 + \
j][1 + i] - phi[1 + k][2 + j][2 + i] + (phi[1 + k][j][i] - phi[1 + k][j][2 + \
i] - phi[1 + k][2 + j][i] + phi[1 + k][2 + j][2 + i])/4. + (phi[1 + k][j][1 + \
i] - phi[1 + k][j][3 + i] - phi[1 + k][2 + j][1 + i] + phi[1 + k][2 + j][3 + \
i])/4.\"\>"},
          {"\<\"phi[1 + k][j][1 + i] - 3*phi[1 + k][1 + j][1 + i] + 2*phi[1 + \
k][2 + j][1 + i] + (phi[1 + k][1 + j][1 + i] - phi[1 + k][3 + j][1 + i])/2.\"\
\>"},
          {"\<\"(-3*(-phi[1 + k][1 + j][i] + phi[1 + k][1 + j][2 + i]))/2. + \
(-phi[1 + k][j][i] + phi[1 + k][j][2 + i] + phi[1 + k][2 + j][i] - phi[1 + \
k][2 + j][2 + i])/2. + (3*(-phi[1 + k][2 + j][i] + phi[1 + k][2 + j][2 + \
i]))/2. + (-phi[1 + k][1 + j][i] + phi[1 + k][1 + j][2 + i] + phi[1 + k][3 + \
j][i] - phi[1 + k][3 + j][2 + i])/4.\"\>"},
          {"\<\"phi[1 + k][j][i] - phi[1 + k][j][2 + i] + 9*phi[1 + k][1 + \
j][1 + i] - 9*phi[1 + k][1 + j][2 + i] + 3*(-phi[1 + k][1 + j][i] + phi[1 + \
k][1 + j][2 + i]) + (3*(-phi[1 + k][1 + j][1 + i] + phi[1 + k][1 + j][3 + \
i]))/2. - phi[1 + k][2 + j][i] - 9*phi[1 + k][2 + j][1 + i] + 3*(-phi[1 + \
k][j][1 + i] + phi[1 + k][2 + j][1 + i]) + 10*phi[1 + k][2 + j][2 + i] - \
3*(-phi[1 + k][j][2 + i] + phi[1 + k][2 + j][2 + i]) - 3*(-phi[1 + k][2 + \
j][i] + phi[1 + k][2 + j][2 + i]) - (3*(-phi[1 + k][2 + j][1 + i] + phi[1 + \
k][2 + j][3 + i]))/2. + (phi[1 + k][j][1 + i] - phi[1 + k][j][3 + i] - phi[1 \
+ k][2 + j][1 + i] + phi[1 + k][2 + j][3 + i])/2. + (3*(-phi[1 + k][1 + j][1 \
+ i] + phi[1 + k][3 + j][1 + i]))/2. - (3*(-phi[1 + k][1 + j][2 + i] + phi[1 \
+ k][3 + j][2 + i]))/2. + (phi[1 + k][1 + j][i] - phi[1 + k][1 + j][2 + i] - \
phi[1 + k][3 + j][i] + phi[1 + k][3 + j][2 + i])/2. + (phi[1 + k][1 + j][1 + \
i] - phi[1 + k][1 + j][3 + i] - phi[1 + k][3 + j][1 + i] + phi[1 + k][3 + \
j][3 + i])/4.\"\>"},
          {"\<\"-5*phi[1 + k][1 + j][1 + i] + 5*phi[1 + k][1 + j][2 + i] - \
(3*(-phi[1 + k][1 + j][i] + phi[1 + k][1 + j][2 + i]))/2. - (3*(-phi[1 + k][1 \
+ j][1 + i] + phi[1 + k][1 + j][3 + i]))/2. + 6*phi[1 + k][2 + j][1 + i] - \
2*(-phi[1 + k][j][1 + i] + phi[1 + k][2 + j][1 + i]) + (-phi[1 + k][j][i] + \
phi[1 + k][j][2 + i] + phi[1 + k][2 + j][i] - phi[1 + k][2 + j][2 + i])/2. - \
6*phi[1 + k][2 + j][2 + i] + 2*(-phi[1 + k][j][2 + i] + phi[1 + k][2 + j][2 + \
i]) + (3*(-phi[1 + k][2 + j][i] + phi[1 + k][2 + j][2 + i]))/2. + (-phi[1 + \
k][j][1 + i] + phi[1 + k][j][3 + i] + phi[1 + k][2 + j][1 + i] - phi[1 + k][2 \
+ j][3 + i])/2. + (3*(-phi[1 + k][2 + j][1 + i] + phi[1 + k][2 + j][3 + \
i]))/2. - phi[1 + k][3 + j][1 + i] + (-phi[1 + k][1 + j][i] + phi[1 + k][1 + \
j][2 + i] + phi[1 + k][3 + j][i] - phi[1 + k][3 + j][2 + i])/4. + phi[1 + \
k][3 + j][2 + i] + (-phi[1 + k][1 + j][1 + i] + phi[1 + k][1 + j][3 + i] + \
phi[1 + k][3 + j][1 + i] - phi[1 + k][3 + j][3 + i])/4.\"\>"},
          {"\<\"2*phi[1 + k][1 + j][1 + i] - 2*phi[1 + k][2 + j][1 + i] + \
(-phi[1 + k][j][1 + i] + phi[1 + k][2 + j][1 + i])/2. + (-phi[1 + k][1 + j][1 \
+ i] + phi[1 + k][3 + j][1 + i])/2.\"\>"},
          {"\<\"-phi[1 + k][1 + j][i] + phi[1 + k][1 + j][2 + i] + phi[1 + \
k][2 + j][i] - phi[1 + k][2 + j][2 + i] + (phi[1 + k][j][i] - phi[1 + k][j][2 \
+ i] - phi[1 + k][2 + j][i] + phi[1 + k][2 + j][2 + i])/4. + (phi[1 + k][1 + \
j][i] - phi[1 + k][1 + j][2 + i] - phi[1 + k][3 + j][i] + phi[1 + k][3 + j][2 \
+ i])/4.\"\>"},
          {"\<\"-5*phi[1 + k][1 + j][1 + i] + 6*phi[1 + k][1 + j][2 + i] - \
2*(-phi[1 + k][1 + j][i] + phi[1 + k][1 + j][2 + i]) - phi[1 + k][1 + j][3 + \
i] + 5*phi[1 + k][2 + j][1 + i] - (3*(-phi[1 + k][j][1 + i] + phi[1 + k][2 + \
j][1 + i]))/2. + (-phi[1 + k][j][i] + phi[1 + k][j][2 + i] + phi[1 + k][2 + \
j][i] - phi[1 + k][2 + j][2 + i])/2. - 6*phi[1 + k][2 + j][2 + i] + \
(3*(-phi[1 + k][j][2 + i] + phi[1 + k][2 + j][2 + i]))/2. + 2*(-phi[1 + k][2 \
+ j][i] + phi[1 + k][2 + j][2 + i]) + (-phi[1 + k][j][1 + i] + phi[1 + \
k][j][3 + i] + phi[1 + k][2 + j][1 + i] - phi[1 + k][2 + j][3 + i])/4. + \
phi[1 + k][2 + j][3 + i] - (3*(-phi[1 + k][1 + j][1 + i] + phi[1 + k][3 + \
j][1 + i]))/2. + (-phi[1 + k][1 + j][i] + phi[1 + k][1 + j][2 + i] + phi[1 + \
k][3 + j][i] - phi[1 + k][3 + j][2 + i])/2. + (3*(-phi[1 + k][1 + j][2 + i] + \
phi[1 + k][3 + j][2 + i]))/2. + (-phi[1 + k][1 + j][1 + i] + phi[1 + k][1 + \
j][3 + i] + phi[1 + k][3 + j][1 + i] - phi[1 + k][3 + j][3 + i])/4.\"\>"},
          {"\<\"-phi[1 + k][j][1 + i] + phi[1 + k][j][2 + i] - phi[1 + k][1 + \
j][i] + 2*phi[1 + k][1 + j][1 + i] - 2*phi[1 + k][1 + j][2 + i] + phi[1 + \
k][1 + j][3 + i] + phi[1 + k][2 + j][i] - 2*phi[1 + k][2 + j][1 + i] + \
2*phi[1 + k][2 + j][2 + i] + (phi[1 + k][j][i] - phi[1 + k][j][2 + i] - phi[1 \
+ k][2 + j][i] + phi[1 + k][2 + j][2 + i])/4. - phi[1 + k][2 + j][3 + i] + \
(phi[1 + k][j][1 + i] - phi[1 + k][j][3 + i] - phi[1 + k][2 + j][1 + i] + \
phi[1 + k][2 + j][3 + i])/4. + phi[1 + k][3 + j][1 + i] - phi[1 + k][3 + j][2 \
+ i] + (phi[1 + k][1 + j][i] - phi[1 + k][1 + j][2 + i] - phi[1 + k][3 + \
j][i] + phi[1 + k][3 + j][2 + i])/4. + (phi[1 + k][1 + j][1 + i] - phi[1 + \
k][1 + j][3 + i] - phi[1 + k][3 + j][1 + i] + phi[1 + k][3 + j][3 + \
i])/4.\"\>"},
          {"\<\"(-phi[k][1 + j][1 + i] + phi[2 + k][1 + j][1 + i])/2.\"\>"},
          {"\<\"(phi[k][1 + j][i] - phi[k][1 + j][2 + i] - phi[2 + k][1 + \
j][i] + phi[2 + k][1 + j][2 + i])/4.\"\>"},
          {"\<\"(-3*(-phi[k][1 + j][1 + i] + phi[2 + k][1 + j][1 + i]))/2. + \
(-phi[k][1 + j][i] + phi[k][1 + j][2 + i] + phi[2 + k][1 + j][i] - phi[2 + \
k][1 + j][2 + i])/2. + (3*(-phi[k][1 + j][2 + i] + phi[2 + k][1 + j][2 + \
i]))/2. + (-phi[k][1 + j][1 + i] + phi[k][1 + j][3 + i] + phi[2 + k][1 + j][1 \
+ i] - phi[2 + k][1 + j][3 + i])/4.\"\>"},
          {"\<\"-phi[k][1 + j][1 + i] + phi[k][1 + j][2 + i] + phi[2 + k][1 + \
j][1 + i] - phi[2 + k][1 + j][2 + i] + (phi[k][1 + j][i] - phi[k][1 + j][2 + \
i] - phi[2 + k][1 + j][i] + phi[2 + k][1 + j][2 + i])/4. + (phi[k][1 + j][1 + \
i] - phi[k][1 + j][3 + i] - phi[2 + k][1 + j][1 + i] + phi[2 + k][1 + j][3 + \
i])/4.\"\>"},
          {"\<\"(phi[k][j][1 + i] - phi[k][2 + j][1 + i] - phi[2 + k][j][1 + \
i] + phi[2 + k][2 + j][1 + i])/4.\"\>"},
          {"\<\"(-phi[k][j][i] + phi[k][j][2 + i] + phi[k][2 + j][i] - \
phi[k][2 + j][2 + i] + phi[2 + k][j][i] - phi[2 + k][j][2 + i] - phi[2 + k][2 \
+ j][i] + phi[2 + k][2 + j][2 + i])/8.\"\>"},
          {"\<\"(-3*(phi[k][j][1 + i] - phi[k][2 + j][1 + i] - phi[2 + \
k][j][1 + i] + phi[2 + k][2 + j][1 + i]))/4. + (phi[k][j][i] - phi[k][j][2 + \
i] - phi[k][2 + j][i] + phi[k][2 + j][2 + i] - phi[2 + k][j][i] + phi[2 + \
k][j][2 + i] + phi[2 + k][2 + j][i] - phi[2 + k][2 + j][2 + i])/4. + \
(3*(phi[k][j][2 + i] - phi[k][2 + j][2 + i] - phi[2 + k][j][2 + i] + phi[2 + \
k][2 + j][2 + i]))/4. + (phi[k][j][1 + i] - phi[k][j][3 + i] - phi[k][2 + \
j][1 + i] + phi[k][2 + j][3 + i] - phi[2 + k][j][1 + i] + phi[2 + k][j][3 + \
i] + phi[2 + k][2 + j][1 + i] - phi[2 + k][2 + j][3 + i])/8.\"\>"},
          {"\<\"(phi[k][j][1 + i] - phi[k][2 + j][1 + i] - phi[2 + k][j][1 + \
i] + phi[2 + k][2 + j][1 + i])/2. + (-phi[k][j][2 + i] + phi[k][2 + j][2 + i] \
+ phi[2 + k][j][2 + i] - phi[2 + k][2 + j][2 + i])/2. + (-phi[k][j][i] + \
phi[k][j][2 + i] + phi[k][2 + j][i] - phi[k][2 + j][2 + i] + phi[2 + k][j][i] \
- phi[2 + k][j][2 + i] - phi[2 + k][2 + j][i] + phi[2 + k][2 + j][2 + i])/8. \
+ (-phi[k][j][1 + i] + phi[k][j][3 + i] + phi[k][2 + j][1 + i] - phi[k][2 + \
j][3 + i] + phi[2 + k][j][1 + i] - phi[2 + k][j][3 + i] - phi[2 + k][2 + j][1 \
+ i] + phi[2 + k][2 + j][3 + i])/8.\"\>"},
          {"\<\"(-3*(-phi[k][1 + j][1 + i] + phi[2 + k][1 + j][1 + i]))/2. + \
(-phi[k][j][1 + i] + phi[k][2 + j][1 + i] + phi[2 + k][j][1 + i] - phi[2 + \
k][2 + j][1 + i])/2. + (3*(-phi[k][2 + j][1 + i] + phi[2 + k][2 + j][1 + \
i]))/2. + (-phi[k][1 + j][1 + i] + phi[k][3 + j][1 + i] + phi[2 + k][1 + j][1 \
+ i] - phi[2 + k][3 + j][1 + i])/4.\"\>"},
          {"\<\"(-3*(phi[k][1 + j][i] - phi[k][1 + j][2 + i] - phi[2 + k][1 + \
j][i] + phi[2 + k][1 + j][2 + i]))/4. + (phi[k][j][i] - phi[k][j][2 + i] - \
phi[k][2 + j][i] + phi[k][2 + j][2 + i] - phi[2 + k][j][i] + phi[2 + k][j][2 \
+ i] + phi[2 + k][2 + j][i] - phi[2 + k][2 + j][2 + i])/4. + (3*(phi[k][2 + \
j][i] - phi[k][2 + j][2 + i] - phi[2 + k][2 + j][i] + phi[2 + k][2 + j][2 + \
i]))/4. + (phi[k][1 + j][i] - phi[k][1 + j][2 + i] - phi[k][3 + j][i] + \
phi[k][3 + j][2 + i] - phi[2 + k][1 + j][i] + phi[2 + k][1 + j][2 + i] + \
phi[2 + k][3 + j][i] - phi[2 + k][3 + j][2 + i])/8.\"\>"},
          {"\<\"(9*(-phi[k][1 + j][1 + i] + phi[2 + k][1 + j][1 + i]))/2. - \
(9*(-phi[k][1 + j][2 + i] + phi[2 + k][1 + j][2 + i]))/2. + (3*(phi[k][1 + \
j][i] - phi[k][1 + j][2 + i] - phi[2 + k][1 + j][i] + phi[2 + k][1 + j][2 + \
i]))/2. + (3*(phi[k][1 + j][1 + i] - phi[k][1 + j][3 + i] - phi[2 + k][1 + \
j][1 + i] + phi[2 + k][1 + j][3 + i]))/4. - (9*(-phi[k][2 + j][1 + i] + phi[2 \
+ k][2 + j][1 + i]))/2. + (3*(phi[k][j][1 + i] - phi[k][2 + j][1 + i] - phi[2 \
+ k][j][1 + i] + phi[2 + k][2 + j][1 + i]))/2. + (9*(-phi[k][2 + j][2 + i] + \
phi[2 + k][2 + j][2 + i]))/2. - (3*(phi[k][j][2 + i] - phi[k][2 + j][2 + i] - \
phi[2 + k][j][2 + i] + phi[2 + k][2 + j][2 + i]))/2. - (3*(phi[k][2 + j][i] - \
phi[k][2 + j][2 + i] - phi[2 + k][2 + j][i] + phi[2 + k][2 + j][2 + i]))/2. + \
(-phi[k][j][i] + phi[k][j][2 + i] + phi[k][2 + j][i] - phi[k][2 + j][2 + i] + \
phi[2 + k][j][i] - phi[2 + k][j][2 + i] - phi[2 + k][2 + j][i] + phi[2 + k][2 \
+ j][2 + i])/2. - (3*(phi[k][2 + j][1 + i] - phi[k][2 + j][3 + i] - phi[2 + \
k][2 + j][1 + i] + phi[2 + k][2 + j][3 + i]))/4. + (-phi[k][j][1 + i] + \
phi[k][j][3 + i] + phi[k][2 + j][1 + i] - phi[k][2 + j][3 + i] + phi[2 + \
k][j][1 + i] - phi[2 + k][j][3 + i] - phi[2 + k][2 + j][1 + i] + phi[2 + k][2 \
+ j][3 + i])/4. + (3*(phi[k][1 + j][1 + i] - phi[k][3 + j][1 + i] - phi[2 + \
k][1 + j][1 + i] + phi[2 + k][3 + j][1 + i]))/4. - (3*(phi[k][1 + j][2 + i] - \
phi[k][3 + j][2 + i] - phi[2 + k][1 + j][2 + i] + phi[2 + k][3 + j][2 + \
i]))/4. + (-phi[k][1 + j][i] + phi[k][1 + j][2 + i] + phi[k][3 + j][i] - \
phi[k][3 + j][2 + i] + phi[2 + k][1 + j][i] - phi[2 + k][1 + j][2 + i] - \
phi[2 + k][3 + j][i] + phi[2 + k][3 + j][2 + i])/4. + (-phi[k][1 + j][1 + i] \
+ phi[k][1 + j][3 + i] + phi[k][3 + j][1 + i] - phi[k][3 + j][3 + i] + phi[2 \
+ k][1 + j][1 + i] - phi[2 + k][1 + j][3 + i] - phi[2 + k][3 + j][1 + i] + \
phi[2 + k][3 + j][3 + i])/8.\"\>"},
          {"\<\"-phi[k][j][1 + i] + phi[k][j][2 + i] + phi[k][2 + j][1 + i] - \
phi[k][2 + j][2 + i] + phi[2 + k][j][1 + i] - phi[2 + k][j][2 + i] - \
3*(-phi[k][1 + j][1 + i] + phi[2 + k][1 + j][1 + i]) + 3*(-phi[k][1 + j][2 + \
i] + phi[2 + k][1 + j][2 + i]) - (3*(phi[k][1 + j][i] - phi[k][1 + j][2 + i] \
- phi[2 + k][1 + j][i] + phi[2 + k][1 + j][2 + i]))/4. - (3*(phi[k][1 + j][1 \
+ i] - phi[k][1 + j][3 + i] - phi[2 + k][1 + j][1 + i] + phi[2 + k][1 + j][3 \
+ i]))/4. - phi[2 + k][2 + j][1 + i] + 3*(-phi[k][2 + j][1 + i] + phi[2 + \
k][2 + j][1 + i]) + (phi[k][j][i] - phi[k][j][2 + i] - phi[k][2 + j][i] + \
phi[k][2 + j][2 + i] - phi[2 + k][j][i] + phi[2 + k][j][2 + i] + phi[2 + k][2 \
+ j][i] - phi[2 + k][2 + j][2 + i])/4. + phi[2 + k][2 + j][2 + i] - \
3*(-phi[k][2 + j][2 + i] + phi[2 + k][2 + j][2 + i]) + (3*(phi[k][2 + j][i] - \
phi[k][2 + j][2 + i] - phi[2 + k][2 + j][i] + phi[2 + k][2 + j][2 + i]))/4. + \
(phi[k][j][1 + i] - phi[k][j][3 + i] - phi[k][2 + j][1 + i] + phi[k][2 + j][3 \
+ i] - phi[2 + k][j][1 + i] + phi[2 + k][j][3 + i] + phi[2 + k][2 + j][1 + i] \
- phi[2 + k][2 + j][3 + i])/4. + (3*(phi[k][2 + j][1 + i] - phi[k][2 + j][3 + \
i] - phi[2 + k][2 + j][1 + i] + phi[2 + k][2 + j][3 + i]))/4. + (-phi[k][1 + \
j][1 + i] + phi[k][3 + j][1 + i] + phi[2 + k][1 + j][1 + i] - phi[2 + k][3 + \
j][1 + i])/2. + (phi[k][1 + j][i] - phi[k][1 + j][2 + i] - phi[k][3 + j][i] + \
phi[k][3 + j][2 + i] - phi[2 + k][1 + j][i] + phi[2 + k][1 + j][2 + i] + \
phi[2 + k][3 + j][i] - phi[2 + k][3 + j][2 + i])/8. + (phi[k][1 + j][2 + i] - \
phi[k][3 + j][2 + i] - phi[2 + k][1 + j][2 + i] + phi[2 + k][3 + j][2 + \
i])/2. + (phi[k][1 + j][1 + i] - phi[k][1 + j][3 + i] - phi[k][3 + j][1 + i] \
+ phi[k][3 + j][3 + i] - phi[2 + k][1 + j][1 + i] + phi[2 + k][1 + j][3 + i] \
+ phi[2 + k][3 + j][1 + i] - phi[2 + k][3 + j][3 + i])/8.\"\>"},
          {"\<\"-phi[k][1 + j][1 + i] + phi[k][2 + j][1 + i] + phi[2 + k][1 + \
j][1 + i] - phi[2 + k][2 + j][1 + i] + (phi[k][j][1 + i] - phi[k][2 + j][1 + \
i] - phi[2 + k][j][1 + i] + phi[2 + k][2 + j][1 + i])/4. + (phi[k][1 + j][1 + \
i] - phi[k][3 + j][1 + i] - phi[2 + k][1 + j][1 + i] + phi[2 + k][3 + j][1 + \
i])/4.\"\>"},
          {"\<\"(phi[k][1 + j][i] - phi[k][1 + j][2 + i] - phi[2 + k][1 + \
j][i] + phi[2 + k][1 + j][2 + i])/2. + (-phi[k][2 + j][i] + phi[k][2 + j][2 + \
i] + phi[2 + k][2 + j][i] - phi[2 + k][2 + j][2 + i])/2. + (-phi[k][j][i] + \
phi[k][j][2 + i] + phi[k][2 + j][i] - phi[k][2 + j][2 + i] + phi[2 + k][j][i] \
- phi[2 + k][j][2 + i] - phi[2 + k][2 + j][i] + phi[2 + k][2 + j][2 + i])/8. \
+ (-phi[k][1 + j][i] + phi[k][1 + j][2 + i] + phi[k][3 + j][i] - phi[k][3 + \
j][2 + i] + phi[2 + k][1 + j][i] - phi[2 + k][1 + j][2 + i] - phi[2 + k][3 + \
j][i] + phi[2 + k][3 + j][2 + i])/8.\"\>"},
          {"\<\"-phi[k][1 + j][i] + phi[k][1 + j][2 + i] + phi[k][2 + j][i] - \
phi[k][2 + j][2 + i] + phi[2 + k][1 + j][i] - 3*(-phi[k][1 + j][1 + i] + \
phi[2 + k][1 + j][1 + i]) - phi[2 + k][1 + j][2 + i] + 3*(-phi[k][1 + j][2 + \
i] + phi[2 + k][1 + j][2 + i]) + (-phi[k][1 + j][1 + i] + phi[k][1 + j][3 + \
i] + phi[2 + k][1 + j][1 + i] - phi[2 + k][1 + j][3 + i])/2. - phi[2 + k][2 + \
j][i] + 3*(-phi[k][2 + j][1 + i] + phi[2 + k][2 + j][1 + i]) - \
(3*(phi[k][j][1 + i] - phi[k][2 + j][1 + i] - phi[2 + k][j][1 + i] + phi[2 + \
k][2 + j][1 + i]))/4. + (phi[k][j][i] - phi[k][j][2 + i] - phi[k][2 + j][i] + \
phi[k][2 + j][2 + i] - phi[2 + k][j][i] + phi[2 + k][j][2 + i] + phi[2 + k][2 \
+ j][i] - phi[2 + k][2 + j][2 + i])/4. + phi[2 + k][2 + j][2 + i] - \
3*(-phi[k][2 + j][2 + i] + phi[2 + k][2 + j][2 + i]) + (3*(phi[k][j][2 + i] - \
phi[k][2 + j][2 + i] - phi[2 + k][j][2 + i] + phi[2 + k][2 + j][2 + i]))/4. + \
(phi[k][j][1 + i] - phi[k][j][3 + i] - phi[k][2 + j][1 + i] + phi[k][2 + j][3 \
+ i] - phi[2 + k][j][1 + i] + phi[2 + k][j][3 + i] + phi[2 + k][2 + j][1 + i] \
- phi[2 + k][2 + j][3 + i])/8. + (phi[k][2 + j][1 + i] - phi[k][2 + j][3 + i] \
- phi[2 + k][2 + j][1 + i] + phi[2 + k][2 + j][3 + i])/2. - (3*(phi[k][1 + \
j][1 + i] - phi[k][3 + j][1 + i] - phi[2 + k][1 + j][1 + i] + phi[2 + k][3 + \
j][1 + i]))/4. + (phi[k][1 + j][i] - phi[k][1 + j][2 + i] - phi[k][3 + j][i] \
+ phi[k][3 + j][2 + i] - phi[2 + k][1 + j][i] + phi[2 + k][1 + j][2 + i] + \
phi[2 + k][3 + j][i] - phi[2 + k][3 + j][2 + i])/4. + (3*(phi[k][1 + j][2 + \
i] - phi[k][3 + j][2 + i] - phi[2 + k][1 + j][2 + i] + phi[2 + k][3 + j][2 + \
i]))/4. + (phi[k][1 + j][1 + i] - phi[k][1 + j][3 + i] - phi[k][3 + j][1 + i] \
+ phi[k][3 + j][3 + i] - phi[2 + k][1 + j][1 + i] + phi[2 + k][1 + j][3 + i] \
+ phi[2 + k][3 + j][1 + i] - phi[2 + k][3 + j][3 + i])/8.\"\>"},
          {"\<\"2*(-phi[k][1 + j][1 + i] + phi[2 + k][1 + j][1 + i]) - \
2*(-phi[k][1 + j][2 + i] + phi[2 + k][1 + j][2 + i]) + (phi[k][1 + j][i] - \
phi[k][1 + j][2 + i] - phi[2 + k][1 + j][i] + phi[2 + k][1 + j][2 + i])/2. + \
(phi[k][1 + j][1 + i] - phi[k][1 + j][3 + i] - phi[2 + k][1 + j][1 + i] + \
phi[2 + k][1 + j][3 + i])/2. - 2*(-phi[k][2 + j][1 + i] + phi[2 + k][2 + j][1 \
+ i]) + (phi[k][j][1 + i] - phi[k][2 + j][1 + i] - phi[2 + k][j][1 + i] + \
phi[2 + k][2 + j][1 + i])/2. + (-phi[k][j][2 + i] + phi[k][2 + j][2 + i] + \
phi[2 + k][j][2 + i] - phi[2 + k][2 + j][2 + i])/2. + (-phi[k][2 + j][i] + \
phi[k][2 + j][2 + i] + phi[2 + k][2 + j][i] - phi[2 + k][2 + j][2 + i])/2. + \
2*(-phi[k][2 + j][2 + i] + phi[2 + k][2 + j][2 + i]) + (-phi[k][j][i] + \
phi[k][j][2 + i] + phi[k][2 + j][i] - phi[k][2 + j][2 + i] + phi[2 + k][j][i] \
- phi[2 + k][j][2 + i] - phi[2 + k][2 + j][i] + phi[2 + k][2 + j][2 + i])/8. \
+ (-phi[k][2 + j][1 + i] + phi[k][2 + j][3 + i] + phi[2 + k][2 + j][1 + i] - \
phi[2 + k][2 + j][3 + i])/2. + (-phi[k][j][1 + i] + phi[k][j][3 + i] + \
phi[k][2 + j][1 + i] - phi[k][2 + j][3 + i] + phi[2 + k][j][1 + i] - phi[2 + \
k][j][3 + i] - phi[2 + k][2 + j][1 + i] + phi[2 + k][2 + j][3 + i])/8. + \
(phi[k][1 + j][1 + i] - phi[k][3 + j][1 + i] - phi[2 + k][1 + j][1 + i] + \
phi[2 + k][3 + j][1 + i])/2. + (-phi[k][1 + j][2 + i] + phi[k][3 + j][2 + i] \
+ phi[2 + k][1 + j][2 + i] - phi[2 + k][3 + j][2 + i])/2. + (-phi[k][1 + \
j][i] + phi[k][1 + j][2 + i] + phi[k][3 + j][i] - phi[k][3 + j][2 + i] + \
phi[2 + k][1 + j][i] - phi[2 + k][1 + j][2 + i] - phi[2 + k][3 + j][i] + \
phi[2 + k][3 + j][2 + i])/8. + (-phi[k][1 + j][1 + i] + phi[k][1 + j][3 + i] \
+ phi[k][3 + j][1 + i] - phi[k][3 + j][3 + i] + phi[2 + k][1 + j][1 + i] - \
phi[2 + k][1 + j][3 + i] - phi[2 + k][3 + j][1 + i] + phi[2 + k][3 + j][3 + \
i])/8.\"\>"},
          {"\<\"phi[k][1 + j][1 + i] - 3*phi[1 + k][1 + j][1 + i] + 2*phi[2 + \
k][1 + j][1 + i] + (phi[1 + k][1 + j][1 + i] - phi[3 + k][1 + j][1 + i])/2.\"\
\>"},
          {"\<\"(-3*(-phi[1 + k][1 + j][i] + phi[1 + k][1 + j][2 + i]))/2. + \
(-phi[k][1 + j][i] + phi[k][1 + j][2 + i] + phi[2 + k][1 + j][i] - phi[2 + \
k][1 + j][2 + i])/2. + (3*(-phi[2 + k][1 + j][i] + phi[2 + k][1 + j][2 + \
i]))/2. + (-phi[1 + k][1 + j][i] + phi[1 + k][1 + j][2 + i] + phi[3 + k][1 + \
j][i] - phi[3 + k][1 + j][2 + i])/4.\"\>"},
          {"\<\"phi[k][1 + j][i] - phi[k][1 + j][2 + i] + 9*phi[1 + k][1 + \
j][1 + i] - 9*phi[1 + k][1 + j][2 + i] + 3*(-phi[1 + k][1 + j][i] + phi[1 + \
k][1 + j][2 + i]) + (3*(-phi[1 + k][1 + j][1 + i] + phi[1 + k][1 + j][3 + \
i]))/2. - phi[2 + k][1 + j][i] - 9*phi[2 + k][1 + j][1 + i] + 3*(-phi[k][1 + \
j][1 + i] + phi[2 + k][1 + j][1 + i]) + 10*phi[2 + k][1 + j][2 + i] - \
3*(-phi[k][1 + j][2 + i] + phi[2 + k][1 + j][2 + i]) - 3*(-phi[2 + k][1 + \
j][i] + phi[2 + k][1 + j][2 + i]) - (3*(-phi[2 + k][1 + j][1 + i] + phi[2 + \
k][1 + j][3 + i]))/2. + (phi[k][1 + j][1 + i] - phi[k][1 + j][3 + i] - phi[2 \
+ k][1 + j][1 + i] + phi[2 + k][1 + j][3 + i])/2. + (3*(-phi[1 + k][1 + j][1 \
+ i] + phi[3 + k][1 + j][1 + i]))/2. - (3*(-phi[1 + k][1 + j][2 + i] + phi[3 \
+ k][1 + j][2 + i]))/2. + (phi[1 + k][1 + j][i] - phi[1 + k][1 + j][2 + i] - \
phi[3 + k][1 + j][i] + phi[3 + k][1 + j][2 + i])/2. + (phi[1 + k][1 + j][1 + \
i] - phi[1 + k][1 + j][3 + i] - phi[3 + k][1 + j][1 + i] + phi[3 + k][1 + \
j][3 + i])/4.\"\>"},
          {"\<\"-5*phi[1 + k][1 + j][1 + i] + 5*phi[1 + k][1 + j][2 + i] - \
(3*(-phi[1 + k][1 + j][i] + phi[1 + k][1 + j][2 + i]))/2. - (3*(-phi[1 + k][1 \
+ j][1 + i] + phi[1 + k][1 + j][3 + i]))/2. + 6*phi[2 + k][1 + j][1 + i] - \
2*(-phi[k][1 + j][1 + i] + phi[2 + k][1 + j][1 + i]) + (-phi[k][1 + j][i] + \
phi[k][1 + j][2 + i] + phi[2 + k][1 + j][i] - phi[2 + k][1 + j][2 + i])/2. - \
6*phi[2 + k][1 + j][2 + i] + 2*(-phi[k][1 + j][2 + i] + phi[2 + k][1 + j][2 + \
i]) + (3*(-phi[2 + k][1 + j][i] + phi[2 + k][1 + j][2 + i]))/2. + (-phi[k][1 \
+ j][1 + i] + phi[k][1 + j][3 + i] + phi[2 + k][1 + j][1 + i] - phi[2 + k][1 \
+ j][3 + i])/2. + (3*(-phi[2 + k][1 + j][1 + i] + phi[2 + k][1 + j][3 + \
i]))/2. - phi[3 + k][1 + j][1 + i] + (-phi[1 + k][1 + j][i] + phi[1 + k][1 + \
j][2 + i] + phi[3 + k][1 + j][i] - phi[3 + k][1 + j][2 + i])/4. + phi[3 + \
k][1 + j][2 + i] + (-phi[1 + k][1 + j][1 + i] + phi[1 + k][1 + j][3 + i] + \
phi[3 + k][1 + j][1 + i] - phi[3 + k][1 + j][3 + i])/4.\"\>"},
          {"\<\"(-3*(-phi[1 + k][j][1 + i] + phi[1 + k][2 + j][1 + i]))/2. + \
(-phi[k][j][1 + i] + phi[k][2 + j][1 + i] + phi[2 + k][j][1 + i] - phi[2 + \
k][2 + j][1 + i])/2. + (3*(-phi[2 + k][j][1 + i] + phi[2 + k][2 + j][1 + \
i]))/2. + (-phi[1 + k][j][1 + i] + phi[1 + k][2 + j][1 + i] + phi[3 + k][j][1 \
+ i] - phi[3 + k][2 + j][1 + i])/4.\"\>"},
          {"\<\"(-3*(phi[1 + k][j][i] - phi[1 + k][j][2 + i] - phi[1 + k][2 + \
j][i] + phi[1 + k][2 + j][2 + i]))/4. + (phi[k][j][i] - phi[k][j][2 + i] - \
phi[k][2 + j][i] + phi[k][2 + j][2 + i] - phi[2 + k][j][i] + phi[2 + k][j][2 \
+ i] + phi[2 + k][2 + j][i] - phi[2 + k][2 + j][2 + i])/4. + (3*(phi[2 + \
k][j][i] - phi[2 + k][j][2 + i] - phi[2 + k][2 + j][i] + phi[2 + k][2 + j][2 \
+ i]))/4. + (phi[1 + k][j][i] - phi[1 + k][j][2 + i] - phi[1 + k][2 + j][i] + \
phi[1 + k][2 + j][2 + i] - phi[3 + k][j][i] + phi[3 + k][j][2 + i] + phi[3 + \
k][2 + j][i] - phi[3 + k][2 + j][2 + i])/8.\"\>"},
          {"\<\"(9*(-phi[1 + k][j][1 + i] + phi[1 + k][2 + j][1 + i]))/2. - \
(9*(-phi[1 + k][j][2 + i] + phi[1 + k][2 + j][2 + i]))/2. + (3*(phi[1 + \
k][j][i] - phi[1 + k][j][2 + i] - phi[1 + k][2 + j][i] + phi[1 + k][2 + j][2 \
+ i]))/2. + (3*(phi[1 + k][j][1 + i] - phi[1 + k][j][3 + i] - phi[1 + k][2 + \
j][1 + i] + phi[1 + k][2 + j][3 + i]))/4. - (9*(-phi[2 + k][j][1 + i] + phi[2 \
+ k][2 + j][1 + i]))/2. + (3*(phi[k][j][1 + i] - phi[k][2 + j][1 + i] - phi[2 \
+ k][j][1 + i] + phi[2 + k][2 + j][1 + i]))/2. + (9*(-phi[2 + k][j][2 + i] + \
phi[2 + k][2 + j][2 + i]))/2. - (3*(phi[k][j][2 + i] - phi[k][2 + j][2 + i] - \
phi[2 + k][j][2 + i] + phi[2 + k][2 + j][2 + i]))/2. - (3*(phi[2 + k][j][i] - \
phi[2 + k][j][2 + i] - phi[2 + k][2 + j][i] + phi[2 + k][2 + j][2 + i]))/2. + \
(-phi[k][j][i] + phi[k][j][2 + i] + phi[k][2 + j][i] - phi[k][2 + j][2 + i] + \
phi[2 + k][j][i] - phi[2 + k][j][2 + i] - phi[2 + k][2 + j][i] + phi[2 + k][2 \
+ j][2 + i])/2. - (3*(phi[2 + k][j][1 + i] - phi[2 + k][j][3 + i] - phi[2 + \
k][2 + j][1 + i] + phi[2 + k][2 + j][3 + i]))/4. + (-phi[k][j][1 + i] + \
phi[k][j][3 + i] + phi[k][2 + j][1 + i] - phi[k][2 + j][3 + i] + phi[2 + \
k][j][1 + i] - phi[2 + k][j][3 + i] - phi[2 + k][2 + j][1 + i] + phi[2 + k][2 \
+ j][3 + i])/4. + (3*(phi[1 + k][j][1 + i] - phi[1 + k][2 + j][1 + i] - phi[3 \
+ k][j][1 + i] + phi[3 + k][2 + j][1 + i]))/4. - (3*(phi[1 + k][j][2 + i] - \
phi[1 + k][2 + j][2 + i] - phi[3 + k][j][2 + i] + phi[3 + k][2 + j][2 + \
i]))/4. + (-phi[1 + k][j][i] + phi[1 + k][j][2 + i] + phi[1 + k][2 + j][i] - \
phi[1 + k][2 + j][2 + i] + phi[3 + k][j][i] - phi[3 + k][j][2 + i] - phi[3 + \
k][2 + j][i] + phi[3 + k][2 + j][2 + i])/4. + (-phi[1 + k][j][1 + i] + phi[1 \
+ k][j][3 + i] + phi[1 + k][2 + j][1 + i] - phi[1 + k][2 + j][3 + i] + phi[3 \
+ k][j][1 + i] - phi[3 + k][j][3 + i] - phi[3 + k][2 + j][1 + i] + phi[3 + \
k][2 + j][3 + i])/8.\"\>"},
          {"\<\"-phi[k][j][1 + i] + phi[k][j][2 + i] + phi[k][2 + j][1 + i] - \
phi[k][2 + j][2 + i] - 3*(-phi[1 + k][j][1 + i] + phi[1 + k][2 + j][1 + i]) + \
3*(-phi[1 + k][j][2 + i] + phi[1 + k][2 + j][2 + i]) - (3*(phi[1 + k][j][i] - \
phi[1 + k][j][2 + i] - phi[1 + k][2 + j][i] + phi[1 + k][2 + j][2 + i]))/4. - \
(3*(phi[1 + k][j][1 + i] - phi[1 + k][j][3 + i] - phi[1 + k][2 + j][1 + i] + \
phi[1 + k][2 + j][3 + i]))/4. + phi[2 + k][j][1 + i] - phi[2 + k][j][2 + i] - \
phi[2 + k][2 + j][1 + i] + 3*(-phi[2 + k][j][1 + i] + phi[2 + k][2 + j][1 + \
i]) + (phi[k][j][i] - phi[k][j][2 + i] - phi[k][2 + j][i] + phi[k][2 + j][2 + \
i] - phi[2 + k][j][i] + phi[2 + k][j][2 + i] + phi[2 + k][2 + j][i] - phi[2 + \
k][2 + j][2 + i])/4. + phi[2 + k][2 + j][2 + i] - 3*(-phi[2 + k][j][2 + i] + \
phi[2 + k][2 + j][2 + i]) + (3*(phi[2 + k][j][i] - phi[2 + k][j][2 + i] - \
phi[2 + k][2 + j][i] + phi[2 + k][2 + j][2 + i]))/4. + (phi[k][j][1 + i] - \
phi[k][j][3 + i] - phi[k][2 + j][1 + i] + phi[k][2 + j][3 + i] - phi[2 + \
k][j][1 + i] + phi[2 + k][j][3 + i] + phi[2 + k][2 + j][1 + i] - phi[2 + k][2 \
+ j][3 + i])/4. + (3*(phi[2 + k][j][1 + i] - phi[2 + k][j][3 + i] - phi[2 + \
k][2 + j][1 + i] + phi[2 + k][2 + j][3 + i]))/4. + (-phi[1 + k][j][1 + i] + \
phi[1 + k][2 + j][1 + i] + phi[3 + k][j][1 + i] - phi[3 + k][2 + j][1 + \
i])/2. + (phi[1 + k][j][i] - phi[1 + k][j][2 + i] - phi[1 + k][2 + j][i] + \
phi[1 + k][2 + j][2 + i] - phi[3 + k][j][i] + phi[3 + k][j][2 + i] + phi[3 + \
k][2 + j][i] - phi[3 + k][2 + j][2 + i])/8. + (phi[1 + k][j][2 + i] - phi[1 + \
k][2 + j][2 + i] - phi[3 + k][j][2 + i] + phi[3 + k][2 + j][2 + i])/2. + \
(phi[1 + k][j][1 + i] - phi[1 + k][j][3 + i] - phi[1 + k][2 + j][1 + i] + \
phi[1 + k][2 + j][3 + i] - phi[3 + k][j][1 + i] + phi[3 + k][j][3 + i] + \
phi[3 + k][2 + j][1 + i] - phi[3 + k][2 + j][3 + i])/8.\"\>"},
          {"\<\"phi[k][j][1 + i] - phi[k][2 + j][1 + i] + 9*phi[1 + k][1 + \
j][1 + i] - 9*phi[1 + k][2 + j][1 + i] + 3*(-phi[1 + k][j][1 + i] + phi[1 + \
k][2 + j][1 + i]) + (3*(-phi[1 + k][1 + j][1 + i] + phi[1 + k][3 + j][1 + \
i]))/2. - phi[2 + k][j][1 + i] - 9*phi[2 + k][1 + j][1 + i] + 3*(-phi[k][1 + \
j][1 + i] + phi[2 + k][1 + j][1 + i]) + 10*phi[2 + k][2 + j][1 + i] - \
3*(-phi[k][2 + j][1 + i] + phi[2 + k][2 + j][1 + i]) - 3*(-phi[2 + k][j][1 + \
i] + phi[2 + k][2 + j][1 + i]) - (3*(-phi[2 + k][1 + j][1 + i] + phi[2 + k][3 \
+ j][1 + i]))/2. + (phi[k][1 + j][1 + i] - phi[k][3 + j][1 + i] - phi[2 + \
k][1 + j][1 + i] + phi[2 + k][3 + j][1 + i])/2. + (3*(-phi[1 + k][1 + j][1 + \
i] + phi[3 + k][1 + j][1 + i]))/2. - (3*(-phi[1 + k][2 + j][1 + i] + phi[3 + \
k][2 + j][1 + i]))/2. + (phi[1 + k][j][1 + i] - phi[1 + k][2 + j][1 + i] - \
phi[3 + k][j][1 + i] + phi[3 + k][2 + j][1 + i])/2. + (phi[1 + k][1 + j][1 + \
i] - phi[1 + k][3 + j][1 + i] - phi[3 + k][1 + j][1 + i] + phi[3 + k][3 + \
j][1 + i])/4.\"\>"},
          {"\<\"(9*(-phi[1 + k][1 + j][i] + phi[1 + k][1 + j][2 + i]))/2. - \
(9*(-phi[1 + k][2 + j][i] + phi[1 + k][2 + j][2 + i]))/2. + (3*(phi[1 + \
k][j][i] - phi[1 + k][j][2 + i] - phi[1 + k][2 + j][i] + phi[1 + k][2 + j][2 \
+ i]))/2. + (3*(phi[1 + k][1 + j][i] - phi[1 + k][1 + j][2 + i] - phi[1 + \
k][3 + j][i] + phi[1 + k][3 + j][2 + i]))/4. - (9*(-phi[2 + k][1 + j][i] + \
phi[2 + k][1 + j][2 + i]))/2. + (3*(phi[k][1 + j][i] - phi[k][1 + j][2 + i] - \
phi[2 + k][1 + j][i] + phi[2 + k][1 + j][2 + i]))/2. + (9*(-phi[2 + k][2 + \
j][i] + phi[2 + k][2 + j][2 + i]))/2. - (3*(phi[k][2 + j][i] - phi[k][2 + \
j][2 + i] - phi[2 + k][2 + j][i] + phi[2 + k][2 + j][2 + i]))/2. - (3*(phi[2 \
+ k][j][i] - phi[2 + k][j][2 + i] - phi[2 + k][2 + j][i] + phi[2 + k][2 + \
j][2 + i]))/2. + (-phi[k][j][i] + phi[k][j][2 + i] + phi[k][2 + j][i] - \
phi[k][2 + j][2 + i] + phi[2 + k][j][i] - phi[2 + k][j][2 + i] - phi[2 + k][2 \
+ j][i] + phi[2 + k][2 + j][2 + i])/2. - (3*(phi[2 + k][1 + j][i] - phi[2 + \
k][1 + j][2 + i] - phi[2 + k][3 + j][i] + phi[2 + k][3 + j][2 + i]))/4. + \
(-phi[k][1 + j][i] + phi[k][1 + j][2 + i] + phi[k][3 + j][i] - phi[k][3 + \
j][2 + i] + phi[2 + k][1 + j][i] - phi[2 + k][1 + j][2 + i] - phi[2 + k][3 + \
j][i] + phi[2 + k][3 + j][2 + i])/4. + (3*(phi[1 + k][1 + j][i] - phi[1 + \
k][1 + j][2 + i] - phi[3 + k][1 + j][i] + phi[3 + k][1 + j][2 + i]))/4. - \
(3*(phi[1 + k][2 + j][i] - phi[1 + k][2 + j][2 + i] - phi[3 + k][2 + j][i] + \
phi[3 + k][2 + j][2 + i]))/4. + (-phi[1 + k][j][i] + phi[1 + k][j][2 + i] + \
phi[1 + k][2 + j][i] - phi[1 + k][2 + j][2 + i] + phi[3 + k][j][i] - phi[3 + \
k][j][2 + i] - phi[3 + k][2 + j][i] + phi[3 + k][2 + j][2 + i])/4. + (-phi[1 \
+ k][1 + j][i] + phi[1 + k][1 + j][2 + i] + phi[1 + k][3 + j][i] - phi[1 + \
k][3 + j][2 + i] + phi[3 + k][1 + j][i] - phi[3 + k][1 + j][2 + i] - phi[3 + \
k][3 + j][i] + phi[3 + k][3 + j][2 + i])/8.\"\>"},
          {"\<\"phi[k][j][i] - phi[k][j][2 + i] - phi[k][2 + j][i] + phi[k][2 \
+ j][2 + i] - 27*phi[1 + k][1 + j][1 + i] + 27*phi[1 + k][1 + j][2 + i] - \
9*(-phi[1 + k][1 + j][i] + phi[1 + k][1 + j][2 + i]) - (9*(-phi[1 + k][1 + \
j][1 + i] + phi[1 + k][1 + j][3 + i]))/2. + 27*phi[1 + k][2 + j][1 + i] - \
9*(-phi[1 + k][j][1 + i] + phi[1 + k][2 + j][1 + i]) - 27*phi[1 + k][2 + j][2 \
+ i] + 9*(-phi[1 + k][j][2 + i] + phi[1 + k][2 + j][2 + i]) + 9*(-phi[1 + \
k][2 + j][i] + phi[1 + k][2 + j][2 + i]) - 3*(phi[1 + k][j][i] - phi[1 + \
k][j][2 + i] - phi[1 + k][2 + j][i] + phi[1 + k][2 + j][2 + i]) + (9*(-phi[1 \
+ k][2 + j][1 + i] + phi[1 + k][2 + j][3 + i]))/2. - (3*(phi[1 + k][j][1 + i] \
- phi[1 + k][j][3 + i] - phi[1 + k][2 + j][1 + i] + phi[1 + k][2 + j][3 + \
i]))/2. - (9*(-phi[1 + k][1 + j][1 + i] + phi[1 + k][3 + j][1 + i]))/2. + \
(9*(-phi[1 + k][1 + j][2 + i] + phi[1 + k][3 + j][2 + i]))/2. - (3*(phi[1 + \
k][1 + j][i] - phi[1 + k][1 + j][2 + i] - phi[1 + k][3 + j][i] + phi[1 + k][3 \
+ j][2 + i]))/2. - (3*(phi[1 + k][1 + j][1 + i] - phi[1 + k][1 + j][3 + i] - \
phi[1 + k][3 + j][1 + i] + phi[1 + k][3 + j][3 + i]))/4. - phi[2 + k][j][i] + \
phi[2 + k][j][2 + i] + 27*phi[2 + k][1 + j][1 + i] - 9*(-phi[k][1 + j][1 + i] \
+ phi[2 + k][1 + j][1 + i]) - 27*phi[2 + k][1 + j][2 + i] + 9*(-phi[k][1 + \
j][2 + i] + phi[2 + k][1 + j][2 + i]) + 9*(-phi[2 + k][1 + j][i] + phi[2 + \
k][1 + j][2 + i]) - 3*(phi[k][1 + j][i] - phi[k][1 + j][2 + i] - phi[2 + k][1 \
+ j][i] + phi[2 + k][1 + j][2 + i]) + (9*(-phi[2 + k][1 + j][1 + i] + phi[2 + \
k][1 + j][3 + i]))/2. - (3*(phi[k][1 + j][1 + i] - phi[k][1 + j][3 + i] - \
phi[2 + k][1 + j][1 + i] + phi[2 + k][1 + j][3 + i]))/2. + phi[2 + k][2 + \
j][i] - 27*phi[2 + k][2 + j][1 + i] + 9*(-phi[k][2 + j][1 + i] + phi[2 + k][2 \
+ j][1 + i]) + 9*(-phi[2 + k][j][1 + i] + phi[2 + k][2 + j][1 + i]) - \
3*(phi[k][j][1 + i] - phi[k][2 + j][1 + i] - phi[2 + k][j][1 + i] + phi[2 + \
k][2 + j][1 + i]) + 26*phi[2 + k][2 + j][2 + i] - 9*(-phi[k][2 + j][2 + i] + \
phi[2 + k][2 + j][2 + i]) - 9*(-phi[2 + k][j][2 + i] + phi[2 + k][2 + j][2 + \
i]) + 3*(phi[k][j][2 + i] - phi[k][2 + j][2 + i] - phi[2 + k][j][2 + i] + \
phi[2 + k][2 + j][2 + i]) - 9*(-phi[2 + k][2 + j][i] + phi[2 + k][2 + j][2 + \
i]) + 3*(phi[k][2 + j][i] - phi[k][2 + j][2 + i] - phi[2 + k][2 + j][i] + \
phi[2 + k][2 + j][2 + i]) + 3*(phi[2 + k][j][i] - phi[2 + k][j][2 + i] - \
phi[2 + k][2 + j][i] + phi[2 + k][2 + j][2 + i]) + (phi[k][j][1 + i] - \
phi[k][j][3 + i] - phi[k][2 + j][1 + i] + phi[k][2 + j][3 + i] - phi[2 + \
k][j][1 + i] + phi[2 + k][j][3 + i] + phi[2 + k][2 + j][1 + i] - phi[2 + k][2 \
+ j][3 + i])/2. - (9*(-phi[2 + k][2 + j][1 + i] + phi[2 + k][2 + j][3 + \
i]))/2. + (3*(phi[k][2 + j][1 + i] - phi[k][2 + j][3 + i] - phi[2 + k][2 + \
j][1 + i] + phi[2 + k][2 + j][3 + i]))/2. + (3*(phi[2 + k][j][1 + i] - phi[2 \
+ k][j][3 + i] - phi[2 + k][2 + j][1 + i] + phi[2 + k][2 + j][3 + i]))/2. + \
(9*(-phi[2 + k][1 + j][1 + i] + phi[2 + k][3 + j][1 + i]))/2. - (3*(phi[k][1 \
+ j][1 + i] - phi[k][3 + j][1 + i] - phi[2 + k][1 + j][1 + i] + phi[2 + k][3 \
+ j][1 + i]))/2. + (phi[k][1 + j][i] - phi[k][1 + j][2 + i] - phi[k][3 + \
j][i] + phi[k][3 + j][2 + i] - phi[2 + k][1 + j][i] + phi[2 + k][1 + j][2 + \
i] + phi[2 + k][3 + j][i] - phi[2 + k][3 + j][2 + i])/2. - (9*(-phi[2 + k][1 \
+ j][2 + i] + phi[2 + k][3 + j][2 + i]))/2. + (3*(phi[k][1 + j][2 + i] - \
phi[k][3 + j][2 + i] - phi[2 + k][1 + j][2 + i] + phi[2 + k][3 + j][2 + \
i]))/2. + (3*(phi[2 + k][1 + j][i] - phi[2 + k][1 + j][2 + i] - phi[2 + k][3 \
+ j][i] + phi[2 + k][3 + j][2 + i]))/2. + (phi[k][1 + j][1 + i] - phi[k][1 + \
j][3 + i] - phi[k][3 + j][1 + i] + phi[k][3 + j][3 + i] - phi[2 + k][1 + j][1 \
+ i] + phi[2 + k][1 + j][3 + i] + phi[2 + k][3 + j][1 + i] - phi[2 + k][3 + \
j][3 + i])/4. + (3*(phi[2 + k][1 + j][1 + i] - phi[2 + k][1 + j][3 + i] - \
phi[2 + k][3 + j][1 + i] + phi[2 + k][3 + j][3 + i]))/4. - (9*(-phi[1 + k][1 \
+ j][1 + i] + phi[3 + k][1 + j][1 + i]))/2. + (9*(-phi[1 + k][1 + j][2 + i] + \
phi[3 + k][1 + j][2 + i]))/2. - (3*(phi[1 + k][1 + j][i] - phi[1 + k][1 + \
j][2 + i] - phi[3 + k][1 + j][i] + phi[3 + k][1 + j][2 + i]))/2. - (3*(phi[1 \
+ k][1 + j][1 + i] - phi[1 + k][1 + j][3 + i] - phi[3 + k][1 + j][1 + i] + \
phi[3 + k][1 + j][3 + i]))/4. + (9*(-phi[1 + k][2 + j][1 + i] + phi[3 + k][2 \
+ j][1 + i]))/2. - (3*(phi[1 + k][j][1 + i] - phi[1 + k][2 + j][1 + i] - \
phi[3 + k][j][1 + i] + phi[3 + k][2 + j][1 + i]))/2. + (phi[1 + k][j][i] - \
phi[1 + k][j][2 + i] - phi[1 + k][2 + j][i] + phi[1 + k][2 + j][2 + i] - \
phi[3 + k][j][i] + phi[3 + k][j][2 + i] + phi[3 + k][2 + j][i] - phi[3 + k][2 \
+ j][2 + i])/2. - (9*(-phi[1 + k][2 + j][2 + i] + phi[3 + k][2 + j][2 + \
i]))/2. + (3*(phi[1 + k][j][2 + i] - phi[1 + k][2 + j][2 + i] - phi[3 + \
k][j][2 + i] + phi[3 + k][2 + j][2 + i]))/2. + (3*(phi[1 + k][2 + j][i] - \
phi[1 + k][2 + j][2 + i] - phi[3 + k][2 + j][i] + phi[3 + k][2 + j][2 + \
i]))/2. + (phi[1 + k][j][1 + i] - phi[1 + k][j][3 + i] - phi[1 + k][2 + j][1 \
+ i] + phi[1 + k][2 + j][3 + i] - phi[3 + k][j][1 + i] + phi[3 + k][j][3 + i] \
+ phi[3 + k][2 + j][1 + i] - phi[3 + k][2 + j][3 + i])/4. + (3*(phi[1 + k][2 \
+ j][1 + i] - phi[1 + k][2 + j][3 + i] - phi[3 + k][2 + j][1 + i] + phi[3 + \
k][2 + j][3 + i]))/4. - (3*(phi[1 + k][1 + j][1 + i] - phi[1 + k][3 + j][1 + \
i] - phi[3 + k][1 + j][1 + i] + phi[3 + k][3 + j][1 + i]))/4. + (phi[1 + k][1 \
+ j][i] - phi[1 + k][1 + j][2 + i] - phi[1 + k][3 + j][i] + phi[1 + k][3 + \
j][2 + i] - phi[3 + k][1 + j][i] + phi[3 + k][1 + j][2 + i] + phi[3 + k][3 + \
j][i] - phi[3 + k][3 + j][2 + i])/4. + (3*(phi[1 + k][1 + j][2 + i] - phi[1 + \
k][3 + j][2 + i] - phi[3 + k][1 + j][2 + i] + phi[3 + k][3 + j][2 + i]))/4. + \
(phi[1 + k][1 + j][1 + i] - phi[1 + k][1 + j][3 + i] - phi[1 + k][3 + j][1 + \
i] + phi[1 + k][3 + j][3 + i] - phi[3 + k][1 + j][1 + i] + phi[3 + k][1 + \
j][3 + i] + phi[3 + k][3 + j][1 + i] - phi[3 + k][3 + j][3 + i])/8.\"\>"},
          {"\<\"phi[k][1 + j][1 + i] - phi[k][1 + j][2 + i] - phi[k][3 + j][1 \
+ i] + phi[k][3 + j][2 + i] + phi[1 + k][j][1 + i] - phi[1 + k][j][2 + i] + \
18*phi[1 + k][1 + j][1 + i] - 18*phi[1 + k][1 + j][2 + i] + (9*(-phi[1 + k][1 \
+ j][i] + phi[1 + k][1 + j][2 + i]))/2. + (9*(-phi[1 + k][1 + j][1 + i] + \
phi[1 + k][1 + j][3 + i]))/2. - 19*phi[1 + k][2 + j][1 + i] + 6*(-phi[1 + \
k][j][1 + i] + phi[1 + k][2 + j][1 + i]) + 19*phi[1 + k][2 + j][2 + i] - \
6*(-phi[1 + k][j][2 + i] + phi[1 + k][2 + j][2 + i]) - (9*(-phi[1 + k][2 + \
j][i] + phi[1 + k][2 + j][2 + i]))/2. + (3*(phi[1 + k][j][i] - phi[1 + \
k][j][2 + i] - phi[1 + k][2 + j][i] + phi[1 + k][2 + j][2 + i]))/2. - \
(9*(-phi[1 + k][2 + j][1 + i] + phi[1 + k][2 + j][3 + i]))/2. + (3*(phi[1 + \
k][j][1 + i] - phi[1 + k][j][3 + i] - phi[1 + k][2 + j][1 + i] + phi[1 + k][2 \
+ j][3 + i]))/2. + 3*(-phi[1 + k][1 + j][1 + i] + phi[1 + k][3 + j][1 + i]) - \
3*(-phi[1 + k][1 + j][2 + i] + phi[1 + k][3 + j][2 + i]) + (3*(phi[1 + k][1 + \
j][i] - phi[1 + k][1 + j][2 + i] - phi[1 + k][3 + j][i] + phi[1 + k][3 + j][2 \
+ i]))/4. + (3*(phi[1 + k][1 + j][1 + i] - phi[1 + k][1 + j][3 + i] - phi[1 + \
k][3 + j][1 + i] + phi[1 + k][3 + j][3 + i]))/4. - 19*phi[2 + k][1 + j][1 + \
i] + 6*(-phi[k][1 + j][1 + i] + phi[2 + k][1 + j][1 + i]) + 19*phi[2 + k][1 + \
j][2 + i] - 6*(-phi[k][1 + j][2 + i] + phi[2 + k][1 + j][2 + i]) - (9*(-phi[2 \
+ k][1 + j][i] + phi[2 + k][1 + j][2 + i]))/2. + (3*(phi[k][1 + j][i] - \
phi[k][1 + j][2 + i] - phi[2 + k][1 + j][i] + phi[2 + k][1 + j][2 + i]))/2. - \
(9*(-phi[2 + k][1 + j][1 + i] + phi[2 + k][1 + j][3 + i]))/2. + (3*(phi[k][1 \
+ j][1 + i] - phi[k][1 + j][3 + i] - phi[2 + k][1 + j][1 + i] + phi[2 + k][1 \
+ j][3 + i]))/2. + 18*phi[2 + k][2 + j][1 + i] - 6*(-phi[k][2 + j][1 + i] + \
phi[2 + k][2 + j][1 + i]) - 6*(-phi[2 + k][j][1 + i] + phi[2 + k][2 + j][1 + \
i]) + 2*(phi[k][j][1 + i] - phi[k][2 + j][1 + i] - phi[2 + k][j][1 + i] + \
phi[2 + k][2 + j][1 + i]) - 18*phi[2 + k][2 + j][2 + i] + 6*(-phi[k][2 + j][2 \
+ i] + phi[2 + k][2 + j][2 + i]) + 6*(-phi[2 + k][j][2 + i] + phi[2 + k][2 + \
j][2 + i]) - 2*(phi[k][j][2 + i] - phi[k][2 + j][2 + i] - phi[2 + k][j][2 + \
i] + phi[2 + k][2 + j][2 + i]) + (9*(-phi[2 + k][2 + j][i] + phi[2 + k][2 + \
j][2 + i]))/2. - (3*(phi[k][2 + j][i] - phi[k][2 + j][2 + i] - phi[2 + k][2 + \
j][i] + phi[2 + k][2 + j][2 + i]))/2. - (3*(phi[2 + k][j][i] - phi[2 + \
k][j][2 + i] - phi[2 + k][2 + j][i] + phi[2 + k][2 + j][2 + i]))/2. + \
(-phi[k][j][i] + phi[k][j][2 + i] + phi[k][2 + j][i] - phi[k][2 + j][2 + i] + \
phi[2 + k][j][i] - phi[2 + k][j][2 + i] - phi[2 + k][2 + j][i] + phi[2 + k][2 \
+ j][2 + i])/2. + (9*(-phi[2 + k][2 + j][1 + i] + phi[2 + k][2 + j][3 + \
i]))/2. - (3*(phi[k][2 + j][1 + i] - phi[k][2 + j][3 + i] - phi[2 + k][2 + \
j][1 + i] + phi[2 + k][2 + j][3 + i]))/2. - (3*(phi[2 + k][j][1 + i] - phi[2 \
+ k][j][3 + i] - phi[2 + k][2 + j][1 + i] + phi[2 + k][2 + j][3 + i]))/2. + \
(-phi[k][j][1 + i] + phi[k][j][3 + i] + phi[k][2 + j][1 + i] - phi[k][2 + \
j][3 + i] + phi[2 + k][j][1 + i] - phi[2 + k][j][3 + i] - phi[2 + k][2 + j][1 \
+ i] + phi[2 + k][2 + j][3 + i])/2. + phi[2 + k][3 + j][1 + i] - 3*(-phi[2 + \
k][1 + j][1 + i] + phi[2 + k][3 + j][1 + i]) - phi[2 + k][3 + j][2 + i] + \
3*(-phi[2 + k][1 + j][2 + i] + phi[2 + k][3 + j][2 + i]) - (3*(phi[2 + k][1 + \
j][i] - phi[2 + k][1 + j][2 + i] - phi[2 + k][3 + j][i] + phi[2 + k][3 + j][2 \
+ i]))/4. + (-phi[k][1 + j][i] + phi[k][1 + j][2 + i] + phi[k][3 + j][i] - \
phi[k][3 + j][2 + i] + phi[2 + k][1 + j][i] - phi[2 + k][1 + j][2 + i] - \
phi[2 + k][3 + j][i] + phi[2 + k][3 + j][2 + i])/4. - (3*(phi[2 + k][1 + j][1 \
+ i] - phi[2 + k][1 + j][3 + i] - phi[2 + k][3 + j][1 + i] + phi[2 + k][3 + \
j][3 + i]))/4. + (-phi[k][1 + j][1 + i] + phi[k][1 + j][3 + i] + phi[k][3 + \
j][1 + i] - phi[k][3 + j][3 + i] + phi[2 + k][1 + j][1 + i] - phi[2 + k][1 + \
j][3 + i] - phi[2 + k][3 + j][1 + i] + phi[2 + k][3 + j][3 + i])/4. - phi[3 + \
k][j][1 + i] + phi[3 + k][j][2 + i] + 3*(-phi[1 + k][1 + j][1 + i] + phi[3 + \
k][1 + j][1 + i]) - 3*(-phi[1 + k][1 + j][2 + i] + phi[3 + k][1 + j][2 + i]) \
+ (3*(phi[1 + k][1 + j][i] - phi[1 + k][1 + j][2 + i] - phi[3 + k][1 + j][i] \
+ phi[3 + k][1 + j][2 + i]))/4. + (3*(phi[1 + k][1 + j][1 + i] - phi[1 + k][1 \
+ j][3 + i] - phi[3 + k][1 + j][1 + i] + phi[3 + k][1 + j][3 + i]))/4. + \
phi[3 + k][2 + j][1 + i] - 3*(-phi[1 + k][2 + j][1 + i] + phi[3 + k][2 + j][1 \
+ i]) - phi[3 + k][2 + j][2 + i] + 3*(-phi[1 + k][2 + j][2 + i] + phi[3 + \
k][2 + j][2 + i]) - (3*(phi[1 + k][2 + j][i] - phi[1 + k][2 + j][2 + i] - \
phi[3 + k][2 + j][i] + phi[3 + k][2 + j][2 + i]))/4. + (-phi[1 + k][j][i] + \
phi[1 + k][j][2 + i] + phi[1 + k][2 + j][i] - phi[1 + k][2 + j][2 + i] + \
phi[3 + k][j][i] - phi[3 + k][j][2 + i] - phi[3 + k][2 + j][i] + phi[3 + k][2 \
+ j][2 + i])/4. - (3*(phi[1 + k][2 + j][1 + i] - phi[1 + k][2 + j][3 + i] - \
phi[3 + k][2 + j][1 + i] + phi[3 + k][2 + j][3 + i]))/4. + (-phi[1 + k][j][1 \
+ i] + phi[1 + k][j][3 + i] + phi[1 + k][2 + j][1 + i] - phi[1 + k][2 + j][3 \
+ i] + phi[3 + k][j][1 + i] - phi[3 + k][j][3 + i] - phi[3 + k][2 + j][1 + i] \
+ phi[3 + k][2 + j][3 + i])/4. + (phi[1 + k][1 + j][1 + i] - phi[1 + k][3 + \
j][1 + i] - phi[3 + k][1 + j][1 + i] + phi[3 + k][3 + j][1 + i])/2. + (-phi[1 \
+ k][1 + j][2 + i] + phi[1 + k][3 + j][2 + i] + phi[3 + k][1 + j][2 + i] - \
phi[3 + k][3 + j][2 + i])/2. + (-phi[1 + k][1 + j][i] + phi[1 + k][1 + j][2 + \
i] + phi[1 + k][3 + j][i] - phi[1 + k][3 + j][2 + i] + phi[3 + k][1 + j][i] - \
phi[3 + k][1 + j][2 + i] - phi[3 + k][3 + j][i] + phi[3 + k][3 + j][2 + \
i])/8. + (-phi[1 + k][1 + j][1 + i] + phi[1 + k][1 + j][3 + i] + phi[1 + k][3 \
+ j][1 + i] - phi[1 + k][3 + j][3 + i] + phi[3 + k][1 + j][1 + i] - phi[3 + \
k][1 + j][3 + i] - phi[3 + k][3 + j][1 + i] + phi[3 + k][3 + j][3 + \
i])/8.\"\>"},
          {"\<\"-5*phi[1 + k][1 + j][1 + i] + 5*phi[1 + k][2 + j][1 + i] - \
(3*(-phi[1 + k][j][1 + i] + phi[1 + k][2 + j][1 + i]))/2. - (3*(-phi[1 + k][1 \
+ j][1 + i] + phi[1 + k][3 + j][1 + i]))/2. + 6*phi[2 + k][1 + j][1 + i] - \
2*(-phi[k][1 + j][1 + i] + phi[2 + k][1 + j][1 + i]) + (-phi[k][j][1 + i] + \
phi[k][2 + j][1 + i] + phi[2 + k][j][1 + i] - phi[2 + k][2 + j][1 + i])/2. - \
6*phi[2 + k][2 + j][1 + i] + 2*(-phi[k][2 + j][1 + i] + phi[2 + k][2 + j][1 + \
i]) + (3*(-phi[2 + k][j][1 + i] + phi[2 + k][2 + j][1 + i]))/2. + (-phi[k][1 \
+ j][1 + i] + phi[k][3 + j][1 + i] + phi[2 + k][1 + j][1 + i] - phi[2 + k][3 \
+ j][1 + i])/2. + (3*(-phi[2 + k][1 + j][1 + i] + phi[2 + k][3 + j][1 + \
i]))/2. - phi[3 + k][1 + j][1 + i] + (-phi[1 + k][j][1 + i] + phi[1 + k][2 + \
j][1 + i] + phi[3 + k][j][1 + i] - phi[3 + k][2 + j][1 + i])/4. + phi[3 + \
k][2 + j][1 + i] + (-phi[1 + k][1 + j][1 + i] + phi[1 + k][3 + j][1 + i] + \
phi[3 + k][1 + j][1 + i] - phi[3 + k][3 + j][1 + i])/4.\"\>"},
          {"\<\"-phi[k][1 + j][i] + phi[k][1 + j][2 + i] + phi[k][2 + j][i] - \
phi[k][2 + j][2 + i] - 3*(-phi[1 + k][1 + j][i] + phi[1 + k][1 + j][2 + i]) + \
3*(-phi[1 + k][2 + j][i] + phi[1 + k][2 + j][2 + i]) - (3*(phi[1 + k][j][i] - \
phi[1 + k][j][2 + i] - phi[1 + k][2 + j][i] + phi[1 + k][2 + j][2 + i]))/4. - \
(3*(phi[1 + k][1 + j][i] - phi[1 + k][1 + j][2 + i] - phi[1 + k][3 + j][i] + \
phi[1 + k][3 + j][2 + i]))/4. + phi[2 + k][1 + j][i] - phi[2 + k][1 + j][2 + \
i] + 3*(-phi[2 + k][1 + j][i] + phi[2 + k][1 + j][2 + i]) - phi[2 + k][2 + \
j][i] + (phi[k][j][i] - phi[k][j][2 + i] - phi[k][2 + j][i] + phi[k][2 + j][2 \
+ i] - phi[2 + k][j][i] + phi[2 + k][j][2 + i] + phi[2 + k][2 + j][i] - phi[2 \
+ k][2 + j][2 + i])/4. + phi[2 + k][2 + j][2 + i] - 3*(-phi[2 + k][2 + j][i] \
+ phi[2 + k][2 + j][2 + i]) + (3*(phi[2 + k][j][i] - phi[2 + k][j][2 + i] - \
phi[2 + k][2 + j][i] + phi[2 + k][2 + j][2 + i]))/4. + (phi[k][1 + j][i] - \
phi[k][1 + j][2 + i] - phi[k][3 + j][i] + phi[k][3 + j][2 + i] - phi[2 + k][1 \
+ j][i] + phi[2 + k][1 + j][2 + i] + phi[2 + k][3 + j][i] - phi[2 + k][3 + \
j][2 + i])/4. + (3*(phi[2 + k][1 + j][i] - phi[2 + k][1 + j][2 + i] - phi[2 + \
k][3 + j][i] + phi[2 + k][3 + j][2 + i]))/4. + (-phi[1 + k][1 + j][i] + phi[1 \
+ k][1 + j][2 + i] + phi[3 + k][1 + j][i] - phi[3 + k][1 + j][2 + i])/2. + \
(phi[1 + k][j][i] - phi[1 + k][j][2 + i] - phi[1 + k][2 + j][i] + phi[1 + \
k][2 + j][2 + i] - phi[3 + k][j][i] + phi[3 + k][j][2 + i] + phi[3 + k][2 + \
j][i] - phi[3 + k][2 + j][2 + i])/8. + (phi[1 + k][2 + j][i] - phi[1 + k][2 + \
j][2 + i] - phi[3 + k][2 + j][i] + phi[3 + k][2 + j][2 + i])/2. + (phi[1 + \
k][1 + j][i] - phi[1 + k][1 + j][2 + i] - phi[1 + k][3 + j][i] + phi[1 + k][3 \
+ j][2 + i] - phi[3 + k][1 + j][i] + phi[3 + k][1 + j][2 + i] + phi[3 + k][3 \
+ j][i] - phi[3 + k][3 + j][2 + i])/8.\"\>"},
          {"\<\"phi[k][1 + j][1 + i] - phi[k][1 + j][3 + i] - phi[k][2 + j][1 \
+ i] + phi[k][2 + j][3 + i] + phi[1 + k][1 + j][i] + 18*phi[1 + k][1 + j][1 + \
i] - 19*phi[1 + k][1 + j][2 + i] + 6*(-phi[1 + k][1 + j][i] + phi[1 + k][1 + \
j][2 + i]) + 3*(-phi[1 + k][1 + j][1 + i] + phi[1 + k][1 + j][3 + i]) - phi[1 \
+ k][2 + j][i] - 18*phi[1 + k][2 + j][1 + i] + (9*(-phi[1 + k][j][1 + i] + \
phi[1 + k][2 + j][1 + i]))/2. + 19*phi[1 + k][2 + j][2 + i] - (9*(-phi[1 + \
k][j][2 + i] + phi[1 + k][2 + j][2 + i]))/2. - 6*(-phi[1 + k][2 + j][i] + \
phi[1 + k][2 + j][2 + i]) + (3*(phi[1 + k][j][i] - phi[1 + k][j][2 + i] - \
phi[1 + k][2 + j][i] + phi[1 + k][2 + j][2 + i]))/2. - 3*(-phi[1 + k][2 + \
j][1 + i] + phi[1 + k][2 + j][3 + i]) + (3*(phi[1 + k][j][1 + i] - phi[1 + \
k][j][3 + i] - phi[1 + k][2 + j][1 + i] + phi[1 + k][2 + j][3 + i]))/4. + \
(9*(-phi[1 + k][1 + j][1 + i] + phi[1 + k][3 + j][1 + i]))/2. - (9*(-phi[1 + \
k][1 + j][2 + i] + phi[1 + k][3 + j][2 + i]))/2. + (3*(phi[1 + k][1 + j][i] - \
phi[1 + k][1 + j][2 + i] - phi[1 + k][3 + j][i] + phi[1 + k][3 + j][2 + \
i]))/2. + (3*(phi[1 + k][1 + j][1 + i] - phi[1 + k][1 + j][3 + i] - phi[1 + \
k][3 + j][1 + i] + phi[1 + k][3 + j][3 + i]))/4. - 19*phi[2 + k][1 + j][1 + \
i] + 6*(-phi[k][1 + j][1 + i] + phi[2 + k][1 + j][1 + i]) + 18*phi[2 + k][1 + \
j][2 + i] - 6*(-phi[k][1 + j][2 + i] + phi[2 + k][1 + j][2 + i]) - 6*(-phi[2 \
+ k][1 + j][i] + phi[2 + k][1 + j][2 + i]) + 2*(phi[k][1 + j][i] - phi[k][1 + \
j][2 + i] - phi[2 + k][1 + j][i] + phi[2 + k][1 + j][2 + i]) + phi[2 + k][1 + \
j][3 + i] - 3*(-phi[2 + k][1 + j][1 + i] + phi[2 + k][1 + j][3 + i]) + \
19*phi[2 + k][2 + j][1 + i] - 6*(-phi[k][2 + j][1 + i] + phi[2 + k][2 + j][1 \
+ i]) - (9*(-phi[2 + k][j][1 + i] + phi[2 + k][2 + j][1 + i]))/2. + \
(3*(phi[k][j][1 + i] - phi[k][2 + j][1 + i] - phi[2 + k][j][1 + i] + phi[2 + \
k][2 + j][1 + i]))/2. - 18*phi[2 + k][2 + j][2 + i] + 6*(-phi[k][2 + j][2 + \
i] + phi[2 + k][2 + j][2 + i]) + (9*(-phi[2 + k][j][2 + i] + phi[2 + k][2 + \
j][2 + i]))/2. - (3*(phi[k][j][2 + i] - phi[k][2 + j][2 + i] - phi[2 + \
k][j][2 + i] + phi[2 + k][2 + j][2 + i]))/2. + 6*(-phi[2 + k][2 + j][i] + \
phi[2 + k][2 + j][2 + i]) - 2*(phi[k][2 + j][i] - phi[k][2 + j][2 + i] - \
phi[2 + k][2 + j][i] + phi[2 + k][2 + j][2 + i]) - (3*(phi[2 + k][j][i] - \
phi[2 + k][j][2 + i] - phi[2 + k][2 + j][i] + phi[2 + k][2 + j][2 + i]))/2. + \
(-phi[k][j][i] + phi[k][j][2 + i] + phi[k][2 + j][i] - phi[k][2 + j][2 + i] + \
phi[2 + k][j][i] - phi[2 + k][j][2 + i] - phi[2 + k][2 + j][i] + phi[2 + k][2 \
+ j][2 + i])/2. - phi[2 + k][2 + j][3 + i] + 3*(-phi[2 + k][2 + j][1 + i] + \
phi[2 + k][2 + j][3 + i]) - (3*(phi[2 + k][j][1 + i] - phi[2 + k][j][3 + i] - \
phi[2 + k][2 + j][1 + i] + phi[2 + k][2 + j][3 + i]))/4. + (-phi[k][j][1 + i] \
+ phi[k][j][3 + i] + phi[k][2 + j][1 + i] - phi[k][2 + j][3 + i] + phi[2 + \
k][j][1 + i] - phi[2 + k][j][3 + i] - phi[2 + k][2 + j][1 + i] + phi[2 + k][2 \
+ j][3 + i])/4. - (9*(-phi[2 + k][1 + j][1 + i] + phi[2 + k][3 + j][1 + \
i]))/2. + (3*(phi[k][1 + j][1 + i] - phi[k][3 + j][1 + i] - phi[2 + k][1 + \
j][1 + i] + phi[2 + k][3 + j][1 + i]))/2. + (9*(-phi[2 + k][1 + j][2 + i] + \
phi[2 + k][3 + j][2 + i]))/2. - (3*(phi[k][1 + j][2 + i] - phi[k][3 + j][2 + \
i] - phi[2 + k][1 + j][2 + i] + phi[2 + k][3 + j][2 + i]))/2. - (3*(phi[2 + \
k][1 + j][i] - phi[2 + k][1 + j][2 + i] - phi[2 + k][3 + j][i] + phi[2 + k][3 \
+ j][2 + i]))/2. + (-phi[k][1 + j][i] + phi[k][1 + j][2 + i] + phi[k][3 + \
j][i] - phi[k][3 + j][2 + i] + phi[2 + k][1 + j][i] - phi[2 + k][1 + j][2 + \
i] - phi[2 + k][3 + j][i] + phi[2 + k][3 + j][2 + i])/2. - (3*(phi[2 + k][1 + \
j][1 + i] - phi[2 + k][1 + j][3 + i] - phi[2 + k][3 + j][1 + i] + phi[2 + \
k][3 + j][3 + i]))/4. + (-phi[k][1 + j][1 + i] + phi[k][1 + j][3 + i] + \
phi[k][3 + j][1 + i] - phi[k][3 + j][3 + i] + phi[2 + k][1 + j][1 + i] - \
phi[2 + k][1 + j][3 + i] - phi[2 + k][3 + j][1 + i] + phi[2 + k][3 + j][3 + \
i])/4. - phi[3 + k][1 + j][i] + 3*(-phi[1 + k][1 + j][1 + i] + phi[3 + k][1 + \
j][1 + i]) + phi[3 + k][1 + j][2 + i] - 3*(-phi[1 + k][1 + j][2 + i] + phi[3 \
+ k][1 + j][2 + i]) + (phi[1 + k][1 + j][1 + i] - phi[1 + k][1 + j][3 + i] - \
phi[3 + k][1 + j][1 + i] + phi[3 + k][1 + j][3 + i])/2. + phi[3 + k][2 + \
j][i] - 3*(-phi[1 + k][2 + j][1 + i] + phi[3 + k][2 + j][1 + i]) + (3*(phi[1 \
+ k][j][1 + i] - phi[1 + k][2 + j][1 + i] - phi[3 + k][j][1 + i] + phi[3 + \
k][2 + j][1 + i]))/4. - phi[3 + k][2 + j][2 + i] + 3*(-phi[1 + k][2 + j][2 + \
i] + phi[3 + k][2 + j][2 + i]) - (3*(phi[1 + k][j][2 + i] - phi[1 + k][2 + \
j][2 + i] - phi[3 + k][j][2 + i] + phi[3 + k][2 + j][2 + i]))/4. + (-phi[1 + \
k][j][i] + phi[1 + k][j][2 + i] + phi[1 + k][2 + j][i] - phi[1 + k][2 + j][2 \
+ i] + phi[3 + k][j][i] - phi[3 + k][j][2 + i] - phi[3 + k][2 + j][i] + phi[3 \
+ k][2 + j][2 + i])/4. + (-phi[1 + k][2 + j][1 + i] + phi[1 + k][2 + j][3 + \
i] + phi[3 + k][2 + j][1 + i] - phi[3 + k][2 + j][3 + i])/2. + (-phi[1 + \
k][j][1 + i] + phi[1 + k][j][3 + i] + phi[1 + k][2 + j][1 + i] - phi[1 + k][2 \
+ j][3 + i] + phi[3 + k][j][1 + i] - phi[3 + k][j][3 + i] - phi[3 + k][2 + \
j][1 + i] + phi[3 + k][2 + j][3 + i])/8. + (3*(phi[1 + k][1 + j][1 + i] - \
phi[1 + k][3 + j][1 + i] - phi[3 + k][1 + j][1 + i] + phi[3 + k][3 + j][1 + \
i]))/4. - (3*(phi[1 + k][1 + j][2 + i] - phi[1 + k][3 + j][2 + i] - phi[3 + \
k][1 + j][2 + i] + phi[3 + k][3 + j][2 + i]))/4. + (-phi[1 + k][1 + j][i] + \
phi[1 + k][1 + j][2 + i] + phi[1 + k][3 + j][i] - phi[1 + k][3 + j][2 + i] + \
phi[3 + k][1 + j][i] - phi[3 + k][1 + j][2 + i] - phi[3 + k][3 + j][i] + \
phi[3 + k][3 + j][2 + i])/4. + (-phi[1 + k][1 + j][1 + i] + phi[1 + k][1 + \
j][3 + i] + phi[1 + k][3 + j][1 + i] - phi[1 + k][3 + j][3 + i] + phi[3 + \
k][1 + j][1 + i] - phi[3 + k][1 + j][3 + i] - phi[3 + k][3 + j][1 + i] + \
phi[3 + k][3 + j][3 + i])/8.\"\>"},
          {"\<\"-phi[k][j][1 + i] + phi[k][j][2 + i] - phi[k][1 + j][i] - \
2*phi[k][1 + j][1 + i] + 2*phi[k][1 + j][2 + i] + phi[k][1 + j][3 + i] + \
phi[k][2 + j][i] + 2*phi[k][2 + j][1 + i] - 2*phi[k][2 + j][2 + i] - phi[k][2 \
+ j][3 + i] + phi[k][3 + j][1 + i] - phi[k][3 + j][2 + i] - 12*phi[1 + k][1 + \
j][1 + i] + 12*phi[1 + k][1 + j][2 + i] - 3*(-phi[1 + k][1 + j][i] + phi[1 + \
k][1 + j][2 + i]) - 3*(-phi[1 + k][1 + j][1 + i] + phi[1 + k][1 + j][3 + i]) \
+ 12*phi[1 + k][2 + j][1 + i] - 3*(-phi[1 + k][j][1 + i] + phi[1 + k][2 + \
j][1 + i]) - 12*phi[1 + k][2 + j][2 + i] + 3*(-phi[1 + k][j][2 + i] + phi[1 + \
k][2 + j][2 + i]) + 3*(-phi[1 + k][2 + j][i] + phi[1 + k][2 + j][2 + i]) - \
(3*(phi[1 + k][j][i] - phi[1 + k][j][2 + i] - phi[1 + k][2 + j][i] + phi[1 + \
k][2 + j][2 + i]))/4. + 3*(-phi[1 + k][2 + j][1 + i] + phi[1 + k][2 + j][3 + \
i]) - (3*(phi[1 + k][j][1 + i] - phi[1 + k][j][3 + i] - phi[1 + k][2 + j][1 + \
i] + phi[1 + k][2 + j][3 + i]))/4. - 3*(-phi[1 + k][1 + j][1 + i] + phi[1 + \
k][3 + j][1 + i]) + 3*(-phi[1 + k][1 + j][2 + i] + phi[1 + k][3 + j][2 + i]) \
- (3*(phi[1 + k][1 + j][i] - phi[1 + k][1 + j][2 + i] - phi[1 + k][3 + j][i] \
+ phi[1 + k][3 + j][2 + i]))/4. - (3*(phi[1 + k][1 + j][1 + i] - phi[1 + k][1 \
+ j][3 + i] - phi[1 + k][3 + j][1 + i] + phi[1 + k][3 + j][3 + i]))/4. + \
phi[2 + k][j][1 + i] - phi[2 + k][j][2 + i] + phi[2 + k][1 + j][i] + 14*phi[2 \
+ k][1 + j][1 + i] - 4*(-phi[k][1 + j][1 + i] + phi[2 + k][1 + j][1 + i]) - \
14*phi[2 + k][1 + j][2 + i] + 4*(-phi[k][1 + j][2 + i] + phi[2 + k][1 + j][2 \
+ i]) + 3*(-phi[2 + k][1 + j][i] + phi[2 + k][1 + j][2 + i]) - phi[2 + k][1 + \
j][3 + i] + 3*(-phi[2 + k][1 + j][1 + i] + phi[2 + k][1 + j][3 + i]) - phi[2 \
+ k][2 + j][i] - 14*phi[2 + k][2 + j][1 + i] + 4*(-phi[k][2 + j][1 + i] + \
phi[2 + k][2 + j][1 + i]) + 3*(-phi[2 + k][j][1 + i] + phi[2 + k][2 + j][1 + \
i]) + (phi[k][j][i] - phi[k][j][2 + i] - phi[k][2 + j][i] + phi[k][2 + j][2 + \
i] - phi[2 + k][j][i] + phi[2 + k][j][2 + i] + phi[2 + k][2 + j][i] - phi[2 + \
k][2 + j][2 + i])/4. + 14*phi[2 + k][2 + j][2 + i] - 4*(-phi[k][2 + j][2 + i] \
+ phi[2 + k][2 + j][2 + i]) - 3*(-phi[2 + k][j][2 + i] + phi[2 + k][2 + j][2 \
+ i]) - 3*(-phi[2 + k][2 + j][i] + phi[2 + k][2 + j][2 + i]) + (3*(phi[2 + \
k][j][i] - phi[2 + k][j][2 + i] - phi[2 + k][2 + j][i] + phi[2 + k][2 + j][2 \
+ i]))/4. + (phi[k][j][1 + i] - phi[k][j][3 + i] - phi[k][2 + j][1 + i] + \
phi[k][2 + j][3 + i] - phi[2 + k][j][1 + i] + phi[2 + k][j][3 + i] + phi[2 + \
k][2 + j][1 + i] - phi[2 + k][2 + j][3 + i])/4. + phi[2 + k][2 + j][3 + i] - \
3*(-phi[2 + k][2 + j][1 + i] + phi[2 + k][2 + j][3 + i]) + (3*(phi[2 + \
k][j][1 + i] - phi[2 + k][j][3 + i] - phi[2 + k][2 + j][1 + i] + phi[2 + k][2 \
+ j][3 + i]))/4. - phi[2 + k][3 + j][1 + i] + 3*(-phi[2 + k][1 + j][1 + i] + \
phi[2 + k][3 + j][1 + i]) + (phi[k][1 + j][i] - phi[k][1 + j][2 + i] - \
phi[k][3 + j][i] + phi[k][3 + j][2 + i] - phi[2 + k][1 + j][i] + phi[2 + k][1 \
+ j][2 + i] + phi[2 + k][3 + j][i] - phi[2 + k][3 + j][2 + i])/4. + phi[2 + \
k][3 + j][2 + i] - 3*(-phi[2 + k][1 + j][2 + i] + phi[2 + k][3 + j][2 + i]) + \
(3*(phi[2 + k][1 + j][i] - phi[2 + k][1 + j][2 + i] - phi[2 + k][3 + j][i] + \
phi[2 + k][3 + j][2 + i]))/4. + (phi[k][1 + j][1 + i] - phi[k][1 + j][3 + i] \
- phi[k][3 + j][1 + i] + phi[k][3 + j][3 + i] - phi[2 + k][1 + j][1 + i] + \
phi[2 + k][1 + j][3 + i] + phi[2 + k][3 + j][1 + i] - phi[2 + k][3 + j][3 + \
i])/4. + (3*(phi[2 + k][1 + j][1 + i] - phi[2 + k][1 + j][3 + i] - phi[2 + \
k][3 + j][1 + i] + phi[2 + k][3 + j][3 + i]))/4. - 2*(-phi[1 + k][1 + j][1 + \
i] + phi[3 + k][1 + j][1 + i]) + (-phi[1 + k][1 + j][i] + phi[1 + k][1 + j][2 \
+ i] + phi[3 + k][1 + j][i] - phi[3 + k][1 + j][2 + i])/2. + 2*(-phi[1 + k][1 \
+ j][2 + i] + phi[3 + k][1 + j][2 + i]) + (-phi[1 + k][1 + j][1 + i] + phi[1 \
+ k][1 + j][3 + i] + phi[3 + k][1 + j][1 + i] - phi[3 + k][1 + j][3 + i])/2. \
+ (-phi[1 + k][j][1 + i] + phi[1 + k][2 + j][1 + i] + phi[3 + k][j][1 + i] - \
phi[3 + k][2 + j][1 + i])/2. + 2*(-phi[1 + k][2 + j][1 + i] + phi[3 + k][2 + \
j][1 + i]) + (phi[1 + k][j][i] - phi[1 + k][j][2 + i] - phi[1 + k][2 + j][i] \
+ phi[1 + k][2 + j][2 + i] - phi[3 + k][j][i] + phi[3 + k][j][2 + i] + phi[3 \
+ k][2 + j][i] - phi[3 + k][2 + j][2 + i])/8. - 2*(-phi[1 + k][2 + j][2 + i] \
+ phi[3 + k][2 + j][2 + i]) + (phi[1 + k][j][2 + i] - phi[1 + k][2 + j][2 + \
i] - phi[3 + k][j][2 + i] + phi[3 + k][2 + j][2 + i])/2. + (phi[1 + k][2 + \
j][i] - phi[1 + k][2 + j][2 + i] - phi[3 + k][2 + j][i] + phi[3 + k][2 + j][2 \
+ i])/2. + (phi[1 + k][j][1 + i] - phi[1 + k][j][3 + i] - phi[1 + k][2 + j][1 \
+ i] + phi[1 + k][2 + j][3 + i] - phi[3 + k][j][1 + i] + phi[3 + k][j][3 + i] \
+ phi[3 + k][2 + j][1 + i] - phi[3 + k][2 + j][3 + i])/8. + (phi[1 + k][2 + \
j][1 + i] - phi[1 + k][2 + j][3 + i] - phi[3 + k][2 + j][1 + i] + phi[3 + \
k][2 + j][3 + i])/2. + (-phi[1 + k][1 + j][1 + i] + phi[1 + k][3 + j][1 + i] \
+ phi[3 + k][1 + j][1 + i] - phi[3 + k][3 + j][1 + i])/2. + (phi[1 + k][1 + \
j][i] - phi[1 + k][1 + j][2 + i] - phi[1 + k][3 + j][i] + phi[1 + k][3 + j][2 \
+ i] - phi[3 + k][1 + j][i] + phi[3 + k][1 + j][2 + i] + phi[3 + k][3 + j][i] \
- phi[3 + k][3 + j][2 + i])/8. + (phi[1 + k][1 + j][2 + i] - phi[1 + k][3 + \
j][2 + i] - phi[3 + k][1 + j][2 + i] + phi[3 + k][3 + j][2 + i])/2. + (phi[1 \
+ k][1 + j][1 + i] - phi[1 + k][1 + j][3 + i] - phi[1 + k][3 + j][1 + i] + \
phi[1 + k][3 + j][3 + i] - phi[3 + k][1 + j][1 + i] + phi[3 + k][1 + j][3 + \
i] + phi[3 + k][3 + j][1 + i] - phi[3 + k][3 + j][3 + i])/8.\"\>"},
          {"\<\"2*phi[1 + k][1 + j][1 + i] - 2*phi[2 + k][1 + j][1 + i] + \
(-phi[k][1 + j][1 + i] + phi[2 + k][1 + j][1 + i])/2. + (-phi[1 + k][1 + j][1 \
+ i] + phi[3 + k][1 + j][1 + i])/2.\"\>"},
          {"\<\"-phi[1 + k][1 + j][i] + phi[1 + k][1 + j][2 + i] + phi[2 + \
k][1 + j][i] - phi[2 + k][1 + j][2 + i] + (phi[k][1 + j][i] - phi[k][1 + j][2 \
+ i] - phi[2 + k][1 + j][i] + phi[2 + k][1 + j][2 + i])/4. + (phi[1 + k][1 + \
j][i] - phi[1 + k][1 + j][2 + i] - phi[3 + k][1 + j][i] + phi[3 + k][1 + j][2 \
+ i])/4.\"\>"},
          {"\<\"-5*phi[1 + k][1 + j][1 + i] + 6*phi[1 + k][1 + j][2 + i] - \
2*(-phi[1 + k][1 + j][i] + phi[1 + k][1 + j][2 + i]) - phi[1 + k][1 + j][3 + \
i] + 5*phi[2 + k][1 + j][1 + i] - (3*(-phi[k][1 + j][1 + i] + phi[2 + k][1 + \
j][1 + i]))/2. + (-phi[k][1 + j][i] + phi[k][1 + j][2 + i] + phi[2 + k][1 + \
j][i] - phi[2 + k][1 + j][2 + i])/2. - 6*phi[2 + k][1 + j][2 + i] + \
(3*(-phi[k][1 + j][2 + i] + phi[2 + k][1 + j][2 + i]))/2. + 2*(-phi[2 + k][1 \
+ j][i] + phi[2 + k][1 + j][2 + i]) + (-phi[k][1 + j][1 + i] + phi[k][1 + \
j][3 + i] + phi[2 + k][1 + j][1 + i] - phi[2 + k][1 + j][3 + i])/4. + phi[2 + \
k][1 + j][3 + i] - (3*(-phi[1 + k][1 + j][1 + i] + phi[3 + k][1 + j][1 + \
i]))/2. + (-phi[1 + k][1 + j][i] + phi[1 + k][1 + j][2 + i] + phi[3 + k][1 + \
j][i] - phi[3 + k][1 + j][2 + i])/2. + (3*(-phi[1 + k][1 + j][2 + i] + phi[3 \
+ k][1 + j][2 + i]))/2. + (-phi[1 + k][1 + j][1 + i] + phi[1 + k][1 + j][3 + \
i] + phi[3 + k][1 + j][1 + i] - phi[3 + k][1 + j][3 + i])/4.\"\>"},
          {"\<\"-phi[k][1 + j][1 + i] + phi[k][1 + j][2 + i] - phi[1 + k][1 + \
j][i] + 2*phi[1 + k][1 + j][1 + i] - 2*phi[1 + k][1 + j][2 + i] + phi[1 + \
k][1 + j][3 + i] + phi[2 + k][1 + j][i] - 2*phi[2 + k][1 + j][1 + i] + \
2*phi[2 + k][1 + j][2 + i] + (phi[k][1 + j][i] - phi[k][1 + j][2 + i] - phi[2 \
+ k][1 + j][i] + phi[2 + k][1 + j][2 + i])/4. - phi[2 + k][1 + j][3 + i] + \
(phi[k][1 + j][1 + i] - phi[k][1 + j][3 + i] - phi[2 + k][1 + j][1 + i] + \
phi[2 + k][1 + j][3 + i])/4. + phi[3 + k][1 + j][1 + i] - phi[3 + k][1 + j][2 \
+ i] + (phi[1 + k][1 + j][i] - phi[1 + k][1 + j][2 + i] - phi[3 + k][1 + \
j][i] + phi[3 + k][1 + j][2 + i])/4. + (phi[1 + k][1 + j][1 + i] - phi[1 + \
k][1 + j][3 + i] - phi[3 + k][1 + j][1 + i] + phi[3 + k][1 + j][3 + \
i])/4.\"\>"},
          {"\<\"-phi[1 + k][j][1 + i] + phi[1 + k][2 + j][1 + i] + phi[2 + \
k][j][1 + i] - phi[2 + k][2 + j][1 + i] + (phi[k][j][1 + i] - phi[k][2 + j][1 \
+ i] - phi[2 + k][j][1 + i] + phi[2 + k][2 + j][1 + i])/4. + (phi[1 + k][j][1 \
+ i] - phi[1 + k][2 + j][1 + i] - phi[3 + k][j][1 + i] + phi[3 + k][2 + j][1 \
+ i])/4.\"\>"},
          {"\<\"(phi[1 + k][j][i] - phi[1 + k][j][2 + i] - phi[1 + k][2 + \
j][i] + phi[1 + k][2 + j][2 + i])/2. + (-phi[2 + k][j][i] + phi[2 + k][j][2 + \
i] + phi[2 + k][2 + j][i] - phi[2 + k][2 + j][2 + i])/2. + (-phi[k][j][i] + \
phi[k][j][2 + i] + phi[k][2 + j][i] - phi[k][2 + j][2 + i] + phi[2 + k][j][i] \
- phi[2 + k][j][2 + i] - phi[2 + k][2 + j][i] + phi[2 + k][2 + j][2 + i])/8. \
+ (-phi[1 + k][j][i] + phi[1 + k][j][2 + i] + phi[1 + k][2 + j][i] - phi[1 + \
k][2 + j][2 + i] + phi[3 + k][j][i] - phi[3 + k][j][2 + i] - phi[3 + k][2 + \
j][i] + phi[3 + k][2 + j][2 + i])/8.\"\>"},
          {"\<\"-phi[1 + k][j][i] + phi[1 + k][j][2 + i] + phi[1 + k][2 + \
j][i] - 3*(-phi[1 + k][j][1 + i] + phi[1 + k][2 + j][1 + i]) - phi[1 + k][2 + \
j][2 + i] + 3*(-phi[1 + k][j][2 + i] + phi[1 + k][2 + j][2 + i]) + (-phi[1 + \
k][j][1 + i] + phi[1 + k][j][3 + i] + phi[1 + k][2 + j][1 + i] - phi[1 + k][2 \
+ j][3 + i])/2. + phi[2 + k][j][i] - phi[2 + k][j][2 + i] - phi[2 + k][2 + \
j][i] + 3*(-phi[2 + k][j][1 + i] + phi[2 + k][2 + j][1 + i]) - \
(3*(phi[k][j][1 + i] - phi[k][2 + j][1 + i] - phi[2 + k][j][1 + i] + phi[2 + \
k][2 + j][1 + i]))/4. + (phi[k][j][i] - phi[k][j][2 + i] - phi[k][2 + j][i] + \
phi[k][2 + j][2 + i] - phi[2 + k][j][i] + phi[2 + k][j][2 + i] + phi[2 + k][2 \
+ j][i] - phi[2 + k][2 + j][2 + i])/4. + phi[2 + k][2 + j][2 + i] - 3*(-phi[2 \
+ k][j][2 + i] + phi[2 + k][2 + j][2 + i]) + (3*(phi[k][j][2 + i] - phi[k][2 \
+ j][2 + i] - phi[2 + k][j][2 + i] + phi[2 + k][2 + j][2 + i]))/4. + \
(phi[k][j][1 + i] - phi[k][j][3 + i] - phi[k][2 + j][1 + i] + phi[k][2 + j][3 \
+ i] - phi[2 + k][j][1 + i] + phi[2 + k][j][3 + i] + phi[2 + k][2 + j][1 + i] \
- phi[2 + k][2 + j][3 + i])/8. + (phi[2 + k][j][1 + i] - phi[2 + k][j][3 + i] \
- phi[2 + k][2 + j][1 + i] + phi[2 + k][2 + j][3 + i])/2. - (3*(phi[1 + \
k][j][1 + i] - phi[1 + k][2 + j][1 + i] - phi[3 + k][j][1 + i] + phi[3 + k][2 \
+ j][1 + i]))/4. + (phi[1 + k][j][i] - phi[1 + k][j][2 + i] - phi[1 + k][2 + \
j][i] + phi[1 + k][2 + j][2 + i] - phi[3 + k][j][i] + phi[3 + k][j][2 + i] + \
phi[3 + k][2 + j][i] - phi[3 + k][2 + j][2 + i])/4. + (3*(phi[1 + k][j][2 + \
i] - phi[1 + k][2 + j][2 + i] - phi[3 + k][j][2 + i] + phi[3 + k][2 + j][2 + \
i]))/4. + (phi[1 + k][j][1 + i] - phi[1 + k][j][3 + i] - phi[1 + k][2 + j][1 \
+ i] + phi[1 + k][2 + j][3 + i] - phi[3 + k][j][1 + i] + phi[3 + k][j][3 + i] \
+ phi[3 + k][2 + j][1 + i] - phi[3 + k][2 + j][3 + i])/8.\"\>"},
          {"\<\"2*(-phi[1 + k][j][1 + i] + phi[1 + k][2 + j][1 + i]) - \
2*(-phi[1 + k][j][2 + i] + phi[1 + k][2 + j][2 + i]) + (phi[1 + k][j][i] - \
phi[1 + k][j][2 + i] - phi[1 + k][2 + j][i] + phi[1 + k][2 + j][2 + i])/2. + \
(phi[1 + k][j][1 + i] - phi[1 + k][j][3 + i] - phi[1 + k][2 + j][1 + i] + \
phi[1 + k][2 + j][3 + i])/2. - 2*(-phi[2 + k][j][1 + i] + phi[2 + k][2 + j][1 \
+ i]) + (phi[k][j][1 + i] - phi[k][2 + j][1 + i] - phi[2 + k][j][1 + i] + \
phi[2 + k][2 + j][1 + i])/2. + (-phi[k][j][2 + i] + phi[k][2 + j][2 + i] + \
phi[2 + k][j][2 + i] - phi[2 + k][2 + j][2 + i])/2. + (-phi[2 + k][j][i] + \
phi[2 + k][j][2 + i] + phi[2 + k][2 + j][i] - phi[2 + k][2 + j][2 + i])/2. + \
2*(-phi[2 + k][j][2 + i] + phi[2 + k][2 + j][2 + i]) + (-phi[k][j][i] + \
phi[k][j][2 + i] + phi[k][2 + j][i] - phi[k][2 + j][2 + i] + phi[2 + k][j][i] \
- phi[2 + k][j][2 + i] - phi[2 + k][2 + j][i] + phi[2 + k][2 + j][2 + i])/8. \
+ (-phi[2 + k][j][1 + i] + phi[2 + k][j][3 + i] + phi[2 + k][2 + j][1 + i] - \
phi[2 + k][2 + j][3 + i])/2. + (-phi[k][j][1 + i] + phi[k][j][3 + i] + \
phi[k][2 + j][1 + i] - phi[k][2 + j][3 + i] + phi[2 + k][j][1 + i] - phi[2 + \
k][j][3 + i] - phi[2 + k][2 + j][1 + i] + phi[2 + k][2 + j][3 + i])/8. + \
(phi[1 + k][j][1 + i] - phi[1 + k][2 + j][1 + i] - phi[3 + k][j][1 + i] + \
phi[3 + k][2 + j][1 + i])/2. + (-phi[1 + k][j][2 + i] + phi[1 + k][2 + j][2 + \
i] + phi[3 + k][j][2 + i] - phi[3 + k][2 + j][2 + i])/2. + (-phi[1 + k][j][i] \
+ phi[1 + k][j][2 + i] + phi[1 + k][2 + j][i] - phi[1 + k][2 + j][2 + i] + \
phi[3 + k][j][i] - phi[3 + k][j][2 + i] - phi[3 + k][2 + j][i] + phi[3 + k][2 \
+ j][2 + i])/8. + (-phi[1 + k][j][1 + i] + phi[1 + k][j][3 + i] + phi[1 + \
k][2 + j][1 + i] - phi[1 + k][2 + j][3 + i] + phi[3 + k][j][1 + i] - phi[3 + \
k][j][3 + i] - phi[3 + k][2 + j][1 + i] + phi[3 + k][2 + j][3 + i])/8.\"\>"},
          {"\<\"-5*phi[1 + k][1 + j][1 + i] + 6*phi[1 + k][2 + j][1 + i] - \
2*(-phi[1 + k][j][1 + i] + phi[1 + k][2 + j][1 + i]) - phi[1 + k][3 + j][1 + \
i] + 5*phi[2 + k][1 + j][1 + i] - (3*(-phi[k][1 + j][1 + i] + phi[2 + k][1 + \
j][1 + i]))/2. + (-phi[k][j][1 + i] + phi[k][2 + j][1 + i] + phi[2 + k][j][1 \
+ i] - phi[2 + k][2 + j][1 + i])/2. - 6*phi[2 + k][2 + j][1 + i] + \
(3*(-phi[k][2 + j][1 + i] + phi[2 + k][2 + j][1 + i]))/2. + 2*(-phi[2 + \
k][j][1 + i] + phi[2 + k][2 + j][1 + i]) + (-phi[k][1 + j][1 + i] + phi[k][3 \
+ j][1 + i] + phi[2 + k][1 + j][1 + i] - phi[2 + k][3 + j][1 + i])/4. + phi[2 \
+ k][3 + j][1 + i] - (3*(-phi[1 + k][1 + j][1 + i] + phi[3 + k][1 + j][1 + \
i]))/2. + (-phi[1 + k][j][1 + i] + phi[1 + k][2 + j][1 + i] + phi[3 + k][j][1 \
+ i] - phi[3 + k][2 + j][1 + i])/2. + (3*(-phi[1 + k][2 + j][1 + i] + phi[3 + \
k][2 + j][1 + i]))/2. + (-phi[1 + k][1 + j][1 + i] + phi[1 + k][3 + j][1 + i] \
+ phi[3 + k][1 + j][1 + i] - phi[3 + k][3 + j][1 + i])/4.\"\>"},
          {"\<\"-phi[1 + k][j][i] + phi[1 + k][j][2 + i] - 3*(-phi[1 + k][1 + \
j][i] + phi[1 + k][1 + j][2 + i]) + phi[1 + k][2 + j][i] - phi[1 + k][2 + \
j][2 + i] + 3*(-phi[1 + k][2 + j][i] + phi[1 + k][2 + j][2 + i]) + (-phi[1 + \
k][1 + j][i] + phi[1 + k][1 + j][2 + i] + phi[1 + k][3 + j][i] - phi[1 + k][3 \
+ j][2 + i])/2. + phi[2 + k][j][i] - phi[2 + k][j][2 + i] + 3*(-phi[2 + k][1 \
+ j][i] + phi[2 + k][1 + j][2 + i]) - (3*(phi[k][1 + j][i] - phi[k][1 + j][2 \
+ i] - phi[2 + k][1 + j][i] + phi[2 + k][1 + j][2 + i]))/4. - phi[2 + k][2 + \
j][i] + (phi[k][j][i] - phi[k][j][2 + i] - phi[k][2 + j][i] + phi[k][2 + j][2 \
+ i] - phi[2 + k][j][i] + phi[2 + k][j][2 + i] + phi[2 + k][2 + j][i] - phi[2 \
+ k][2 + j][2 + i])/4. + phi[2 + k][2 + j][2 + i] - 3*(-phi[2 + k][2 + j][i] \
+ phi[2 + k][2 + j][2 + i]) + (3*(phi[k][2 + j][i] - phi[k][2 + j][2 + i] - \
phi[2 + k][2 + j][i] + phi[2 + k][2 + j][2 + i]))/4. + (phi[k][1 + j][i] - \
phi[k][1 + j][2 + i] - phi[k][3 + j][i] + phi[k][3 + j][2 + i] - phi[2 + k][1 \
+ j][i] + phi[2 + k][1 + j][2 + i] + phi[2 + k][3 + j][i] - phi[2 + k][3 + \
j][2 + i])/8. + (phi[2 + k][1 + j][i] - phi[2 + k][1 + j][2 + i] - phi[2 + \
k][3 + j][i] + phi[2 + k][3 + j][2 + i])/2. - (3*(phi[1 + k][1 + j][i] - \
phi[1 + k][1 + j][2 + i] - phi[3 + k][1 + j][i] + phi[3 + k][1 + j][2 + \
i]))/4. + (phi[1 + k][j][i] - phi[1 + k][j][2 + i] - phi[1 + k][2 + j][i] + \
phi[1 + k][2 + j][2 + i] - phi[3 + k][j][i] + phi[3 + k][j][2 + i] + phi[3 + \
k][2 + j][i] - phi[3 + k][2 + j][2 + i])/4. + (3*(phi[1 + k][2 + j][i] - \
phi[1 + k][2 + j][2 + i] - phi[3 + k][2 + j][i] + phi[3 + k][2 + j][2 + \
i]))/4. + (phi[1 + k][1 + j][i] - phi[1 + k][1 + j][2 + i] - phi[1 + k][3 + \
j][i] + phi[1 + k][3 + j][2 + i] - phi[3 + k][1 + j][i] + phi[3 + k][1 + j][2 \
+ i] + phi[3 + k][3 + j][i] - phi[3 + k][3 + j][2 + i])/8.\"\>"},
          {"\<\"phi[1 + k][j][1 + i] - phi[1 + k][j][3 + i] + phi[1 + k][1 + \
j][i] + 18*phi[1 + k][1 + j][1 + i] - 19*phi[1 + k][1 + j][2 + i] + 6*(-phi[1 \
+ k][1 + j][i] + phi[1 + k][1 + j][2 + i]) + 3*(-phi[1 + k][1 + j][1 + i] + \
phi[1 + k][1 + j][3 + i]) - 19*phi[1 + k][2 + j][1 + i] + 6*(-phi[1 + k][j][1 \
+ i] + phi[1 + k][2 + j][1 + i]) + 18*phi[1 + k][2 + j][2 + i] - 6*(-phi[1 + \
k][j][2 + i] + phi[1 + k][2 + j][2 + i]) - 6*(-phi[1 + k][2 + j][i] + phi[1 + \
k][2 + j][2 + i]) + 2*(phi[1 + k][j][i] - phi[1 + k][j][2 + i] - phi[1 + k][2 \
+ j][i] + phi[1 + k][2 + j][2 + i]) + phi[1 + k][2 + j][3 + i] - 3*(-phi[1 + \
k][2 + j][1 + i] + phi[1 + k][2 + j][3 + i]) - phi[1 + k][3 + j][i] + \
3*(-phi[1 + k][1 + j][1 + i] + phi[1 + k][3 + j][1 + i]) + phi[1 + k][3 + \
j][2 + i] - 3*(-phi[1 + k][1 + j][2 + i] + phi[1 + k][3 + j][2 + i]) + (phi[1 \
+ k][1 + j][1 + i] - phi[1 + k][1 + j][3 + i] - phi[1 + k][3 + j][1 + i] + \
phi[1 + k][3 + j][3 + i])/2. - phi[2 + k][j][1 + i] + phi[2 + k][j][3 + i] - \
phi[2 + k][1 + j][i] - 18*phi[2 + k][1 + j][1 + i] + (9*(-phi[k][1 + j][1 + \
i] + phi[2 + k][1 + j][1 + i]))/2. + 19*phi[2 + k][1 + j][2 + i] - \
(9*(-phi[k][1 + j][2 + i] + phi[2 + k][1 + j][2 + i]))/2. - 6*(-phi[2 + k][1 \
+ j][i] + phi[2 + k][1 + j][2 + i]) + (3*(phi[k][1 + j][i] - phi[k][1 + j][2 \
+ i] - phi[2 + k][1 + j][i] + phi[2 + k][1 + j][2 + i]))/2. - 3*(-phi[2 + \
k][1 + j][1 + i] + phi[2 + k][1 + j][3 + i]) + (3*(phi[k][1 + j][1 + i] - \
phi[k][1 + j][3 + i] - phi[2 + k][1 + j][1 + i] + phi[2 + k][1 + j][3 + \
i]))/4. + 19*phi[2 + k][2 + j][1 + i] - (9*(-phi[k][2 + j][1 + i] + phi[2 + \
k][2 + j][1 + i]))/2. - 6*(-phi[2 + k][j][1 + i] + phi[2 + k][2 + j][1 + i]) \
+ (3*(phi[k][j][1 + i] - phi[k][2 + j][1 + i] - phi[2 + k][j][1 + i] + phi[2 \
+ k][2 + j][1 + i]))/2. - 18*phi[2 + k][2 + j][2 + i] + (9*(-phi[k][2 + j][2 \
+ i] + phi[2 + k][2 + j][2 + i]))/2. + 6*(-phi[2 + k][j][2 + i] + phi[2 + \
k][2 + j][2 + i]) - (3*(phi[k][j][2 + i] - phi[k][2 + j][2 + i] - phi[2 + \
k][j][2 + i] + phi[2 + k][2 + j][2 + i]))/2. + 6*(-phi[2 + k][2 + j][i] + \
phi[2 + k][2 + j][2 + i]) - (3*(phi[k][2 + j][i] - phi[k][2 + j][2 + i] - \
phi[2 + k][2 + j][i] + phi[2 + k][2 + j][2 + i]))/2. - 2*(phi[2 + k][j][i] - \
phi[2 + k][j][2 + i] - phi[2 + k][2 + j][i] + phi[2 + k][2 + j][2 + i]) + \
(-phi[k][j][i] + phi[k][j][2 + i] + phi[k][2 + j][i] - phi[k][2 + j][2 + i] + \
phi[2 + k][j][i] - phi[2 + k][j][2 + i] - phi[2 + k][2 + j][i] + phi[2 + k][2 \
+ j][2 + i])/2. - phi[2 + k][2 + j][3 + i] + 3*(-phi[2 + k][2 + j][1 + i] + \
phi[2 + k][2 + j][3 + i]) - (3*(phi[k][2 + j][1 + i] - phi[k][2 + j][3 + i] - \
phi[2 + k][2 + j][1 + i] + phi[2 + k][2 + j][3 + i]))/4. + (-phi[k][j][1 + i] \
+ phi[k][j][3 + i] + phi[k][2 + j][1 + i] - phi[k][2 + j][3 + i] + phi[2 + \
k][j][1 + i] - phi[2 + k][j][3 + i] - phi[2 + k][2 + j][1 + i] + phi[2 + k][2 \
+ j][3 + i])/4. + phi[2 + k][3 + j][i] - 3*(-phi[2 + k][1 + j][1 + i] + phi[2 \
+ k][3 + j][1 + i]) + (3*(phi[k][1 + j][1 + i] - phi[k][3 + j][1 + i] - phi[2 \
+ k][1 + j][1 + i] + phi[2 + k][3 + j][1 + i]))/4. - phi[2 + k][3 + j][2 + i] \
+ 3*(-phi[2 + k][1 + j][2 + i] + phi[2 + k][3 + j][2 + i]) - (3*(phi[k][1 + \
j][2 + i] - phi[k][3 + j][2 + i] - phi[2 + k][1 + j][2 + i] + phi[2 + k][3 + \
j][2 + i]))/4. + (-phi[k][1 + j][i] + phi[k][1 + j][2 + i] + phi[k][3 + j][i] \
- phi[k][3 + j][2 + i] + phi[2 + k][1 + j][i] - phi[2 + k][1 + j][2 + i] - \
phi[2 + k][3 + j][i] + phi[2 + k][3 + j][2 + i])/4. + (-phi[2 + k][1 + j][1 + \
i] + phi[2 + k][1 + j][3 + i] + phi[2 + k][3 + j][1 + i] - phi[2 + k][3 + \
j][3 + i])/2. + (-phi[k][1 + j][1 + i] + phi[k][1 + j][3 + i] + phi[k][3 + \
j][1 + i] - phi[k][3 + j][3 + i] + phi[2 + k][1 + j][1 + i] - phi[2 + k][1 + \
j][3 + i] - phi[2 + k][3 + j][1 + i] + phi[2 + k][3 + j][3 + i])/8. + \
(9*(-phi[1 + k][1 + j][1 + i] + phi[3 + k][1 + j][1 + i]))/2. - (9*(-phi[1 + \
k][1 + j][2 + i] + phi[3 + k][1 + j][2 + i]))/2. + (3*(phi[1 + k][1 + j][i] - \
phi[1 + k][1 + j][2 + i] - phi[3 + k][1 + j][i] + phi[3 + k][1 + j][2 + \
i]))/2. + (3*(phi[1 + k][1 + j][1 + i] - phi[1 + k][1 + j][3 + i] - phi[3 + \
k][1 + j][1 + i] + phi[3 + k][1 + j][3 + i]))/4. - (9*(-phi[1 + k][2 + j][1 + \
i] + phi[3 + k][2 + j][1 + i]))/2. + (3*(phi[1 + k][j][1 + i] - phi[1 + k][2 \
+ j][1 + i] - phi[3 + k][j][1 + i] + phi[3 + k][2 + j][1 + i]))/2. + \
(9*(-phi[1 + k][2 + j][2 + i] + phi[3 + k][2 + j][2 + i]))/2. - (3*(phi[1 + \
k][j][2 + i] - phi[1 + k][2 + j][2 + i] - phi[3 + k][j][2 + i] + phi[3 + k][2 \
+ j][2 + i]))/2. - (3*(phi[1 + k][2 + j][i] - phi[1 + k][2 + j][2 + i] - \
phi[3 + k][2 + j][i] + phi[3 + k][2 + j][2 + i]))/2. + (-phi[1 + k][j][i] + \
phi[1 + k][j][2 + i] + phi[1 + k][2 + j][i] - phi[1 + k][2 + j][2 + i] + \
phi[3 + k][j][i] - phi[3 + k][j][2 + i] - phi[3 + k][2 + j][i] + phi[3 + k][2 \
+ j][2 + i])/2. - (3*(phi[1 + k][2 + j][1 + i] - phi[1 + k][2 + j][3 + i] - \
phi[3 + k][2 + j][1 + i] + phi[3 + k][2 + j][3 + i]))/4. + (-phi[1 + k][j][1 \
+ i] + phi[1 + k][j][3 + i] + phi[1 + k][2 + j][1 + i] - phi[1 + k][2 + j][3 \
+ i] + phi[3 + k][j][1 + i] - phi[3 + k][j][3 + i] - phi[3 + k][2 + j][1 + i] \
+ phi[3 + k][2 + j][3 + i])/4. + (3*(phi[1 + k][1 + j][1 + i] - phi[1 + k][3 \
+ j][1 + i] - phi[3 + k][1 + j][1 + i] + phi[3 + k][3 + j][1 + i]))/4. - \
(3*(phi[1 + k][1 + j][2 + i] - phi[1 + k][3 + j][2 + i] - phi[3 + k][1 + j][2 \
+ i] + phi[3 + k][3 + j][2 + i]))/4. + (-phi[1 + k][1 + j][i] + phi[1 + k][1 \
+ j][2 + i] + phi[1 + k][3 + j][i] - phi[1 + k][3 + j][2 + i] + phi[3 + k][1 \
+ j][i] - phi[3 + k][1 + j][2 + i] - phi[3 + k][3 + j][i] + phi[3 + k][3 + \
j][2 + i])/4. + (-phi[1 + k][1 + j][1 + i] + phi[1 + k][1 + j][3 + i] + phi[1 \
+ k][3 + j][1 + i] - phi[1 + k][3 + j][3 + i] + phi[3 + k][1 + j][1 + i] - \
phi[3 + k][1 + j][3 + i] - phi[3 + k][3 + j][1 + i] + phi[3 + k][3 + j][3 + \
i])/8.\"\>"},
          {"\<\"-phi[k][j][1 + i] + phi[k][j][2 + i] + phi[k][2 + j][1 + i] - \
phi[k][2 + j][2 + i] - phi[1 + k][j][i] - 2*phi[1 + k][j][1 + i] + 2*phi[1 + \
k][j][2 + i] + phi[1 + k][j][3 + i] - 12*phi[1 + k][1 + j][1 + i] + 12*phi[1 \
+ k][1 + j][2 + i] - 3*(-phi[1 + k][1 + j][i] + phi[1 + k][1 + j][2 + i]) - \
3*(-phi[1 + k][1 + j][1 + i] + phi[1 + k][1 + j][3 + i]) + phi[1 + k][2 + \
j][i] + 14*phi[1 + k][2 + j][1 + i] - 4*(-phi[1 + k][j][1 + i] + phi[1 + k][2 \
+ j][1 + i]) - 14*phi[1 + k][2 + j][2 + i] + 4*(-phi[1 + k][j][2 + i] + phi[1 \
+ k][2 + j][2 + i]) + 3*(-phi[1 + k][2 + j][i] + phi[1 + k][2 + j][2 + i]) - \
phi[1 + k][2 + j][3 + i] + 3*(-phi[1 + k][2 + j][1 + i] + phi[1 + k][2 + j][3 \
+ i]) - 2*(-phi[1 + k][1 + j][1 + i] + phi[1 + k][3 + j][1 + i]) + (-phi[1 + \
k][1 + j][i] + phi[1 + k][1 + j][2 + i] + phi[1 + k][3 + j][i] - phi[1 + k][3 \
+ j][2 + i])/2. + 2*(-phi[1 + k][1 + j][2 + i] + phi[1 + k][3 + j][2 + i]) + \
(-phi[1 + k][1 + j][1 + i] + phi[1 + k][1 + j][3 + i] + phi[1 + k][3 + j][1 + \
i] - phi[1 + k][3 + j][3 + i])/2. + phi[2 + k][j][i] + 2*phi[2 + k][j][1 + i] \
- 2*phi[2 + k][j][2 + i] - phi[2 + k][j][3 + i] + 12*phi[2 + k][1 + j][1 + i] \
- 3*(-phi[k][1 + j][1 + i] + phi[2 + k][1 + j][1 + i]) - 12*phi[2 + k][1 + \
j][2 + i] + 3*(-phi[k][1 + j][2 + i] + phi[2 + k][1 + j][2 + i]) + 3*(-phi[2 \
+ k][1 + j][i] + phi[2 + k][1 + j][2 + i]) - (3*(phi[k][1 + j][i] - phi[k][1 \
+ j][2 + i] - phi[2 + k][1 + j][i] + phi[2 + k][1 + j][2 + i]))/4. + \
3*(-phi[2 + k][1 + j][1 + i] + phi[2 + k][1 + j][3 + i]) - (3*(phi[k][1 + \
j][1 + i] - phi[k][1 + j][3 + i] - phi[2 + k][1 + j][1 + i] + phi[2 + k][1 + \
j][3 + i]))/4. - phi[2 + k][2 + j][i] - 14*phi[2 + k][2 + j][1 + i] + \
3*(-phi[k][2 + j][1 + i] + phi[2 + k][2 + j][1 + i]) + 4*(-phi[2 + k][j][1 + \
i] + phi[2 + k][2 + j][1 + i]) + (phi[k][j][i] - phi[k][j][2 + i] - phi[k][2 \
+ j][i] + phi[k][2 + j][2 + i] - phi[2 + k][j][i] + phi[2 + k][j][2 + i] + \
phi[2 + k][2 + j][i] - phi[2 + k][2 + j][2 + i])/4. + 14*phi[2 + k][2 + j][2 \
+ i] - 3*(-phi[k][2 + j][2 + i] + phi[2 + k][2 + j][2 + i]) - 4*(-phi[2 + \
k][j][2 + i] + phi[2 + k][2 + j][2 + i]) - 3*(-phi[2 + k][2 + j][i] + phi[2 + \
k][2 + j][2 + i]) + (3*(phi[k][2 + j][i] - phi[k][2 + j][2 + i] - phi[2 + \
k][2 + j][i] + phi[2 + k][2 + j][2 + i]))/4. + (phi[k][j][1 + i] - \
phi[k][j][3 + i] - phi[k][2 + j][1 + i] + phi[k][2 + j][3 + i] - phi[2 + \
k][j][1 + i] + phi[2 + k][j][3 + i] + phi[2 + k][2 + j][1 + i] - phi[2 + k][2 \
+ j][3 + i])/4. + phi[2 + k][2 + j][3 + i] - 3*(-phi[2 + k][2 + j][1 + i] + \
phi[2 + k][2 + j][3 + i]) + (3*(phi[k][2 + j][1 + i] - phi[k][2 + j][3 + i] - \
phi[2 + k][2 + j][1 + i] + phi[2 + k][2 + j][3 + i]))/4. + (-phi[k][1 + j][1 \
+ i] + phi[k][3 + j][1 + i] + phi[2 + k][1 + j][1 + i] - phi[2 + k][3 + j][1 \
+ i])/2. + 2*(-phi[2 + k][1 + j][1 + i] + phi[2 + k][3 + j][1 + i]) + \
(phi[k][1 + j][i] - phi[k][1 + j][2 + i] - phi[k][3 + j][i] + phi[k][3 + j][2 \
+ i] - phi[2 + k][1 + j][i] + phi[2 + k][1 + j][2 + i] + phi[2 + k][3 + j][i] \
- phi[2 + k][3 + j][2 + i])/8. - 2*(-phi[2 + k][1 + j][2 + i] + phi[2 + k][3 \
+ j][2 + i]) + (phi[k][1 + j][2 + i] - phi[k][3 + j][2 + i] - phi[2 + k][1 + \
j][2 + i] + phi[2 + k][3 + j][2 + i])/2. + (phi[2 + k][1 + j][i] - phi[2 + \
k][1 + j][2 + i] - phi[2 + k][3 + j][i] + phi[2 + k][3 + j][2 + i])/2. + \
(phi[k][1 + j][1 + i] - phi[k][1 + j][3 + i] - phi[k][3 + j][1 + i] + \
phi[k][3 + j][3 + i] - phi[2 + k][1 + j][1 + i] + phi[2 + k][1 + j][3 + i] + \
phi[2 + k][3 + j][1 + i] - phi[2 + k][3 + j][3 + i])/8. + (phi[2 + k][1 + \
j][1 + i] - phi[2 + k][1 + j][3 + i] - phi[2 + k][3 + j][1 + i] + phi[2 + \
k][3 + j][3 + i])/2. + phi[3 + k][j][1 + i] - phi[3 + k][j][2 + i] - \
3*(-phi[1 + k][1 + j][1 + i] + phi[3 + k][1 + j][1 + i]) + 3*(-phi[1 + k][1 + \
j][2 + i] + phi[3 + k][1 + j][2 + i]) - (3*(phi[1 + k][1 + j][i] - phi[1 + \
k][1 + j][2 + i] - phi[3 + k][1 + j][i] + phi[3 + k][1 + j][2 + i]))/4. - \
(3*(phi[1 + k][1 + j][1 + i] - phi[1 + k][1 + j][3 + i] - phi[3 + k][1 + j][1 \
+ i] + phi[3 + k][1 + j][3 + i]))/4. - phi[3 + k][2 + j][1 + i] + 3*(-phi[1 + \
k][2 + j][1 + i] + phi[3 + k][2 + j][1 + i]) + (phi[1 + k][j][i] - phi[1 + \
k][j][2 + i] - phi[1 + k][2 + j][i] + phi[1 + k][2 + j][2 + i] - phi[3 + \
k][j][i] + phi[3 + k][j][2 + i] + phi[3 + k][2 + j][i] - phi[3 + k][2 + j][2 \
+ i])/4. + phi[3 + k][2 + j][2 + i] - 3*(-phi[1 + k][2 + j][2 + i] + phi[3 + \
k][2 + j][2 + i]) + (3*(phi[1 + k][2 + j][i] - phi[1 + k][2 + j][2 + i] - \
phi[3 + k][2 + j][i] + phi[3 + k][2 + j][2 + i]))/4. + (phi[1 + k][j][1 + i] \
- phi[1 + k][j][3 + i] - phi[1 + k][2 + j][1 + i] + phi[1 + k][2 + j][3 + i] \
- phi[3 + k][j][1 + i] + phi[3 + k][j][3 + i] + phi[3 + k][2 + j][1 + i] - \
phi[3 + k][2 + j][3 + i])/4. + (3*(phi[1 + k][2 + j][1 + i] - phi[1 + k][2 + \
j][3 + i] - phi[3 + k][2 + j][1 + i] + phi[3 + k][2 + j][3 + i]))/4. + \
(-phi[1 + k][1 + j][1 + i] + phi[1 + k][3 + j][1 + i] + phi[3 + k][1 + j][1 + \
i] - phi[3 + k][3 + j][1 + i])/2. + (phi[1 + k][1 + j][i] - phi[1 + k][1 + \
j][2 + i] - phi[1 + k][3 + j][i] + phi[1 + k][3 + j][2 + i] - phi[3 + k][1 + \
j][i] + phi[3 + k][1 + j][2 + i] + phi[3 + k][3 + j][i] - phi[3 + k][3 + j][2 \
+ i])/8. + (phi[1 + k][1 + j][2 + i] - phi[1 + k][3 + j][2 + i] - phi[3 + \
k][1 + j][2 + i] + phi[3 + k][3 + j][2 + i])/2. + (phi[1 + k][1 + j][1 + i] - \
phi[1 + k][1 + j][3 + i] - phi[1 + k][3 + j][1 + i] + phi[1 + k][3 + j][3 + \
i] - phi[3 + k][1 + j][1 + i] + phi[3 + k][1 + j][3 + i] + phi[3 + k][3 + \
j][1 + i] - phi[3 + k][3 + j][3 + i])/8.\"\>"},
          {"\<\"-phi[k][1 + j][1 + i] + phi[k][2 + j][1 + i] - phi[1 + \
k][j][1 + i] + 2*phi[1 + k][1 + j][1 + i] - 2*phi[1 + k][2 + j][1 + i] + \
phi[1 + k][3 + j][1 + i] + phi[2 + k][j][1 + i] - 2*phi[2 + k][1 + j][1 + i] \
+ 2*phi[2 + k][2 + j][1 + i] + (phi[k][j][1 + i] - phi[k][2 + j][1 + i] - \
phi[2 + k][j][1 + i] + phi[2 + k][2 + j][1 + i])/4. - phi[2 + k][3 + j][1 + \
i] + (phi[k][1 + j][1 + i] - phi[k][3 + j][1 + i] - phi[2 + k][1 + j][1 + i] \
+ phi[2 + k][3 + j][1 + i])/4. + phi[3 + k][1 + j][1 + i] - phi[3 + k][2 + \
j][1 + i] + (phi[1 + k][j][1 + i] - phi[1 + k][2 + j][1 + i] - phi[3 + \
k][j][1 + i] + phi[3 + k][2 + j][1 + i])/4. + (phi[1 + k][1 + j][1 + i] - \
phi[1 + k][3 + j][1 + i] - phi[3 + k][1 + j][1 + i] + phi[3 + k][3 + j][1 + \
i])/4.\"\>"},
          {"\<\"2*(-phi[1 + k][1 + j][i] + phi[1 + k][1 + j][2 + i]) - \
2*(-phi[1 + k][2 + j][i] + phi[1 + k][2 + j][2 + i]) + (phi[1 + k][j][i] - \
phi[1 + k][j][2 + i] - phi[1 + k][2 + j][i] + phi[1 + k][2 + j][2 + i])/2. + \
(phi[1 + k][1 + j][i] - phi[1 + k][1 + j][2 + i] - phi[1 + k][3 + j][i] + \
phi[1 + k][3 + j][2 + i])/2. - 2*(-phi[2 + k][1 + j][i] + phi[2 + k][1 + j][2 \
+ i]) + (phi[k][1 + j][i] - phi[k][1 + j][2 + i] - phi[2 + k][1 + j][i] + \
phi[2 + k][1 + j][2 + i])/2. + (-phi[k][2 + j][i] + phi[k][2 + j][2 + i] + \
phi[2 + k][2 + j][i] - phi[2 + k][2 + j][2 + i])/2. + (-phi[2 + k][j][i] + \
phi[2 + k][j][2 + i] + phi[2 + k][2 + j][i] - phi[2 + k][2 + j][2 + i])/2. + \
2*(-phi[2 + k][2 + j][i] + phi[2 + k][2 + j][2 + i]) + (-phi[k][j][i] + \
phi[k][j][2 + i] + phi[k][2 + j][i] - phi[k][2 + j][2 + i] + phi[2 + k][j][i] \
- phi[2 + k][j][2 + i] - phi[2 + k][2 + j][i] + phi[2 + k][2 + j][2 + i])/8. \
+ (-phi[2 + k][1 + j][i] + phi[2 + k][1 + j][2 + i] + phi[2 + k][3 + j][i] - \
phi[2 + k][3 + j][2 + i])/2. + (-phi[k][1 + j][i] + phi[k][1 + j][2 + i] + \
phi[k][3 + j][i] - phi[k][3 + j][2 + i] + phi[2 + k][1 + j][i] - phi[2 + k][1 \
+ j][2 + i] - phi[2 + k][3 + j][i] + phi[2 + k][3 + j][2 + i])/8. + (phi[1 + \
k][1 + j][i] - phi[1 + k][1 + j][2 + i] - phi[3 + k][1 + j][i] + phi[3 + k][1 \
+ j][2 + i])/2. + (-phi[1 + k][2 + j][i] + phi[1 + k][2 + j][2 + i] + phi[3 + \
k][2 + j][i] - phi[3 + k][2 + j][2 + i])/2. + (-phi[1 + k][j][i] + phi[1 + \
k][j][2 + i] + phi[1 + k][2 + j][i] - phi[1 + k][2 + j][2 + i] + phi[3 + \
k][j][i] - phi[3 + k][j][2 + i] - phi[3 + k][2 + j][i] + phi[3 + k][2 + j][2 \
+ i])/8. + (-phi[1 + k][1 + j][i] + phi[1 + k][1 + j][2 + i] + phi[1 + k][3 + \
j][i] - phi[1 + k][3 + j][2 + i] + phi[3 + k][1 + j][i] - phi[3 + k][1 + j][2 \
+ i] - phi[3 + k][3 + j][i] + phi[3 + k][3 + j][2 + i])/8.\"\>"},
          {"\<\"-phi[k][1 + j][i] + phi[k][1 + j][2 + i] + phi[k][2 + j][i] - \
phi[k][2 + j][2 + i] - phi[1 + k][j][i] + phi[1 + k][j][2 + i] - 2*phi[1 + \
k][1 + j][i] - 12*phi[1 + k][1 + j][1 + i] + 14*phi[1 + k][1 + j][2 + i] - \
4*(-phi[1 + k][1 + j][i] + phi[1 + k][1 + j][2 + i]) - 2*(-phi[1 + k][1 + \
j][1 + i] + phi[1 + k][1 + j][3 + i]) + 2*phi[1 + k][2 + j][i] + 12*phi[1 + \
k][2 + j][1 + i] - 3*(-phi[1 + k][j][1 + i] + phi[1 + k][2 + j][1 + i]) - \
14*phi[1 + k][2 + j][2 + i] + 3*(-phi[1 + k][j][2 + i] + phi[1 + k][2 + j][2 \
+ i]) + 4*(-phi[1 + k][2 + j][i] + phi[1 + k][2 + j][2 + i]) + (-phi[1 + \
k][j][1 + i] + phi[1 + k][j][3 + i] + phi[1 + k][2 + j][1 + i] - phi[1 + k][2 \
+ j][3 + i])/2. + 2*(-phi[1 + k][2 + j][1 + i] + phi[1 + k][2 + j][3 + i]) + \
phi[1 + k][3 + j][i] - 3*(-phi[1 + k][1 + j][1 + i] + phi[1 + k][3 + j][1 + \
i]) - phi[1 + k][3 + j][2 + i] + 3*(-phi[1 + k][1 + j][2 + i] + phi[1 + k][3 \
+ j][2 + i]) + (-phi[1 + k][1 + j][1 + i] + phi[1 + k][1 + j][3 + i] + phi[1 \
+ k][3 + j][1 + i] - phi[1 + k][3 + j][3 + i])/2. + phi[2 + k][j][i] - phi[2 \
+ k][j][2 + i] + 2*phi[2 + k][1 + j][i] + 12*phi[2 + k][1 + j][1 + i] - \
3*(-phi[k][1 + j][1 + i] + phi[2 + k][1 + j][1 + i]) - 14*phi[2 + k][1 + j][2 \
+ i] + 3*(-phi[k][1 + j][2 + i] + phi[2 + k][1 + j][2 + i]) + 4*(-phi[2 + \
k][1 + j][i] + phi[2 + k][1 + j][2 + i]) + (-phi[k][1 + j][1 + i] + phi[k][1 \
+ j][3 + i] + phi[2 + k][1 + j][1 + i] - phi[2 + k][1 + j][3 + i])/2. + \
2*(-phi[2 + k][1 + j][1 + i] + phi[2 + k][1 + j][3 + i]) - 2*phi[2 + k][2 + \
j][i] - 12*phi[2 + k][2 + j][1 + i] + 3*(-phi[k][2 + j][1 + i] + phi[2 + k][2 \
+ j][1 + i]) + 3*(-phi[2 + k][j][1 + i] + phi[2 + k][2 + j][1 + i]) - \
(3*(phi[k][j][1 + i] - phi[k][2 + j][1 + i] - phi[2 + k][j][1 + i] + phi[2 + \
k][2 + j][1 + i]))/4. + (phi[k][j][i] - phi[k][j][2 + i] - phi[k][2 + j][i] + \
phi[k][2 + j][2 + i] - phi[2 + k][j][i] + phi[2 + k][j][2 + i] + phi[2 + k][2 \
+ j][i] - phi[2 + k][2 + j][2 + i])/4. + 14*phi[2 + k][2 + j][2 + i] - \
3*(-phi[k][2 + j][2 + i] + phi[2 + k][2 + j][2 + i]) - 3*(-phi[2 + k][j][2 + \
i] + phi[2 + k][2 + j][2 + i]) + (3*(phi[k][j][2 + i] - phi[k][2 + j][2 + i] \
- phi[2 + k][j][2 + i] + phi[2 + k][2 + j][2 + i]))/4. - 4*(-phi[2 + k][2 + \
j][i] + phi[2 + k][2 + j][2 + i]) + (phi[k][j][1 + i] - phi[k][j][3 + i] - \
phi[k][2 + j][1 + i] + phi[k][2 + j][3 + i] - phi[2 + k][j][1 + i] + phi[2 + \
k][j][3 + i] + phi[2 + k][2 + j][1 + i] - phi[2 + k][2 + j][3 + i])/8. - \
2*(-phi[2 + k][2 + j][1 + i] + phi[2 + k][2 + j][3 + i]) + (phi[k][2 + j][1 + \
i] - phi[k][2 + j][3 + i] - phi[2 + k][2 + j][1 + i] + phi[2 + k][2 + j][3 + \
i])/2. + (phi[2 + k][j][1 + i] - phi[2 + k][j][3 + i] - phi[2 + k][2 + j][1 + \
i] + phi[2 + k][2 + j][3 + i])/2. - phi[2 + k][3 + j][i] + 3*(-phi[2 + k][1 + \
j][1 + i] + phi[2 + k][3 + j][1 + i]) - (3*(phi[k][1 + j][1 + i] - phi[k][3 + \
j][1 + i] - phi[2 + k][1 + j][1 + i] + phi[2 + k][3 + j][1 + i]))/4. + \
(phi[k][1 + j][i] - phi[k][1 + j][2 + i] - phi[k][3 + j][i] + phi[k][3 + j][2 \
+ i] - phi[2 + k][1 + j][i] + phi[2 + k][1 + j][2 + i] + phi[2 + k][3 + j][i] \
- phi[2 + k][3 + j][2 + i])/4. + phi[2 + k][3 + j][2 + i] - 3*(-phi[2 + k][1 \
+ j][2 + i] + phi[2 + k][3 + j][2 + i]) + (3*(phi[k][1 + j][2 + i] - phi[k][3 \
+ j][2 + i] - phi[2 + k][1 + j][2 + i] + phi[2 + k][3 + j][2 + i]))/4. + \
(phi[k][1 + j][1 + i] - phi[k][1 + j][3 + i] - phi[k][3 + j][1 + i] + \
phi[k][3 + j][3 + i] - phi[2 + k][1 + j][1 + i] + phi[2 + k][1 + j][3 + i] + \
phi[2 + k][3 + j][1 + i] - phi[2 + k][3 + j][3 + i])/8. + (phi[2 + k][1 + \
j][1 + i] - phi[2 + k][1 + j][3 + i] - phi[2 + k][3 + j][1 + i] + phi[2 + \
k][3 + j][3 + i])/2. + phi[3 + k][1 + j][i] - 3*(-phi[1 + k][1 + j][1 + i] + \
phi[3 + k][1 + j][1 + i]) - phi[3 + k][1 + j][2 + i] + 3*(-phi[1 + k][1 + \
j][2 + i] + phi[3 + k][1 + j][2 + i]) + (-phi[1 + k][1 + j][1 + i] + phi[1 + \
k][1 + j][3 + i] + phi[3 + k][1 + j][1 + i] - phi[3 + k][1 + j][3 + i])/2. - \
phi[3 + k][2 + j][i] + 3*(-phi[1 + k][2 + j][1 + i] + phi[3 + k][2 + j][1 + \
i]) - (3*(phi[1 + k][j][1 + i] - phi[1 + k][2 + j][1 + i] - phi[3 + k][j][1 + \
i] + phi[3 + k][2 + j][1 + i]))/4. + (phi[1 + k][j][i] - phi[1 + k][j][2 + i] \
- phi[1 + k][2 + j][i] + phi[1 + k][2 + j][2 + i] - phi[3 + k][j][i] + phi[3 \
+ k][j][2 + i] + phi[3 + k][2 + j][i] - phi[3 + k][2 + j][2 + i])/4. + phi[3 \
+ k][2 + j][2 + i] - 3*(-phi[1 + k][2 + j][2 + i] + phi[3 + k][2 + j][2 + i]) \
+ (3*(phi[1 + k][j][2 + i] - phi[1 + k][2 + j][2 + i] - phi[3 + k][j][2 + i] \
+ phi[3 + k][2 + j][2 + i]))/4. + (phi[1 + k][j][1 + i] - phi[1 + k][j][3 + \
i] - phi[1 + k][2 + j][1 + i] + phi[1 + k][2 + j][3 + i] - phi[3 + k][j][1 + \
i] + phi[3 + k][j][3 + i] + phi[3 + k][2 + j][1 + i] - phi[3 + k][2 + j][3 + \
i])/8. + (phi[1 + k][2 + j][1 + i] - phi[1 + k][2 + j][3 + i] - phi[3 + k][2 \
+ j][1 + i] + phi[3 + k][2 + j][3 + i])/2. - (3*(phi[1 + k][1 + j][1 + i] - \
phi[1 + k][3 + j][1 + i] - phi[3 + k][1 + j][1 + i] + phi[3 + k][3 + j][1 + \
i]))/4. + (phi[1 + k][1 + j][i] - phi[1 + k][1 + j][2 + i] - phi[1 + k][3 + \
j][i] + phi[1 + k][3 + j][2 + i] - phi[3 + k][1 + j][i] + phi[3 + k][1 + j][2 \
+ i] + phi[3 + k][3 + j][i] - phi[3 + k][3 + j][2 + i])/4. + (3*(phi[1 + k][1 \
+ j][2 + i] - phi[1 + k][3 + j][2 + i] - phi[3 + k][1 + j][2 + i] + phi[3 + \
k][3 + j][2 + i]))/4. + (phi[1 + k][1 + j][1 + i] - phi[1 + k][1 + j][3 + i] \
- phi[1 + k][3 + j][1 + i] + phi[1 + k][3 + j][3 + i] - phi[3 + k][1 + j][1 + \
i] + phi[3 + k][1 + j][3 + i] + phi[3 + k][3 + j][1 + i] - phi[3 + k][3 + \
j][3 + i])/8.\"\>"},
          {"\<\"8*phi[1 + k][1 + j][1 + i] - 8*phi[1 + k][1 + j][2 + i] + \
2*(-phi[1 + k][1 + j][i] + phi[1 + k][1 + j][2 + i]) + 2*(-phi[1 + k][1 + \
j][1 + i] + phi[1 + k][1 + j][3 + i]) - 8*phi[1 + k][2 + j][1 + i] + \
2*(-phi[1 + k][j][1 + i] + phi[1 + k][2 + j][1 + i]) + 8*phi[1 + k][2 + j][2 \
+ i] - 2*(-phi[1 + k][j][2 + i] + phi[1 + k][2 + j][2 + i]) - 2*(-phi[1 + \
k][2 + j][i] + phi[1 + k][2 + j][2 + i]) + (phi[1 + k][j][i] - phi[1 + \
k][j][2 + i] - phi[1 + k][2 + j][i] + phi[1 + k][2 + j][2 + i])/2. - \
2*(-phi[1 + k][2 + j][1 + i] + phi[1 + k][2 + j][3 + i]) + (phi[1 + k][j][1 + \
i] - phi[1 + k][j][3 + i] - phi[1 + k][2 + j][1 + i] + phi[1 + k][2 + j][3 + \
i])/2. + 2*(-phi[1 + k][1 + j][1 + i] + phi[1 + k][3 + j][1 + i]) - 2*(-phi[1 \
+ k][1 + j][2 + i] + phi[1 + k][3 + j][2 + i]) + (phi[1 + k][1 + j][i] - \
phi[1 + k][1 + j][2 + i] - phi[1 + k][3 + j][i] + phi[1 + k][3 + j][2 + \
i])/2. + (phi[1 + k][1 + j][1 + i] - phi[1 + k][1 + j][3 + i] - phi[1 + k][3 \
+ j][1 + i] + phi[1 + k][3 + j][3 + i])/2. - 8*phi[2 + k][1 + j][1 + i] + \
2*(-phi[k][1 + j][1 + i] + phi[2 + k][1 + j][1 + i]) + 8*phi[2 + k][1 + j][2 \
+ i] - 2*(-phi[k][1 + j][2 + i] + phi[2 + k][1 + j][2 + i]) - 2*(-phi[2 + \
k][1 + j][i] + phi[2 + k][1 + j][2 + i]) + (phi[k][1 + j][i] - phi[k][1 + \
j][2 + i] - phi[2 + k][1 + j][i] + phi[2 + k][1 + j][2 + i])/2. - 2*(-phi[2 + \
k][1 + j][1 + i] + phi[2 + k][1 + j][3 + i]) + (phi[k][1 + j][1 + i] - \
phi[k][1 + j][3 + i] - phi[2 + k][1 + j][1 + i] + phi[2 + k][1 + j][3 + \
i])/2. + 8*phi[2 + k][2 + j][1 + i] - 2*(-phi[k][2 + j][1 + i] + phi[2 + k][2 \
+ j][1 + i]) - 2*(-phi[2 + k][j][1 + i] + phi[2 + k][2 + j][1 + i]) + \
(phi[k][j][1 + i] - phi[k][2 + j][1 + i] - phi[2 + k][j][1 + i] + phi[2 + \
k][2 + j][1 + i])/2. + (-phi[k][j][2 + i] + phi[k][2 + j][2 + i] + phi[2 + \
k][j][2 + i] - phi[2 + k][2 + j][2 + i])/2. + (-phi[k][2 + j][i] + phi[k][2 + \
j][2 + i] + phi[2 + k][2 + j][i] - phi[2 + k][2 + j][2 + i])/2. + (-phi[2 + \
k][j][i] + phi[2 + k][j][2 + i] + phi[2 + k][2 + j][i] - phi[2 + k][2 + j][2 \
+ i])/2. - 8*phi[2 + k][2 + j][2 + i] + 2*(-phi[k][2 + j][2 + i] + phi[2 + \
k][2 + j][2 + i]) + 2*(-phi[2 + k][j][2 + i] + phi[2 + k][2 + j][2 + i]) + \
2*(-phi[2 + k][2 + j][i] + phi[2 + k][2 + j][2 + i]) + (-phi[k][j][i] + \
phi[k][j][2 + i] + phi[k][2 + j][i] - phi[k][2 + j][2 + i] + phi[2 + k][j][i] \
- phi[2 + k][j][2 + i] - phi[2 + k][2 + j][i] + phi[2 + k][2 + j][2 + i])/8. \
+ (-phi[k][2 + j][1 + i] + phi[k][2 + j][3 + i] + phi[2 + k][2 + j][1 + i] - \
phi[2 + k][2 + j][3 + i])/2. + (-phi[2 + k][j][1 + i] + phi[2 + k][j][3 + i] \
+ phi[2 + k][2 + j][1 + i] - phi[2 + k][2 + j][3 + i])/2. + 2*(-phi[2 + k][2 \
+ j][1 + i] + phi[2 + k][2 + j][3 + i]) + (-phi[k][j][1 + i] + phi[k][j][3 + \
i] + phi[k][2 + j][1 + i] - phi[k][2 + j][3 + i] + phi[2 + k][j][1 + i] - \
phi[2 + k][j][3 + i] - phi[2 + k][2 + j][1 + i] + phi[2 + k][2 + j][3 + \
i])/8. - 2*(-phi[2 + k][1 + j][1 + i] + phi[2 + k][3 + j][1 + i]) + (phi[k][1 \
+ j][1 + i] - phi[k][3 + j][1 + i] - phi[2 + k][1 + j][1 + i] + phi[2 + k][3 \
+ j][1 + i])/2. + (-phi[k][1 + j][2 + i] + phi[k][3 + j][2 + i] + phi[2 + \
k][1 + j][2 + i] - phi[2 + k][3 + j][2 + i])/2. + (-phi[2 + k][1 + j][i] + \
phi[2 + k][1 + j][2 + i] + phi[2 + k][3 + j][i] - phi[2 + k][3 + j][2 + \
i])/2. + 2*(-phi[2 + k][1 + j][2 + i] + phi[2 + k][3 + j][2 + i]) + \
(-phi[k][1 + j][i] + phi[k][1 + j][2 + i] + phi[k][3 + j][i] - phi[k][3 + \
j][2 + i] + phi[2 + k][1 + j][i] - phi[2 + k][1 + j][2 + i] - phi[2 + k][3 + \
j][i] + phi[2 + k][3 + j][2 + i])/8. + (-phi[2 + k][1 + j][1 + i] + phi[2 + \
k][1 + j][3 + i] + phi[2 + k][3 + j][1 + i] - phi[2 + k][3 + j][3 + i])/2. + \
(-phi[k][1 + j][1 + i] + phi[k][1 + j][3 + i] + phi[k][3 + j][1 + i] - \
phi[k][3 + j][3 + i] + phi[2 + k][1 + j][1 + i] - phi[2 + k][1 + j][3 + i] - \
phi[2 + k][3 + j][1 + i] + phi[2 + k][3 + j][3 + i])/8. + 2*(-phi[1 + k][1 + \
j][1 + i] + phi[3 + k][1 + j][1 + i]) - 2*(-phi[1 + k][1 + j][2 + i] + phi[3 \
+ k][1 + j][2 + i]) + (phi[1 + k][1 + j][i] - phi[1 + k][1 + j][2 + i] - \
phi[3 + k][1 + j][i] + phi[3 + k][1 + j][2 + i])/2. + (phi[1 + k][1 + j][1 + \
i] - phi[1 + k][1 + j][3 + i] - phi[3 + k][1 + j][1 + i] + phi[3 + k][1 + \
j][3 + i])/2. - 2*(-phi[1 + k][2 + j][1 + i] + phi[3 + k][2 + j][1 + i]) + \
(phi[1 + k][j][1 + i] - phi[1 + k][2 + j][1 + i] - phi[3 + k][j][1 + i] + \
phi[3 + k][2 + j][1 + i])/2. + (-phi[1 + k][j][2 + i] + phi[1 + k][2 + j][2 + \
i] + phi[3 + k][j][2 + i] - phi[3 + k][2 + j][2 + i])/2. + (-phi[1 + k][2 + \
j][i] + phi[1 + k][2 + j][2 + i] + phi[3 + k][2 + j][i] - phi[3 + k][2 + j][2 \
+ i])/2. + 2*(-phi[1 + k][2 + j][2 + i] + phi[3 + k][2 + j][2 + i]) + (-phi[1 \
+ k][j][i] + phi[1 + k][j][2 + i] + phi[1 + k][2 + j][i] - phi[1 + k][2 + \
j][2 + i] + phi[3 + k][j][i] - phi[3 + k][j][2 + i] - phi[3 + k][2 + j][i] + \
phi[3 + k][2 + j][2 + i])/8. + (-phi[1 + k][2 + j][1 + i] + phi[1 + k][2 + \
j][3 + i] + phi[3 + k][2 + j][1 + i] - phi[3 + k][2 + j][3 + i])/2. + (-phi[1 \
+ k][j][1 + i] + phi[1 + k][j][3 + i] + phi[1 + k][2 + j][1 + i] - phi[1 + \
k][2 + j][3 + i] + phi[3 + k][j][1 + i] - phi[3 + k][j][3 + i] - phi[3 + k][2 \
+ j][1 + i] + phi[3 + k][2 + j][3 + i])/8. + (phi[1 + k][1 + j][1 + i] - \
phi[1 + k][3 + j][1 + i] - phi[3 + k][1 + j][1 + i] + phi[3 + k][3 + j][1 + \
i])/2. + (-phi[1 + k][1 + j][2 + i] + phi[1 + k][3 + j][2 + i] + phi[3 + k][1 \
+ j][2 + i] - phi[3 + k][3 + j][2 + i])/2. + (-phi[1 + k][1 + j][i] + phi[1 + \
k][1 + j][2 + i] + phi[1 + k][3 + j][i] - phi[1 + k][3 + j][2 + i] + phi[3 + \
k][1 + j][i] - phi[3 + k][1 + j][2 + i] - phi[3 + k][3 + j][i] + phi[3 + k][3 \
+ j][2 + i])/8. + (-phi[1 + k][1 + j][1 + i] + phi[1 + k][1 + j][3 + i] + \
phi[1 + k][3 + j][1 + i] - phi[1 + k][3 + j][3 + i] + phi[3 + k][1 + j][1 + \
i] - phi[3 + k][1 + j][3 + i] - phi[3 + k][3 + j][1 + i] + phi[3 + k][3 + \
j][3 + i])/8.\"\>"}
          },
        RowSpacings->1,
        ColumnSpacings->3,
        RowAlignments->Baseline,
        ColumnAlignments->{Left}],
      TableForm[ {"phi[1 + k][1 + j][1 + i]", 
        "(-phi[1 + k][1 + j][i] + phi[1 + k][1 + j][2 + i])/2.", 
        "phi[1 + k][1 + j][i] - 3*phi[1 + k][1 + j][1 + i] + 2*phi[1 + k][1 + \
j][2 + i] + (phi[1 + k][1 + j][1 + i] - phi[1 + k][1 + j][3 + i])/2.", 
        "2*phi[1 + k][1 + j][1 + i] - 2*phi[1 + k][1 + j][2 + i] + (-phi[1 + \
k][1 + j][i] + phi[1 + k][1 + j][2 + i])/2. + (-phi[1 + k][1 + j][1 + i] + \
phi[1 + k][1 + j][3 + i])/2.", 
        "(-phi[1 + k][j][1 + i] + phi[1 + k][2 + j][1 + i])/2.", 
        "(phi[1 + k][j][i] - phi[1 + k][j][2 + i] - phi[1 + k][2 + j][i] + \
phi[1 + k][2 + j][2 + i])/4.", 
        "(-3*(-phi[1 + k][j][1 + i] + phi[1 + k][2 + j][1 + i]))/2. + (-phi[1 \
+ k][j][i] + phi[1 + k][j][2 + i] + phi[1 + k][2 + j][i] - phi[1 + k][2 + \
j][2 + i])/2. + (3*(-phi[1 + k][j][2 + i] + phi[1 + k][2 + j][2 + i]))/2. + \
(-phi[1 + k][j][1 + i] + phi[1 + k][j][3 + i] + phi[1 + k][2 + j][1 + i] - \
phi[1 + k][2 + j][3 + i])/4.", 
        "-phi[1 + k][j][1 + i] + phi[1 + k][j][2 + i] + phi[1 + k][2 + j][1 + \
i] - phi[1 + k][2 + j][2 + i] + (phi[1 + k][j][i] - phi[1 + k][j][2 + i] - \
phi[1 + k][2 + j][i] + phi[1 + k][2 + j][2 + i])/4. + (phi[1 + k][j][1 + i] - \
phi[1 + k][j][3 + i] - phi[1 + k][2 + j][1 + i] + phi[1 + k][2 + j][3 + \
i])/4.", "phi[1 + k][j][1 + i] - 3*phi[1 + k][1 + j][1 + i] + 2*phi[1 + k][2 \
+ j][1 + i] + (phi[1 + k][1 + j][1 + i] - phi[1 + k][3 + j][1 + i])/2.", 
        "(-3*(-phi[1 + k][1 + j][i] + phi[1 + k][1 + j][2 + i]))/2. + (-phi[1 \
+ k][j][i] + phi[1 + k][j][2 + i] + phi[1 + k][2 + j][i] - phi[1 + k][2 + \
j][2 + i])/2. + (3*(-phi[1 + k][2 + j][i] + phi[1 + k][2 + j][2 + i]))/2. + \
(-phi[1 + k][1 + j][i] + phi[1 + k][1 + j][2 + i] + phi[1 + k][3 + j][i] - \
phi[1 + k][3 + j][2 + i])/4.", 
        "phi[1 + k][j][i] - phi[1 + k][j][2 + i] + 9*phi[1 + k][1 + j][1 + i] \
- 9*phi[1 + k][1 + j][2 + i] + 3*(-phi[1 + k][1 + j][i] + phi[1 + k][1 + j][2 \
+ i]) + (3*(-phi[1 + k][1 + j][1 + i] + phi[1 + k][1 + j][3 + i]))/2. - phi[1 \
+ k][2 + j][i] - 9*phi[1 + k][2 + j][1 + i] + 3*(-phi[1 + k][j][1 + i] + \
phi[1 + k][2 + j][1 + i]) + 10*phi[1 + k][2 + j][2 + i] - 3*(-phi[1 + k][j][2 \
+ i] + phi[1 + k][2 + j][2 + i]) - 3*(-phi[1 + k][2 + j][i] + phi[1 + k][2 + \
j][2 + i]) - (3*(-phi[1 + k][2 + j][1 + i] + phi[1 + k][2 + j][3 + i]))/2. + \
(phi[1 + k][j][1 + i] - phi[1 + k][j][3 + i] - phi[1 + k][2 + j][1 + i] + \
phi[1 + k][2 + j][3 + i])/2. + (3*(-phi[1 + k][1 + j][1 + i] + phi[1 + k][3 + \
j][1 + i]))/2. - (3*(-phi[1 + k][1 + j][2 + i] + phi[1 + k][3 + j][2 + \
i]))/2. + (phi[1 + k][1 + j][i] - phi[1 + k][1 + j][2 + i] - phi[1 + k][3 + \
j][i] + phi[1 + k][3 + j][2 + i])/2. + (phi[1 + k][1 + j][1 + i] - phi[1 + \
k][1 + j][3 + i] - phi[1 + k][3 + j][1 + i] + phi[1 + k][3 + j][3 + i])/4.", 
        "-5*phi[1 + k][1 + j][1 + i] + 5*phi[1 + k][1 + j][2 + i] - \
(3*(-phi[1 + k][1 + j][i] + phi[1 + k][1 + j][2 + i]))/2. - (3*(-phi[1 + k][1 \
+ j][1 + i] + phi[1 + k][1 + j][3 + i]))/2. + 6*phi[1 + k][2 + j][1 + i] - \
2*(-phi[1 + k][j][1 + i] + phi[1 + k][2 + j][1 + i]) + (-phi[1 + k][j][i] + \
phi[1 + k][j][2 + i] + phi[1 + k][2 + j][i] - phi[1 + k][2 + j][2 + i])/2. - \
6*phi[1 + k][2 + j][2 + i] + 2*(-phi[1 + k][j][2 + i] + phi[1 + k][2 + j][2 + \
i]) + (3*(-phi[1 + k][2 + j][i] + phi[1 + k][2 + j][2 + i]))/2. + (-phi[1 + \
k][j][1 + i] + phi[1 + k][j][3 + i] + phi[1 + k][2 + j][1 + i] - phi[1 + k][2 \
+ j][3 + i])/2. + (3*(-phi[1 + k][2 + j][1 + i] + phi[1 + k][2 + j][3 + \
i]))/2. - phi[1 + k][3 + j][1 + i] + (-phi[1 + k][1 + j][i] + phi[1 + k][1 + \
j][2 + i] + phi[1 + k][3 + j][i] - phi[1 + k][3 + j][2 + i])/4. + phi[1 + \
k][3 + j][2 + i] + (-phi[1 + k][1 + j][1 + i] + phi[1 + k][1 + j][3 + i] + \
phi[1 + k][3 + j][1 + i] - phi[1 + k][3 + j][3 + i])/4.", 
        "2*phi[1 + k][1 + j][1 + i] - 2*phi[1 + k][2 + j][1 + i] + (-phi[1 + \
k][j][1 + i] + phi[1 + k][2 + j][1 + i])/2. + (-phi[1 + k][1 + j][1 + i] + \
phi[1 + k][3 + j][1 + i])/2.", 
        "-phi[1 + k][1 + j][i] + phi[1 + k][1 + j][2 + i] + phi[1 + k][2 + \
j][i] - phi[1 + k][2 + j][2 + i] + (phi[1 + k][j][i] - phi[1 + k][j][2 + i] - \
phi[1 + k][2 + j][i] + phi[1 + k][2 + j][2 + i])/4. + (phi[1 + k][1 + j][i] - \
phi[1 + k][1 + j][2 + i] - phi[1 + k][3 + j][i] + phi[1 + k][3 + j][2 + \
i])/4.", "-5*phi[1 + k][1 + j][1 + i] + 6*phi[1 + k][1 + j][2 + i] - \
2*(-phi[1 + k][1 + j][i] + phi[1 + k][1 + j][2 + i]) - phi[1 + k][1 + j][3 + \
i] + 5*phi[1 + k][2 + j][1 + i] - (3*(-phi[1 + k][j][1 + i] + phi[1 + k][2 + \
j][1 + i]))/2. + (-phi[1 + k][j][i] + phi[1 + k][j][2 + i] + phi[1 + k][2 + \
j][i] - phi[1 + k][2 + j][2 + i])/2. - 6*phi[1 + k][2 + j][2 + i] + \
(3*(-phi[1 + k][j][2 + i] + phi[1 + k][2 + j][2 + i]))/2. + 2*(-phi[1 + k][2 \
+ j][i] + phi[1 + k][2 + j][2 + i]) + (-phi[1 + k][j][1 + i] + phi[1 + \
k][j][3 + i] + phi[1 + k][2 + j][1 + i] - phi[1 + k][2 + j][3 + i])/4. + \
phi[1 + k][2 + j][3 + i] - (3*(-phi[1 + k][1 + j][1 + i] + phi[1 + k][3 + \
j][1 + i]))/2. + (-phi[1 + k][1 + j][i] + phi[1 + k][1 + j][2 + i] + phi[1 + \
k][3 + j][i] - phi[1 + k][3 + j][2 + i])/2. + (3*(-phi[1 + k][1 + j][2 + i] + \
phi[1 + k][3 + j][2 + i]))/2. + (-phi[1 + k][1 + j][1 + i] + phi[1 + k][1 + \
j][3 + i] + phi[1 + k][3 + j][1 + i] - phi[1 + k][3 + j][3 + i])/4.", 
        "-phi[1 + k][j][1 + i] + phi[1 + k][j][2 + i] - phi[1 + k][1 + j][i] \
+ 2*phi[1 + k][1 + j][1 + i] - 2*phi[1 + k][1 + j][2 + i] + phi[1 + k][1 + \
j][3 + i] + phi[1 + k][2 + j][i] - 2*phi[1 + k][2 + j][1 + i] + 2*phi[1 + \
k][2 + j][2 + i] + (phi[1 + k][j][i] - phi[1 + k][j][2 + i] - phi[1 + k][2 + \
j][i] + phi[1 + k][2 + j][2 + i])/4. - phi[1 + k][2 + j][3 + i] + (phi[1 + \
k][j][1 + i] - phi[1 + k][j][3 + i] - phi[1 + k][2 + j][1 + i] + phi[1 + k][2 \
+ j][3 + i])/4. + phi[1 + k][3 + j][1 + i] - phi[1 + k][3 + j][2 + i] + \
(phi[1 + k][1 + j][i] - phi[1 + k][1 + j][2 + i] - phi[1 + k][3 + j][i] + \
phi[1 + k][3 + j][2 + i])/4. + (phi[1 + k][1 + j][1 + i] - phi[1 + k][1 + \
j][3 + i] - phi[1 + k][3 + j][1 + i] + phi[1 + k][3 + j][3 + i])/4.", 
        "(-phi[k][1 + j][1 + i] + phi[2 + k][1 + j][1 + i])/2.", 
        "(phi[k][1 + j][i] - phi[k][1 + j][2 + i] - phi[2 + k][1 + j][i] + \
phi[2 + k][1 + j][2 + i])/4.", 
        "(-3*(-phi[k][1 + j][1 + i] + phi[2 + k][1 + j][1 + i]))/2. + \
(-phi[k][1 + j][i] + phi[k][1 + j][2 + i] + phi[2 + k][1 + j][i] - phi[2 + \
k][1 + j][2 + i])/2. + (3*(-phi[k][1 + j][2 + i] + phi[2 + k][1 + j][2 + \
i]))/2. + (-phi[k][1 + j][1 + i] + phi[k][1 + j][3 + i] + phi[2 + k][1 + j][1 \
+ i] - phi[2 + k][1 + j][3 + i])/4.", 
        "-phi[k][1 + j][1 + i] + phi[k][1 + j][2 + i] + phi[2 + k][1 + j][1 + \
i] - phi[2 + k][1 + j][2 + i] + (phi[k][1 + j][i] - phi[k][1 + j][2 + i] - \
phi[2 + k][1 + j][i] + phi[2 + k][1 + j][2 + i])/4. + (phi[k][1 + j][1 + i] - \
phi[k][1 + j][3 + i] - phi[2 + k][1 + j][1 + i] + phi[2 + k][1 + j][3 + \
i])/4.", "(phi[k][j][1 + i] - phi[k][2 + j][1 + i] - phi[2 + k][j][1 + i] + \
phi[2 + k][2 + j][1 + i])/4.", 
        "(-phi[k][j][i] + phi[k][j][2 + i] + phi[k][2 + j][i] - phi[k][2 + \
j][2 + i] + phi[2 + k][j][i] - phi[2 + k][j][2 + i] - phi[2 + k][2 + j][i] + \
phi[2 + k][2 + j][2 + i])/8.", 
        "(-3*(phi[k][j][1 + i] - phi[k][2 + j][1 + i] - phi[2 + k][j][1 + i] \
+ phi[2 + k][2 + j][1 + i]))/4. + (phi[k][j][i] - phi[k][j][2 + i] - phi[k][2 \
+ j][i] + phi[k][2 + j][2 + i] - phi[2 + k][j][i] + phi[2 + k][j][2 + i] + \
phi[2 + k][2 + j][i] - phi[2 + k][2 + j][2 + i])/4. + (3*(phi[k][j][2 + i] - \
phi[k][2 + j][2 + i] - phi[2 + k][j][2 + i] + phi[2 + k][2 + j][2 + i]))/4. + \
(phi[k][j][1 + i] - phi[k][j][3 + i] - phi[k][2 + j][1 + i] + phi[k][2 + j][3 \
+ i] - phi[2 + k][j][1 + i] + phi[2 + k][j][3 + i] + phi[2 + k][2 + j][1 + i] \
- phi[2 + k][2 + j][3 + i])/8.", 
        "(phi[k][j][1 + i] - phi[k][2 + j][1 + i] - phi[2 + k][j][1 + i] + \
phi[2 + k][2 + j][1 + i])/2. + (-phi[k][j][2 + i] + phi[k][2 + j][2 + i] + \
phi[2 + k][j][2 + i] - phi[2 + k][2 + j][2 + i])/2. + (-phi[k][j][i] + \
phi[k][j][2 + i] + phi[k][2 + j][i] - phi[k][2 + j][2 + i] + phi[2 + k][j][i] \
- phi[2 + k][j][2 + i] - phi[2 + k][2 + j][i] + phi[2 + k][2 + j][2 + i])/8. \
+ (-phi[k][j][1 + i] + phi[k][j][3 + i] + phi[k][2 + j][1 + i] - phi[k][2 + \
j][3 + i] + phi[2 + k][j][1 + i] - phi[2 + k][j][3 + i] - phi[2 + k][2 + j][1 \
+ i] + phi[2 + k][2 + j][3 + i])/8.", 
        "(-3*(-phi[k][1 + j][1 + i] + phi[2 + k][1 + j][1 + i]))/2. + \
(-phi[k][j][1 + i] + phi[k][2 + j][1 + i] + phi[2 + k][j][1 + i] - phi[2 + \
k][2 + j][1 + i])/2. + (3*(-phi[k][2 + j][1 + i] + phi[2 + k][2 + j][1 + \
i]))/2. + (-phi[k][1 + j][1 + i] + phi[k][3 + j][1 + i] + phi[2 + k][1 + j][1 \
+ i] - phi[2 + k][3 + j][1 + i])/4.", 
        "(-3*(phi[k][1 + j][i] - phi[k][1 + j][2 + i] - phi[2 + k][1 + j][i] \
+ phi[2 + k][1 + j][2 + i]))/4. + (phi[k][j][i] - phi[k][j][2 + i] - phi[k][2 \
+ j][i] + phi[k][2 + j][2 + i] - phi[2 + k][j][i] + phi[2 + k][j][2 + i] + \
phi[2 + k][2 + j][i] - phi[2 + k][2 + j][2 + i])/4. + (3*(phi[k][2 + j][i] - \
phi[k][2 + j][2 + i] - phi[2 + k][2 + j][i] + phi[2 + k][2 + j][2 + i]))/4. + \
(phi[k][1 + j][i] - phi[k][1 + j][2 + i] - phi[k][3 + j][i] + phi[k][3 + j][2 \
+ i] - phi[2 + k][1 + j][i] + phi[2 + k][1 + j][2 + i] + phi[2 + k][3 + j][i] \
- phi[2 + k][3 + j][2 + i])/8.", 
        "(9*(-phi[k][1 + j][1 + i] + phi[2 + k][1 + j][1 + i]))/2. - \
(9*(-phi[k][1 + j][2 + i] + phi[2 + k][1 + j][2 + i]))/2. + (3*(phi[k][1 + \
j][i] - phi[k][1 + j][2 + i] - phi[2 + k][1 + j][i] + phi[2 + k][1 + j][2 + \
i]))/2. + (3*(phi[k][1 + j][1 + i] - phi[k][1 + j][3 + i] - phi[2 + k][1 + \
j][1 + i] + phi[2 + k][1 + j][3 + i]))/4. - (9*(-phi[k][2 + j][1 + i] + phi[2 \
+ k][2 + j][1 + i]))/2. + (3*(phi[k][j][1 + i] - phi[k][2 + j][1 + i] - phi[2 \
+ k][j][1 + i] + phi[2 + k][2 + j][1 + i]))/2. + (9*(-phi[k][2 + j][2 + i] + \
phi[2 + k][2 + j][2 + i]))/2. - (3*(phi[k][j][2 + i] - phi[k][2 + j][2 + i] - \
phi[2 + k][j][2 + i] + phi[2 + k][2 + j][2 + i]))/2. - (3*(phi[k][2 + j][i] - \
phi[k][2 + j][2 + i] - phi[2 + k][2 + j][i] + phi[2 + k][2 + j][2 + i]))/2. + \
(-phi[k][j][i] + phi[k][j][2 + i] + phi[k][2 + j][i] - phi[k][2 + j][2 + i] + \
phi[2 + k][j][i] - phi[2 + k][j][2 + i] - phi[2 + k][2 + j][i] + phi[2 + k][2 \
+ j][2 + i])/2. - (3*(phi[k][2 + j][1 + i] - phi[k][2 + j][3 + i] - phi[2 + \
k][2 + j][1 + i] + phi[2 + k][2 + j][3 + i]))/4. + (-phi[k][j][1 + i] + \
phi[k][j][3 + i] + phi[k][2 + j][1 + i] - phi[k][2 + j][3 + i] + phi[2 + \
k][j][1 + i] - phi[2 + k][j][3 + i] - phi[2 + k][2 + j][1 + i] + phi[2 + k][2 \
+ j][3 + i])/4. + (3*(phi[k][1 + j][1 + i] - phi[k][3 + j][1 + i] - phi[2 + \
k][1 + j][1 + i] + phi[2 + k][3 + j][1 + i]))/4. - (3*(phi[k][1 + j][2 + i] - \
phi[k][3 + j][2 + i] - phi[2 + k][1 + j][2 + i] + phi[2 + k][3 + j][2 + \
i]))/4. + (-phi[k][1 + j][i] + phi[k][1 + j][2 + i] + phi[k][3 + j][i] - \
phi[k][3 + j][2 + i] + phi[2 + k][1 + j][i] - phi[2 + k][1 + j][2 + i] - \
phi[2 + k][3 + j][i] + phi[2 + k][3 + j][2 + i])/4. + (-phi[k][1 + j][1 + i] \
+ phi[k][1 + j][3 + i] + phi[k][3 + j][1 + i] - phi[k][3 + j][3 + i] + phi[2 \
+ k][1 + j][1 + i] - phi[2 + k][1 + j][3 + i] - phi[2 + k][3 + j][1 + i] + \
phi[2 + k][3 + j][3 + i])/8.", 
        "-phi[k][j][1 + i] + phi[k][j][2 + i] + phi[k][2 + j][1 + i] - \
phi[k][2 + j][2 + i] + phi[2 + k][j][1 + i] - phi[2 + k][j][2 + i] - \
3*(-phi[k][1 + j][1 + i] + phi[2 + k][1 + j][1 + i]) + 3*(-phi[k][1 + j][2 + \
i] + phi[2 + k][1 + j][2 + i]) - (3*(phi[k][1 + j][i] - phi[k][1 + j][2 + i] \
- phi[2 + k][1 + j][i] + phi[2 + k][1 + j][2 + i]))/4. - (3*(phi[k][1 + j][1 \
+ i] - phi[k][1 + j][3 + i] - phi[2 + k][1 + j][1 + i] + phi[2 + k][1 + j][3 \
+ i]))/4. - phi[2 + k][2 + j][1 + i] + 3*(-phi[k][2 + j][1 + i] + phi[2 + \
k][2 + j][1 + i]) + (phi[k][j][i] - phi[k][j][2 + i] - phi[k][2 + j][i] + \
phi[k][2 + j][2 + i] - phi[2 + k][j][i] + phi[2 + k][j][2 + i] + phi[2 + k][2 \
+ j][i] - phi[2 + k][2 + j][2 + i])/4. + phi[2 + k][2 + j][2 + i] - \
3*(-phi[k][2 + j][2 + i] + phi[2 + k][2 + j][2 + i]) + (3*(phi[k][2 + j][i] - \
phi[k][2 + j][2 + i] - phi[2 + k][2 + j][i] + phi[2 + k][2 + j][2 + i]))/4. + \
(phi[k][j][1 + i] - phi[k][j][3 + i] - phi[k][2 + j][1 + i] + phi[k][2 + j][3 \
+ i] - phi[2 + k][j][1 + i] + phi[2 + k][j][3 + i] + phi[2 + k][2 + j][1 + i] \
- phi[2 + k][2 + j][3 + i])/4. + (3*(phi[k][2 + j][1 + i] - phi[k][2 + j][3 + \
i] - phi[2 + k][2 + j][1 + i] + phi[2 + k][2 + j][3 + i]))/4. + (-phi[k][1 + \
j][1 + i] + phi[k][3 + j][1 + i] + phi[2 + k][1 + j][1 + i] - phi[2 + k][3 + \
j][1 + i])/2. + (phi[k][1 + j][i] - phi[k][1 + j][2 + i] - phi[k][3 + j][i] + \
phi[k][3 + j][2 + i] - phi[2 + k][1 + j][i] + phi[2 + k][1 + j][2 + i] + \
phi[2 + k][3 + j][i] - phi[2 + k][3 + j][2 + i])/8. + (phi[k][1 + j][2 + i] - \
phi[k][3 + j][2 + i] - phi[2 + k][1 + j][2 + i] + phi[2 + k][3 + j][2 + \
i])/2. + (phi[k][1 + j][1 + i] - phi[k][1 + j][3 + i] - phi[k][3 + j][1 + i] \
+ phi[k][3 + j][3 + i] - phi[2 + k][1 + j][1 + i] + phi[2 + k][1 + j][3 + i] \
+ phi[2 + k][3 + j][1 + i] - phi[2 + k][3 + j][3 + i])/8.", 
        "-phi[k][1 + j][1 + i] + phi[k][2 + j][1 + i] + phi[2 + k][1 + j][1 + \
i] - phi[2 + k][2 + j][1 + i] + (phi[k][j][1 + i] - phi[k][2 + j][1 + i] - \
phi[2 + k][j][1 + i] + phi[2 + k][2 + j][1 + i])/4. + (phi[k][1 + j][1 + i] - \
phi[k][3 + j][1 + i] - phi[2 + k][1 + j][1 + i] + phi[2 + k][3 + j][1 + \
i])/4.", "(phi[k][1 + j][i] - phi[k][1 + j][2 + i] - phi[2 + k][1 + j][i] + \
phi[2 + k][1 + j][2 + i])/2. + (-phi[k][2 + j][i] + phi[k][2 + j][2 + i] + \
phi[2 + k][2 + j][i] - phi[2 + k][2 + j][2 + i])/2. + (-phi[k][j][i] + \
phi[k][j][2 + i] + phi[k][2 + j][i] - phi[k][2 + j][2 + i] + phi[2 + k][j][i] \
- phi[2 + k][j][2 + i] - phi[2 + k][2 + j][i] + phi[2 + k][2 + j][2 + i])/8. \
+ (-phi[k][1 + j][i] + phi[k][1 + j][2 + i] + phi[k][3 + j][i] - phi[k][3 + \
j][2 + i] + phi[2 + k][1 + j][i] - phi[2 + k][1 + j][2 + i] - phi[2 + k][3 + \
j][i] + phi[2 + k][3 + j][2 + i])/8.", 
        "-phi[k][1 + j][i] + phi[k][1 + j][2 + i] + phi[k][2 + j][i] - \
phi[k][2 + j][2 + i] + phi[2 + k][1 + j][i] - 3*(-phi[k][1 + j][1 + i] + \
phi[2 + k][1 + j][1 + i]) - phi[2 + k][1 + j][2 + i] + 3*(-phi[k][1 + j][2 + \
i] + phi[2 + k][1 + j][2 + i]) + (-phi[k][1 + j][1 + i] + phi[k][1 + j][3 + \
i] + phi[2 + k][1 + j][1 + i] - phi[2 + k][1 + j][3 + i])/2. - phi[2 + k][2 + \
j][i] + 3*(-phi[k][2 + j][1 + i] + phi[2 + k][2 + j][1 + i]) - \
(3*(phi[k][j][1 + i] - phi[k][2 + j][1 + i] - phi[2 + k][j][1 + i] + phi[2 + \
k][2 + j][1 + i]))/4. + (phi[k][j][i] - phi[k][j][2 + i] - phi[k][2 + j][i] + \
phi[k][2 + j][2 + i] - phi[2 + k][j][i] + phi[2 + k][j][2 + i] + phi[2 + k][2 \
+ j][i] - phi[2 + k][2 + j][2 + i])/4. + phi[2 + k][2 + j][2 + i] - \
3*(-phi[k][2 + j][2 + i] + phi[2 + k][2 + j][2 + i]) + (3*(phi[k][j][2 + i] - \
phi[k][2 + j][2 + i] - phi[2 + k][j][2 + i] + phi[2 + k][2 + j][2 + i]))/4. + \
(phi[k][j][1 + i] - phi[k][j][3 + i] - phi[k][2 + j][1 + i] + phi[k][2 + j][3 \
+ i] - phi[2 + k][j][1 + i] + phi[2 + k][j][3 + i] + phi[2 + k][2 + j][1 + i] \
- phi[2 + k][2 + j][3 + i])/8. + (phi[k][2 + j][1 + i] - phi[k][2 + j][3 + i] \
- phi[2 + k][2 + j][1 + i] + phi[2 + k][2 + j][3 + i])/2. - (3*(phi[k][1 + \
j][1 + i] - phi[k][3 + j][1 + i] - phi[2 + k][1 + j][1 + i] + phi[2 + k][3 + \
j][1 + i]))/4. + (phi[k][1 + j][i] - phi[k][1 + j][2 + i] - phi[k][3 + j][i] \
+ phi[k][3 + j][2 + i] - phi[2 + k][1 + j][i] + phi[2 + k][1 + j][2 + i] + \
phi[2 + k][3 + j][i] - phi[2 + k][3 + j][2 + i])/4. + (3*(phi[k][1 + j][2 + \
i] - phi[k][3 + j][2 + i] - phi[2 + k][1 + j][2 + i] + phi[2 + k][3 + j][2 + \
i]))/4. + (phi[k][1 + j][1 + i] - phi[k][1 + j][3 + i] - phi[k][3 + j][1 + i] \
+ phi[k][3 + j][3 + i] - phi[2 + k][1 + j][1 + i] + phi[2 + k][1 + j][3 + i] \
+ phi[2 + k][3 + j][1 + i] - phi[2 + k][3 + j][3 + i])/8.", 
        "2*(-phi[k][1 + j][1 + i] + phi[2 + k][1 + j][1 + i]) - 2*(-phi[k][1 \
+ j][2 + i] + phi[2 + k][1 + j][2 + i]) + (phi[k][1 + j][i] - phi[k][1 + j][2 \
+ i] - phi[2 + k][1 + j][i] + phi[2 + k][1 + j][2 + i])/2. + (phi[k][1 + j][1 \
+ i] - phi[k][1 + j][3 + i] - phi[2 + k][1 + j][1 + i] + phi[2 + k][1 + j][3 \
+ i])/2. - 2*(-phi[k][2 + j][1 + i] + phi[2 + k][2 + j][1 + i]) + \
(phi[k][j][1 + i] - phi[k][2 + j][1 + i] - phi[2 + k][j][1 + i] + phi[2 + \
k][2 + j][1 + i])/2. + (-phi[k][j][2 + i] + phi[k][2 + j][2 + i] + phi[2 + \
k][j][2 + i] - phi[2 + k][2 + j][2 + i])/2. + (-phi[k][2 + j][i] + phi[k][2 + \
j][2 + i] + phi[2 + k][2 + j][i] - phi[2 + k][2 + j][2 + i])/2. + \
2*(-phi[k][2 + j][2 + i] + phi[2 + k][2 + j][2 + i]) + (-phi[k][j][i] + \
phi[k][j][2 + i] + phi[k][2 + j][i] - phi[k][2 + j][2 + i] + phi[2 + k][j][i] \
- phi[2 + k][j][2 + i] - phi[2 + k][2 + j][i] + phi[2 + k][2 + j][2 + i])/8. \
+ (-phi[k][2 + j][1 + i] + phi[k][2 + j][3 + i] + phi[2 + k][2 + j][1 + i] - \
phi[2 + k][2 + j][3 + i])/2. + (-phi[k][j][1 + i] + phi[k][j][3 + i] + \
phi[k][2 + j][1 + i] - phi[k][2 + j][3 + i] + phi[2 + k][j][1 + i] - phi[2 + \
k][j][3 + i] - phi[2 + k][2 + j][1 + i] + phi[2 + k][2 + j][3 + i])/8. + \
(phi[k][1 + j][1 + i] - phi[k][3 + j][1 + i] - phi[2 + k][1 + j][1 + i] + \
phi[2 + k][3 + j][1 + i])/2. + (-phi[k][1 + j][2 + i] + phi[k][3 + j][2 + i] \
+ phi[2 + k][1 + j][2 + i] - phi[2 + k][3 + j][2 + i])/2. + (-phi[k][1 + \
j][i] + phi[k][1 + j][2 + i] + phi[k][3 + j][i] - phi[k][3 + j][2 + i] + \
phi[2 + k][1 + j][i] - phi[2 + k][1 + j][2 + i] - phi[2 + k][3 + j][i] + \
phi[2 + k][3 + j][2 + i])/8. + (-phi[k][1 + j][1 + i] + phi[k][1 + j][3 + i] \
+ phi[k][3 + j][1 + i] - phi[k][3 + j][3 + i] + phi[2 + k][1 + j][1 + i] - \
phi[2 + k][1 + j][3 + i] - phi[2 + k][3 + j][1 + i] + phi[2 + k][3 + j][3 + \
i])/8.", "phi[k][1 + j][1 + i] - 3*phi[1 + k][1 + j][1 + i] + 2*phi[2 + k][1 \
+ j][1 + i] + (phi[1 + k][1 + j][1 + i] - phi[3 + k][1 + j][1 + i])/2.", 
        "(-3*(-phi[1 + k][1 + j][i] + phi[1 + k][1 + j][2 + i]))/2. + \
(-phi[k][1 + j][i] + phi[k][1 + j][2 + i] + phi[2 + k][1 + j][i] - phi[2 + \
k][1 + j][2 + i])/2. + (3*(-phi[2 + k][1 + j][i] + phi[2 + k][1 + j][2 + \
i]))/2. + (-phi[1 + k][1 + j][i] + phi[1 + k][1 + j][2 + i] + phi[3 + k][1 + \
j][i] - phi[3 + k][1 + j][2 + i])/4.", 
        "phi[k][1 + j][i] - phi[k][1 + j][2 + i] + 9*phi[1 + k][1 + j][1 + i] \
- 9*phi[1 + k][1 + j][2 + i] + 3*(-phi[1 + k][1 + j][i] + phi[1 + k][1 + j][2 \
+ i]) + (3*(-phi[1 + k][1 + j][1 + i] + phi[1 + k][1 + j][3 + i]))/2. - phi[2 \
+ k][1 + j][i] - 9*phi[2 + k][1 + j][1 + i] + 3*(-phi[k][1 + j][1 + i] + \
phi[2 + k][1 + j][1 + i]) + 10*phi[2 + k][1 + j][2 + i] - 3*(-phi[k][1 + j][2 \
+ i] + phi[2 + k][1 + j][2 + i]) - 3*(-phi[2 + k][1 + j][i] + phi[2 + k][1 + \
j][2 + i]) - (3*(-phi[2 + k][1 + j][1 + i] + phi[2 + k][1 + j][3 + i]))/2. + \
(phi[k][1 + j][1 + i] - phi[k][1 + j][3 + i] - phi[2 + k][1 + j][1 + i] + \
phi[2 + k][1 + j][3 + i])/2. + (3*(-phi[1 + k][1 + j][1 + i] + phi[3 + k][1 + \
j][1 + i]))/2. - (3*(-phi[1 + k][1 + j][2 + i] + phi[3 + k][1 + j][2 + \
i]))/2. + (phi[1 + k][1 + j][i] - phi[1 + k][1 + j][2 + i] - phi[3 + k][1 + \
j][i] + phi[3 + k][1 + j][2 + i])/2. + (phi[1 + k][1 + j][1 + i] - phi[1 + \
k][1 + j][3 + i] - phi[3 + k][1 + j][1 + i] + phi[3 + k][1 + j][3 + i])/4.", 
        "-5*phi[1 + k][1 + j][1 + i] + 5*phi[1 + k][1 + j][2 + i] - \
(3*(-phi[1 + k][1 + j][i] + phi[1 + k][1 + j][2 + i]))/2. - (3*(-phi[1 + k][1 \
+ j][1 + i] + phi[1 + k][1 + j][3 + i]))/2. + 6*phi[2 + k][1 + j][1 + i] - \
2*(-phi[k][1 + j][1 + i] + phi[2 + k][1 + j][1 + i]) + (-phi[k][1 + j][i] + \
phi[k][1 + j][2 + i] + phi[2 + k][1 + j][i] - phi[2 + k][1 + j][2 + i])/2. - \
6*phi[2 + k][1 + j][2 + i] + 2*(-phi[k][1 + j][2 + i] + phi[2 + k][1 + j][2 + \
i]) + (3*(-phi[2 + k][1 + j][i] + phi[2 + k][1 + j][2 + i]))/2. + (-phi[k][1 \
+ j][1 + i] + phi[k][1 + j][3 + i] + phi[2 + k][1 + j][1 + i] - phi[2 + k][1 \
+ j][3 + i])/2. + (3*(-phi[2 + k][1 + j][1 + i] + phi[2 + k][1 + j][3 + \
i]))/2. - phi[3 + k][1 + j][1 + i] + (-phi[1 + k][1 + j][i] + phi[1 + k][1 + \
j][2 + i] + phi[3 + k][1 + j][i] - phi[3 + k][1 + j][2 + i])/4. + phi[3 + \
k][1 + j][2 + i] + (-phi[1 + k][1 + j][1 + i] + phi[1 + k][1 + j][3 + i] + \
phi[3 + k][1 + j][1 + i] - phi[3 + k][1 + j][3 + i])/4.", 
        "(-3*(-phi[1 + k][j][1 + i] + phi[1 + k][2 + j][1 + i]))/2. + \
(-phi[k][j][1 + i] + phi[k][2 + j][1 + i] + phi[2 + k][j][1 + i] - phi[2 + \
k][2 + j][1 + i])/2. + (3*(-phi[2 + k][j][1 + i] + phi[2 + k][2 + j][1 + \
i]))/2. + (-phi[1 + k][j][1 + i] + phi[1 + k][2 + j][1 + i] + phi[3 + k][j][1 \
+ i] - phi[3 + k][2 + j][1 + i])/4.", 
        "(-3*(phi[1 + k][j][i] - phi[1 + k][j][2 + i] - phi[1 + k][2 + j][i] \
+ phi[1 + k][2 + j][2 + i]))/4. + (phi[k][j][i] - phi[k][j][2 + i] - phi[k][2 \
+ j][i] + phi[k][2 + j][2 + i] - phi[2 + k][j][i] + phi[2 + k][j][2 + i] + \
phi[2 + k][2 + j][i] - phi[2 + k][2 + j][2 + i])/4. + (3*(phi[2 + k][j][i] - \
phi[2 + k][j][2 + i] - phi[2 + k][2 + j][i] + phi[2 + k][2 + j][2 + i]))/4. + \
(phi[1 + k][j][i] - phi[1 + k][j][2 + i] - phi[1 + k][2 + j][i] + phi[1 + \
k][2 + j][2 + i] - phi[3 + k][j][i] + phi[3 + k][j][2 + i] + phi[3 + k][2 + \
j][i] - phi[3 + k][2 + j][2 + i])/8.", 
        "(9*(-phi[1 + k][j][1 + i] + phi[1 + k][2 + j][1 + i]))/2. - \
(9*(-phi[1 + k][j][2 + i] + phi[1 + k][2 + j][2 + i]))/2. + (3*(phi[1 + \
k][j][i] - phi[1 + k][j][2 + i] - phi[1 + k][2 + j][i] + phi[1 + k][2 + j][2 \
+ i]))/2. + (3*(phi[1 + k][j][1 + i] - phi[1 + k][j][3 + i] - phi[1 + k][2 + \
j][1 + i] + phi[1 + k][2 + j][3 + i]))/4. - (9*(-phi[2 + k][j][1 + i] + phi[2 \
+ k][2 + j][1 + i]))/2. + (3*(phi[k][j][1 + i] - phi[k][2 + j][1 + i] - phi[2 \
+ k][j][1 + i] + phi[2 + k][2 + j][1 + i]))/2. + (9*(-phi[2 + k][j][2 + i] + \
phi[2 + k][2 + j][2 + i]))/2. - (3*(phi[k][j][2 + i] - phi[k][2 + j][2 + i] - \
phi[2 + k][j][2 + i] + phi[2 + k][2 + j][2 + i]))/2. - (3*(phi[2 + k][j][i] - \
phi[2 + k][j][2 + i] - phi[2 + k][2 + j][i] + phi[2 + k][2 + j][2 + i]))/2. + \
(-phi[k][j][i] + phi[k][j][2 + i] + phi[k][2 + j][i] - phi[k][2 + j][2 + i] + \
phi[2 + k][j][i] - phi[2 + k][j][2 + i] - phi[2 + k][2 + j][i] + phi[2 + k][2 \
+ j][2 + i])/2. - (3*(phi[2 + k][j][1 + i] - phi[2 + k][j][3 + i] - phi[2 + \
k][2 + j][1 + i] + phi[2 + k][2 + j][3 + i]))/4. + (-phi[k][j][1 + i] + \
phi[k][j][3 + i] + phi[k][2 + j][1 + i] - phi[k][2 + j][3 + i] + phi[2 + \
k][j][1 + i] - phi[2 + k][j][3 + i] - phi[2 + k][2 + j][1 + i] + phi[2 + k][2 \
+ j][3 + i])/4. + (3*(phi[1 + k][j][1 + i] - phi[1 + k][2 + j][1 + i] - phi[3 \
+ k][j][1 + i] + phi[3 + k][2 + j][1 + i]))/4. - (3*(phi[1 + k][j][2 + i] - \
phi[1 + k][2 + j][2 + i] - phi[3 + k][j][2 + i] + phi[3 + k][2 + j][2 + \
i]))/4. + (-phi[1 + k][j][i] + phi[1 + k][j][2 + i] + phi[1 + k][2 + j][i] - \
phi[1 + k][2 + j][2 + i] + phi[3 + k][j][i] - phi[3 + k][j][2 + i] - phi[3 + \
k][2 + j][i] + phi[3 + k][2 + j][2 + i])/4. + (-phi[1 + k][j][1 + i] + phi[1 \
+ k][j][3 + i] + phi[1 + k][2 + j][1 + i] - phi[1 + k][2 + j][3 + i] + phi[3 \
+ k][j][1 + i] - phi[3 + k][j][3 + i] - phi[3 + k][2 + j][1 + i] + phi[3 + \
k][2 + j][3 + i])/8.", 
        "-phi[k][j][1 + i] + phi[k][j][2 + i] + phi[k][2 + j][1 + i] - \
phi[k][2 + j][2 + i] - 3*(-phi[1 + k][j][1 + i] + phi[1 + k][2 + j][1 + i]) + \
3*(-phi[1 + k][j][2 + i] + phi[1 + k][2 + j][2 + i]) - (3*(phi[1 + k][j][i] - \
phi[1 + k][j][2 + i] - phi[1 + k][2 + j][i] + phi[1 + k][2 + j][2 + i]))/4. - \
(3*(phi[1 + k][j][1 + i] - phi[1 + k][j][3 + i] - phi[1 + k][2 + j][1 + i] + \
phi[1 + k][2 + j][3 + i]))/4. + phi[2 + k][j][1 + i] - phi[2 + k][j][2 + i] - \
phi[2 + k][2 + j][1 + i] + 3*(-phi[2 + k][j][1 + i] + phi[2 + k][2 + j][1 + \
i]) + (phi[k][j][i] - phi[k][j][2 + i] - phi[k][2 + j][i] + phi[k][2 + j][2 + \
i] - phi[2 + k][j][i] + phi[2 + k][j][2 + i] + phi[2 + k][2 + j][i] - phi[2 + \
k][2 + j][2 + i])/4. + phi[2 + k][2 + j][2 + i] - 3*(-phi[2 + k][j][2 + i] + \
phi[2 + k][2 + j][2 + i]) + (3*(phi[2 + k][j][i] - phi[2 + k][j][2 + i] - \
phi[2 + k][2 + j][i] + phi[2 + k][2 + j][2 + i]))/4. + (phi[k][j][1 + i] - \
phi[k][j][3 + i] - phi[k][2 + j][1 + i] + phi[k][2 + j][3 + i] - phi[2 + \
k][j][1 + i] + phi[2 + k][j][3 + i] + phi[2 + k][2 + j][1 + i] - phi[2 + k][2 \
+ j][3 + i])/4. + (3*(phi[2 + k][j][1 + i] - phi[2 + k][j][3 + i] - phi[2 + \
k][2 + j][1 + i] + phi[2 + k][2 + j][3 + i]))/4. + (-phi[1 + k][j][1 + i] + \
phi[1 + k][2 + j][1 + i] + phi[3 + k][j][1 + i] - phi[3 + k][2 + j][1 + \
i])/2. + (phi[1 + k][j][i] - phi[1 + k][j][2 + i] - phi[1 + k][2 + j][i] + \
phi[1 + k][2 + j][2 + i] - phi[3 + k][j][i] + phi[3 + k][j][2 + i] + phi[3 + \
k][2 + j][i] - phi[3 + k][2 + j][2 + i])/8. + (phi[1 + k][j][2 + i] - phi[1 + \
k][2 + j][2 + i] - phi[3 + k][j][2 + i] + phi[3 + k][2 + j][2 + i])/2. + \
(phi[1 + k][j][1 + i] - phi[1 + k][j][3 + i] - phi[1 + k][2 + j][1 + i] + \
phi[1 + k][2 + j][3 + i] - phi[3 + k][j][1 + i] + phi[3 + k][j][3 + i] + \
phi[3 + k][2 + j][1 + i] - phi[3 + k][2 + j][3 + i])/8.", 
        "phi[k][j][1 + i] - phi[k][2 + j][1 + i] + 9*phi[1 + k][1 + j][1 + i] \
- 9*phi[1 + k][2 + j][1 + i] + 3*(-phi[1 + k][j][1 + i] + phi[1 + k][2 + j][1 \
+ i]) + (3*(-phi[1 + k][1 + j][1 + i] + phi[1 + k][3 + j][1 + i]))/2. - phi[2 \
+ k][j][1 + i] - 9*phi[2 + k][1 + j][1 + i] + 3*(-phi[k][1 + j][1 + i] + \
phi[2 + k][1 + j][1 + i]) + 10*phi[2 + k][2 + j][1 + i] - 3*(-phi[k][2 + j][1 \
+ i] + phi[2 + k][2 + j][1 + i]) - 3*(-phi[2 + k][j][1 + i] + phi[2 + k][2 + \
j][1 + i]) - (3*(-phi[2 + k][1 + j][1 + i] + phi[2 + k][3 + j][1 + i]))/2. + \
(phi[k][1 + j][1 + i] - phi[k][3 + j][1 + i] - phi[2 + k][1 + j][1 + i] + \
phi[2 + k][3 + j][1 + i])/2. + (3*(-phi[1 + k][1 + j][1 + i] + phi[3 + k][1 + \
j][1 + i]))/2. - (3*(-phi[1 + k][2 + j][1 + i] + phi[3 + k][2 + j][1 + \
i]))/2. + (phi[1 + k][j][1 + i] - phi[1 + k][2 + j][1 + i] - phi[3 + k][j][1 \
+ i] + phi[3 + k][2 + j][1 + i])/2. + (phi[1 + k][1 + j][1 + i] - phi[1 + \
k][3 + j][1 + i] - phi[3 + k][1 + j][1 + i] + phi[3 + k][3 + j][1 + i])/4.", 
        "(9*(-phi[1 + k][1 + j][i] + phi[1 + k][1 + j][2 + i]))/2. - \
(9*(-phi[1 + k][2 + j][i] + phi[1 + k][2 + j][2 + i]))/2. + (3*(phi[1 + \
k][j][i] - phi[1 + k][j][2 + i] - phi[1 + k][2 + j][i] + phi[1 + k][2 + j][2 \
+ i]))/2. + (3*(phi[1 + k][1 + j][i] - phi[1 + k][1 + j][2 + i] - phi[1 + \
k][3 + j][i] + phi[1 + k][3 + j][2 + i]))/4. - (9*(-phi[2 + k][1 + j][i] + \
phi[2 + k][1 + j][2 + i]))/2. + (3*(phi[k][1 + j][i] - phi[k][1 + j][2 + i] - \
phi[2 + k][1 + j][i] + phi[2 + k][1 + j][2 + i]))/2. + (9*(-phi[2 + k][2 + \
j][i] + phi[2 + k][2 + j][2 + i]))/2. - (3*(phi[k][2 + j][i] - phi[k][2 + \
j][2 + i] - phi[2 + k][2 + j][i] + phi[2 + k][2 + j][2 + i]))/2. - (3*(phi[2 \
+ k][j][i] - phi[2 + k][j][2 + i] - phi[2 + k][2 + j][i] + phi[2 + k][2 + \
j][2 + i]))/2. + (-phi[k][j][i] + phi[k][j][2 + i] + phi[k][2 + j][i] - \
phi[k][2 + j][2 + i] + phi[2 + k][j][i] - phi[2 + k][j][2 + i] - phi[2 + k][2 \
+ j][i] + phi[2 + k][2 + j][2 + i])/2. - (3*(phi[2 + k][1 + j][i] - phi[2 + \
k][1 + j][2 + i] - phi[2 + k][3 + j][i] + phi[2 + k][3 + j][2 + i]))/4. + \
(-phi[k][1 + j][i] + phi[k][1 + j][2 + i] + phi[k][3 + j][i] - phi[k][3 + \
j][2 + i] + phi[2 + k][1 + j][i] - phi[2 + k][1 + j][2 + i] - phi[2 + k][3 + \
j][i] + phi[2 + k][3 + j][2 + i])/4. + (3*(phi[1 + k][1 + j][i] - phi[1 + \
k][1 + j][2 + i] - phi[3 + k][1 + j][i] + phi[3 + k][1 + j][2 + i]))/4. - \
(3*(phi[1 + k][2 + j][i] - phi[1 + k][2 + j][2 + i] - phi[3 + k][2 + j][i] + \
phi[3 + k][2 + j][2 + i]))/4. + (-phi[1 + k][j][i] + phi[1 + k][j][2 + i] + \
phi[1 + k][2 + j][i] - phi[1 + k][2 + j][2 + i] + phi[3 + k][j][i] - phi[3 + \
k][j][2 + i] - phi[3 + k][2 + j][i] + phi[3 + k][2 + j][2 + i])/4. + (-phi[1 \
+ k][1 + j][i] + phi[1 + k][1 + j][2 + i] + phi[1 + k][3 + j][i] - phi[1 + \
k][3 + j][2 + i] + phi[3 + k][1 + j][i] - phi[3 + k][1 + j][2 + i] - phi[3 + \
k][3 + j][i] + phi[3 + k][3 + j][2 + i])/8.", 
        "phi[k][j][i] - phi[k][j][2 + i] - phi[k][2 + j][i] + phi[k][2 + j][2 \
+ i] - 27*phi[1 + k][1 + j][1 + i] + 27*phi[1 + k][1 + j][2 + i] - 9*(-phi[1 \
+ k][1 + j][i] + phi[1 + k][1 + j][2 + i]) - (9*(-phi[1 + k][1 + j][1 + i] + \
phi[1 + k][1 + j][3 + i]))/2. + 27*phi[1 + k][2 + j][1 + i] - 9*(-phi[1 + \
k][j][1 + i] + phi[1 + k][2 + j][1 + i]) - 27*phi[1 + k][2 + j][2 + i] + \
9*(-phi[1 + k][j][2 + i] + phi[1 + k][2 + j][2 + i]) + 9*(-phi[1 + k][2 + \
j][i] + phi[1 + k][2 + j][2 + i]) - 3*(phi[1 + k][j][i] - phi[1 + k][j][2 + \
i] - phi[1 + k][2 + j][i] + phi[1 + k][2 + j][2 + i]) + (9*(-phi[1 + k][2 + \
j][1 + i] + phi[1 + k][2 + j][3 + i]))/2. - (3*(phi[1 + k][j][1 + i] - phi[1 \
+ k][j][3 + i] - phi[1 + k][2 + j][1 + i] + phi[1 + k][2 + j][3 + i]))/2. - \
(9*(-phi[1 + k][1 + j][1 + i] + phi[1 + k][3 + j][1 + i]))/2. + (9*(-phi[1 + \
k][1 + j][2 + i] + phi[1 + k][3 + j][2 + i]))/2. - (3*(phi[1 + k][1 + j][i] - \
phi[1 + k][1 + j][2 + i] - phi[1 + k][3 + j][i] + phi[1 + k][3 + j][2 + \
i]))/2. - (3*(phi[1 + k][1 + j][1 + i] - phi[1 + k][1 + j][3 + i] - phi[1 + \
k][3 + j][1 + i] + phi[1 + k][3 + j][3 + i]))/4. - phi[2 + k][j][i] + phi[2 + \
k][j][2 + i] + 27*phi[2 + k][1 + j][1 + i] - 9*(-phi[k][1 + j][1 + i] + phi[2 \
+ k][1 + j][1 + i]) - 27*phi[2 + k][1 + j][2 + i] + 9*(-phi[k][1 + j][2 + i] \
+ phi[2 + k][1 + j][2 + i]) + 9*(-phi[2 + k][1 + j][i] + phi[2 + k][1 + j][2 \
+ i]) - 3*(phi[k][1 + j][i] - phi[k][1 + j][2 + i] - phi[2 + k][1 + j][i] + \
phi[2 + k][1 + j][2 + i]) + (9*(-phi[2 + k][1 + j][1 + i] + phi[2 + k][1 + \
j][3 + i]))/2. - (3*(phi[k][1 + j][1 + i] - phi[k][1 + j][3 + i] - phi[2 + \
k][1 + j][1 + i] + phi[2 + k][1 + j][3 + i]))/2. + phi[2 + k][2 + j][i] - \
27*phi[2 + k][2 + j][1 + i] + 9*(-phi[k][2 + j][1 + i] + phi[2 + k][2 + j][1 \
+ i]) + 9*(-phi[2 + k][j][1 + i] + phi[2 + k][2 + j][1 + i]) - 3*(phi[k][j][1 \
+ i] - phi[k][2 + j][1 + i] - phi[2 + k][j][1 + i] + phi[2 + k][2 + j][1 + \
i]) + 26*phi[2 + k][2 + j][2 + i] - 9*(-phi[k][2 + j][2 + i] + phi[2 + k][2 + \
j][2 + i]) - 9*(-phi[2 + k][j][2 + i] + phi[2 + k][2 + j][2 + i]) + \
3*(phi[k][j][2 + i] - phi[k][2 + j][2 + i] - phi[2 + k][j][2 + i] + phi[2 + \
k][2 + j][2 + i]) - 9*(-phi[2 + k][2 + j][i] + phi[2 + k][2 + j][2 + i]) + \
3*(phi[k][2 + j][i] - phi[k][2 + j][2 + i] - phi[2 + k][2 + j][i] + phi[2 + \
k][2 + j][2 + i]) + 3*(phi[2 + k][j][i] - phi[2 + k][j][2 + i] - phi[2 + k][2 \
+ j][i] + phi[2 + k][2 + j][2 + i]) + (phi[k][j][1 + i] - phi[k][j][3 + i] - \
phi[k][2 + j][1 + i] + phi[k][2 + j][3 + i] - phi[2 + k][j][1 + i] + phi[2 + \
k][j][3 + i] + phi[2 + k][2 + j][1 + i] - phi[2 + k][2 + j][3 + i])/2. - \
(9*(-phi[2 + k][2 + j][1 + i] + phi[2 + k][2 + j][3 + i]))/2. + (3*(phi[k][2 \
+ j][1 + i] - phi[k][2 + j][3 + i] - phi[2 + k][2 + j][1 + i] + phi[2 + k][2 \
+ j][3 + i]))/2. + (3*(phi[2 + k][j][1 + i] - phi[2 + k][j][3 + i] - phi[2 + \
k][2 + j][1 + i] + phi[2 + k][2 + j][3 + i]))/2. + (9*(-phi[2 + k][1 + j][1 + \
i] + phi[2 + k][3 + j][1 + i]))/2. - (3*(phi[k][1 + j][1 + i] - phi[k][3 + \
j][1 + i] - phi[2 + k][1 + j][1 + i] + phi[2 + k][3 + j][1 + i]))/2. + \
(phi[k][1 + j][i] - phi[k][1 + j][2 + i] - phi[k][3 + j][i] + phi[k][3 + j][2 \
+ i] - phi[2 + k][1 + j][i] + phi[2 + k][1 + j][2 + i] + phi[2 + k][3 + j][i] \
- phi[2 + k][3 + j][2 + i])/2. - (9*(-phi[2 + k][1 + j][2 + i] + phi[2 + k][3 \
+ j][2 + i]))/2. + (3*(phi[k][1 + j][2 + i] - phi[k][3 + j][2 + i] - phi[2 + \
k][1 + j][2 + i] + phi[2 + k][3 + j][2 + i]))/2. + (3*(phi[2 + k][1 + j][i] - \
phi[2 + k][1 + j][2 + i] - phi[2 + k][3 + j][i] + phi[2 + k][3 + j][2 + \
i]))/2. + (phi[k][1 + j][1 + i] - phi[k][1 + j][3 + i] - phi[k][3 + j][1 + i] \
+ phi[k][3 + j][3 + i] - phi[2 + k][1 + j][1 + i] + phi[2 + k][1 + j][3 + i] \
+ phi[2 + k][3 + j][1 + i] - phi[2 + k][3 + j][3 + i])/4. + (3*(phi[2 + k][1 \
+ j][1 + i] - phi[2 + k][1 + j][3 + i] - phi[2 + k][3 + j][1 + i] + phi[2 + \
k][3 + j][3 + i]))/4. - (9*(-phi[1 + k][1 + j][1 + i] + phi[3 + k][1 + j][1 + \
i]))/2. + (9*(-phi[1 + k][1 + j][2 + i] + phi[3 + k][1 + j][2 + i]))/2. - \
(3*(phi[1 + k][1 + j][i] - phi[1 + k][1 + j][2 + i] - phi[3 + k][1 + j][i] + \
phi[3 + k][1 + j][2 + i]))/2. - (3*(phi[1 + k][1 + j][1 + i] - phi[1 + k][1 + \
j][3 + i] - phi[3 + k][1 + j][1 + i] + phi[3 + k][1 + j][3 + i]))/4. + \
(9*(-phi[1 + k][2 + j][1 + i] + phi[3 + k][2 + j][1 + i]))/2. - (3*(phi[1 + \
k][j][1 + i] - phi[1 + k][2 + j][1 + i] - phi[3 + k][j][1 + i] + phi[3 + k][2 \
+ j][1 + i]))/2. + (phi[1 + k][j][i] - phi[1 + k][j][2 + i] - phi[1 + k][2 + \
j][i] + phi[1 + k][2 + j][2 + i] - phi[3 + k][j][i] + phi[3 + k][j][2 + i] + \
phi[3 + k][2 + j][i] - phi[3 + k][2 + j][2 + i])/2. - (9*(-phi[1 + k][2 + \
j][2 + i] + phi[3 + k][2 + j][2 + i]))/2. + (3*(phi[1 + k][j][2 + i] - phi[1 \
+ k][2 + j][2 + i] - phi[3 + k][j][2 + i] + phi[3 + k][2 + j][2 + i]))/2. + \
(3*(phi[1 + k][2 + j][i] - phi[1 + k][2 + j][2 + i] - phi[3 + k][2 + j][i] + \
phi[3 + k][2 + j][2 + i]))/2. + (phi[1 + k][j][1 + i] - phi[1 + k][j][3 + i] \
- phi[1 + k][2 + j][1 + i] + phi[1 + k][2 + j][3 + i] - phi[3 + k][j][1 + i] \
+ phi[3 + k][j][3 + i] + phi[3 + k][2 + j][1 + i] - phi[3 + k][2 + j][3 + \
i])/4. + (3*(phi[1 + k][2 + j][1 + i] - phi[1 + k][2 + j][3 + i] - phi[3 + \
k][2 + j][1 + i] + phi[3 + k][2 + j][3 + i]))/4. - (3*(phi[1 + k][1 + j][1 + \
i] - phi[1 + k][3 + j][1 + i] - phi[3 + k][1 + j][1 + i] + phi[3 + k][3 + \
j][1 + i]))/4. + (phi[1 + k][1 + j][i] - phi[1 + k][1 + j][2 + i] - phi[1 + \
k][3 + j][i] + phi[1 + k][3 + j][2 + i] - phi[3 + k][1 + j][i] + phi[3 + k][1 \
+ j][2 + i] + phi[3 + k][3 + j][i] - phi[3 + k][3 + j][2 + i])/4. + (3*(phi[1 \
+ k][1 + j][2 + i] - phi[1 + k][3 + j][2 + i] - phi[3 + k][1 + j][2 + i] + \
phi[3 + k][3 + j][2 + i]))/4. + (phi[1 + k][1 + j][1 + i] - phi[1 + k][1 + \
j][3 + i] - phi[1 + k][3 + j][1 + i] + phi[1 + k][3 + j][3 + i] - phi[3 + \
k][1 + j][1 + i] + phi[3 + k][1 + j][3 + i] + phi[3 + k][3 + j][1 + i] - \
phi[3 + k][3 + j][3 + i])/8.", 
        "phi[k][1 + j][1 + i] - phi[k][1 + j][2 + i] - phi[k][3 + j][1 + i] + \
phi[k][3 + j][2 + i] + phi[1 + k][j][1 + i] - phi[1 + k][j][2 + i] + 18*phi[1 \
+ k][1 + j][1 + i] - 18*phi[1 + k][1 + j][2 + i] + (9*(-phi[1 + k][1 + j][i] \
+ phi[1 + k][1 + j][2 + i]))/2. + (9*(-phi[1 + k][1 + j][1 + i] + phi[1 + \
k][1 + j][3 + i]))/2. - 19*phi[1 + k][2 + j][1 + i] + 6*(-phi[1 + k][j][1 + \
i] + phi[1 + k][2 + j][1 + i]) + 19*phi[1 + k][2 + j][2 + i] - 6*(-phi[1 + \
k][j][2 + i] + phi[1 + k][2 + j][2 + i]) - (9*(-phi[1 + k][2 + j][i] + phi[1 \
+ k][2 + j][2 + i]))/2. + (3*(phi[1 + k][j][i] - phi[1 + k][j][2 + i] - phi[1 \
+ k][2 + j][i] + phi[1 + k][2 + j][2 + i]))/2. - (9*(-phi[1 + k][2 + j][1 + \
i] + phi[1 + k][2 + j][3 + i]))/2. + (3*(phi[1 + k][j][1 + i] - phi[1 + \
k][j][3 + i] - phi[1 + k][2 + j][1 + i] + phi[1 + k][2 + j][3 + i]))/2. + \
3*(-phi[1 + k][1 + j][1 + i] + phi[1 + k][3 + j][1 + i]) - 3*(-phi[1 + k][1 + \
j][2 + i] + phi[1 + k][3 + j][2 + i]) + (3*(phi[1 + k][1 + j][i] - phi[1 + \
k][1 + j][2 + i] - phi[1 + k][3 + j][i] + phi[1 + k][3 + j][2 + i]))/4. + \
(3*(phi[1 + k][1 + j][1 + i] - phi[1 + k][1 + j][3 + i] - phi[1 + k][3 + j][1 \
+ i] + phi[1 + k][3 + j][3 + i]))/4. - 19*phi[2 + k][1 + j][1 + i] + \
6*(-phi[k][1 + j][1 + i] + phi[2 + k][1 + j][1 + i]) + 19*phi[2 + k][1 + j][2 \
+ i] - 6*(-phi[k][1 + j][2 + i] + phi[2 + k][1 + j][2 + i]) - (9*(-phi[2 + \
k][1 + j][i] + phi[2 + k][1 + j][2 + i]))/2. + (3*(phi[k][1 + j][i] - \
phi[k][1 + j][2 + i] - phi[2 + k][1 + j][i] + phi[2 + k][1 + j][2 + i]))/2. - \
(9*(-phi[2 + k][1 + j][1 + i] + phi[2 + k][1 + j][3 + i]))/2. + (3*(phi[k][1 \
+ j][1 + i] - phi[k][1 + j][3 + i] - phi[2 + k][1 + j][1 + i] + phi[2 + k][1 \
+ j][3 + i]))/2. + 18*phi[2 + k][2 + j][1 + i] - 6*(-phi[k][2 + j][1 + i] + \
phi[2 + k][2 + j][1 + i]) - 6*(-phi[2 + k][j][1 + i] + phi[2 + k][2 + j][1 + \
i]) + 2*(phi[k][j][1 + i] - phi[k][2 + j][1 + i] - phi[2 + k][j][1 + i] + \
phi[2 + k][2 + j][1 + i]) - 18*phi[2 + k][2 + j][2 + i] + 6*(-phi[k][2 + j][2 \
+ i] + phi[2 + k][2 + j][2 + i]) + 6*(-phi[2 + k][j][2 + i] + phi[2 + k][2 + \
j][2 + i]) - 2*(phi[k][j][2 + i] - phi[k][2 + j][2 + i] - phi[2 + k][j][2 + \
i] + phi[2 + k][2 + j][2 + i]) + (9*(-phi[2 + k][2 + j][i] + phi[2 + k][2 + \
j][2 + i]))/2. - (3*(phi[k][2 + j][i] - phi[k][2 + j][2 + i] - phi[2 + k][2 + \
j][i] + phi[2 + k][2 + j][2 + i]))/2. - (3*(phi[2 + k][j][i] - phi[2 + \
k][j][2 + i] - phi[2 + k][2 + j][i] + phi[2 + k][2 + j][2 + i]))/2. + \
(-phi[k][j][i] + phi[k][j][2 + i] + phi[k][2 + j][i] - phi[k][2 + j][2 + i] + \
phi[2 + k][j][i] - phi[2 + k][j][2 + i] - phi[2 + k][2 + j][i] + phi[2 + k][2 \
+ j][2 + i])/2. + (9*(-phi[2 + k][2 + j][1 + i] + phi[2 + k][2 + j][3 + \
i]))/2. - (3*(phi[k][2 + j][1 + i] - phi[k][2 + j][3 + i] - phi[2 + k][2 + \
j][1 + i] + phi[2 + k][2 + j][3 + i]))/2. - (3*(phi[2 + k][j][1 + i] - phi[2 \
+ k][j][3 + i] - phi[2 + k][2 + j][1 + i] + phi[2 + k][2 + j][3 + i]))/2. + \
(-phi[k][j][1 + i] + phi[k][j][3 + i] + phi[k][2 + j][1 + i] - phi[k][2 + \
j][3 + i] + phi[2 + k][j][1 + i] - phi[2 + k][j][3 + i] - phi[2 + k][2 + j][1 \
+ i] + phi[2 + k][2 + j][3 + i])/2. + phi[2 + k][3 + j][1 + i] - 3*(-phi[2 + \
k][1 + j][1 + i] + phi[2 + k][3 + j][1 + i]) - phi[2 + k][3 + j][2 + i] + \
3*(-phi[2 + k][1 + j][2 + i] + phi[2 + k][3 + j][2 + i]) - (3*(phi[2 + k][1 + \
j][i] - phi[2 + k][1 + j][2 + i] - phi[2 + k][3 + j][i] + phi[2 + k][3 + j][2 \
+ i]))/4. + (-phi[k][1 + j][i] + phi[k][1 + j][2 + i] + phi[k][3 + j][i] - \
phi[k][3 + j][2 + i] + phi[2 + k][1 + j][i] - phi[2 + k][1 + j][2 + i] - \
phi[2 + k][3 + j][i] + phi[2 + k][3 + j][2 + i])/4. - (3*(phi[2 + k][1 + j][1 \
+ i] - phi[2 + k][1 + j][3 + i] - phi[2 + k][3 + j][1 + i] + phi[2 + k][3 + \
j][3 + i]))/4. + (-phi[k][1 + j][1 + i] + phi[k][1 + j][3 + i] + phi[k][3 + \
j][1 + i] - phi[k][3 + j][3 + i] + phi[2 + k][1 + j][1 + i] - phi[2 + k][1 + \
j][3 + i] - phi[2 + k][3 + j][1 + i] + phi[2 + k][3 + j][3 + i])/4. - phi[3 + \
k][j][1 + i] + phi[3 + k][j][2 + i] + 3*(-phi[1 + k][1 + j][1 + i] + phi[3 + \
k][1 + j][1 + i]) - 3*(-phi[1 + k][1 + j][2 + i] + phi[3 + k][1 + j][2 + i]) \
+ (3*(phi[1 + k][1 + j][i] - phi[1 + k][1 + j][2 + i] - phi[3 + k][1 + j][i] \
+ phi[3 + k][1 + j][2 + i]))/4. + (3*(phi[1 + k][1 + j][1 + i] - phi[1 + k][1 \
+ j][3 + i] - phi[3 + k][1 + j][1 + i] + phi[3 + k][1 + j][3 + i]))/4. + \
phi[3 + k][2 + j][1 + i] - 3*(-phi[1 + k][2 + j][1 + i] + phi[3 + k][2 + j][1 \
+ i]) - phi[3 + k][2 + j][2 + i] + 3*(-phi[1 + k][2 + j][2 + i] + phi[3 + \
k][2 + j][2 + i]) - (3*(phi[1 + k][2 + j][i] - phi[1 + k][2 + j][2 + i] - \
phi[3 + k][2 + j][i] + phi[3 + k][2 + j][2 + i]))/4. + (-phi[1 + k][j][i] + \
phi[1 + k][j][2 + i] + phi[1 + k][2 + j][i] - phi[1 + k][2 + j][2 + i] + \
phi[3 + k][j][i] - phi[3 + k][j][2 + i] - phi[3 + k][2 + j][i] + phi[3 + k][2 \
+ j][2 + i])/4. - (3*(phi[1 + k][2 + j][1 + i] - phi[1 + k][2 + j][3 + i] - \
phi[3 + k][2 + j][1 + i] + phi[3 + k][2 + j][3 + i]))/4. + (-phi[1 + k][j][1 \
+ i] + phi[1 + k][j][3 + i] + phi[1 + k][2 + j][1 + i] - phi[1 + k][2 + j][3 \
+ i] + phi[3 + k][j][1 + i] - phi[3 + k][j][3 + i] - phi[3 + k][2 + j][1 + i] \
+ phi[3 + k][2 + j][3 + i])/4. + (phi[1 + k][1 + j][1 + i] - phi[1 + k][3 + \
j][1 + i] - phi[3 + k][1 + j][1 + i] + phi[3 + k][3 + j][1 + i])/2. + (-phi[1 \
+ k][1 + j][2 + i] + phi[1 + k][3 + j][2 + i] + phi[3 + k][1 + j][2 + i] - \
phi[3 + k][3 + j][2 + i])/2. + (-phi[1 + k][1 + j][i] + phi[1 + k][1 + j][2 + \
i] + phi[1 + k][3 + j][i] - phi[1 + k][3 + j][2 + i] + phi[3 + k][1 + j][i] - \
phi[3 + k][1 + j][2 + i] - phi[3 + k][3 + j][i] + phi[3 + k][3 + j][2 + \
i])/8. + (-phi[1 + k][1 + j][1 + i] + phi[1 + k][1 + j][3 + i] + phi[1 + k][3 \
+ j][1 + i] - phi[1 + k][3 + j][3 + i] + phi[3 + k][1 + j][1 + i] - phi[3 + \
k][1 + j][3 + i] - phi[3 + k][3 + j][1 + i] + phi[3 + k][3 + j][3 + i])/8.", 
        "-5*phi[1 + k][1 + j][1 + i] + 5*phi[1 + k][2 + j][1 + i] - \
(3*(-phi[1 + k][j][1 + i] + phi[1 + k][2 + j][1 + i]))/2. - (3*(-phi[1 + k][1 \
+ j][1 + i] + phi[1 + k][3 + j][1 + i]))/2. + 6*phi[2 + k][1 + j][1 + i] - \
2*(-phi[k][1 + j][1 + i] + phi[2 + k][1 + j][1 + i]) + (-phi[k][j][1 + i] + \
phi[k][2 + j][1 + i] + phi[2 + k][j][1 + i] - phi[2 + k][2 + j][1 + i])/2. - \
6*phi[2 + k][2 + j][1 + i] + 2*(-phi[k][2 + j][1 + i] + phi[2 + k][2 + j][1 + \
i]) + (3*(-phi[2 + k][j][1 + i] + phi[2 + k][2 + j][1 + i]))/2. + (-phi[k][1 \
+ j][1 + i] + phi[k][3 + j][1 + i] + phi[2 + k][1 + j][1 + i] - phi[2 + k][3 \
+ j][1 + i])/2. + (3*(-phi[2 + k][1 + j][1 + i] + phi[2 + k][3 + j][1 + \
i]))/2. - phi[3 + k][1 + j][1 + i] + (-phi[1 + k][j][1 + i] + phi[1 + k][2 + \
j][1 + i] + phi[3 + k][j][1 + i] - phi[3 + k][2 + j][1 + i])/4. + phi[3 + \
k][2 + j][1 + i] + (-phi[1 + k][1 + j][1 + i] + phi[1 + k][3 + j][1 + i] + \
phi[3 + k][1 + j][1 + i] - phi[3 + k][3 + j][1 + i])/4.", 
        "-phi[k][1 + j][i] + phi[k][1 + j][2 + i] + phi[k][2 + j][i] - \
phi[k][2 + j][2 + i] - 3*(-phi[1 + k][1 + j][i] + phi[1 + k][1 + j][2 + i]) + \
3*(-phi[1 + k][2 + j][i] + phi[1 + k][2 + j][2 + i]) - (3*(phi[1 + k][j][i] - \
phi[1 + k][j][2 + i] - phi[1 + k][2 + j][i] + phi[1 + k][2 + j][2 + i]))/4. - \
(3*(phi[1 + k][1 + j][i] - phi[1 + k][1 + j][2 + i] - phi[1 + k][3 + j][i] + \
phi[1 + k][3 + j][2 + i]))/4. + phi[2 + k][1 + j][i] - phi[2 + k][1 + j][2 + \
i] + 3*(-phi[2 + k][1 + j][i] + phi[2 + k][1 + j][2 + i]) - phi[2 + k][2 + \
j][i] + (phi[k][j][i] - phi[k][j][2 + i] - phi[k][2 + j][i] + phi[k][2 + j][2 \
+ i] - phi[2 + k][j][i] + phi[2 + k][j][2 + i] + phi[2 + k][2 + j][i] - phi[2 \
+ k][2 + j][2 + i])/4. + phi[2 + k][2 + j][2 + i] - 3*(-phi[2 + k][2 + j][i] \
+ phi[2 + k][2 + j][2 + i]) + (3*(phi[2 + k][j][i] - phi[2 + k][j][2 + i] - \
phi[2 + k][2 + j][i] + phi[2 + k][2 + j][2 + i]))/4. + (phi[k][1 + j][i] - \
phi[k][1 + j][2 + i] - phi[k][3 + j][i] + phi[k][3 + j][2 + i] - phi[2 + k][1 \
+ j][i] + phi[2 + k][1 + j][2 + i] + phi[2 + k][3 + j][i] - phi[2 + k][3 + \
j][2 + i])/4. + (3*(phi[2 + k][1 + j][i] - phi[2 + k][1 + j][2 + i] - phi[2 + \
k][3 + j][i] + phi[2 + k][3 + j][2 + i]))/4. + (-phi[1 + k][1 + j][i] + phi[1 \
+ k][1 + j][2 + i] + phi[3 + k][1 + j][i] - phi[3 + k][1 + j][2 + i])/2. + \
(phi[1 + k][j][i] - phi[1 + k][j][2 + i] - phi[1 + k][2 + j][i] + phi[1 + \
k][2 + j][2 + i] - phi[3 + k][j][i] + phi[3 + k][j][2 + i] + phi[3 + k][2 + \
j][i] - phi[3 + k][2 + j][2 + i])/8. + (phi[1 + k][2 + j][i] - phi[1 + k][2 + \
j][2 + i] - phi[3 + k][2 + j][i] + phi[3 + k][2 + j][2 + i])/2. + (phi[1 + \
k][1 + j][i] - phi[1 + k][1 + j][2 + i] - phi[1 + k][3 + j][i] + phi[1 + k][3 \
+ j][2 + i] - phi[3 + k][1 + j][i] + phi[3 + k][1 + j][2 + i] + phi[3 + k][3 \
+ j][i] - phi[3 + k][3 + j][2 + i])/8.", 
        "phi[k][1 + j][1 + i] - phi[k][1 + j][3 + i] - phi[k][2 + j][1 + i] + \
phi[k][2 + j][3 + i] + phi[1 + k][1 + j][i] + 18*phi[1 + k][1 + j][1 + i] - \
19*phi[1 + k][1 + j][2 + i] + 6*(-phi[1 + k][1 + j][i] + phi[1 + k][1 + j][2 \
+ i]) + 3*(-phi[1 + k][1 + j][1 + i] + phi[1 + k][1 + j][3 + i]) - phi[1 + \
k][2 + j][i] - 18*phi[1 + k][2 + j][1 + i] + (9*(-phi[1 + k][j][1 + i] + \
phi[1 + k][2 + j][1 + i]))/2. + 19*phi[1 + k][2 + j][2 + i] - (9*(-phi[1 + \
k][j][2 + i] + phi[1 + k][2 + j][2 + i]))/2. - 6*(-phi[1 + k][2 + j][i] + \
phi[1 + k][2 + j][2 + i]) + (3*(phi[1 + k][j][i] - phi[1 + k][j][2 + i] - \
phi[1 + k][2 + j][i] + phi[1 + k][2 + j][2 + i]))/2. - 3*(-phi[1 + k][2 + \
j][1 + i] + phi[1 + k][2 + j][3 + i]) + (3*(phi[1 + k][j][1 + i] - phi[1 + \
k][j][3 + i] - phi[1 + k][2 + j][1 + i] + phi[1 + k][2 + j][3 + i]))/4. + \
(9*(-phi[1 + k][1 + j][1 + i] + phi[1 + k][3 + j][1 + i]))/2. - (9*(-phi[1 + \
k][1 + j][2 + i] + phi[1 + k][3 + j][2 + i]))/2. + (3*(phi[1 + k][1 + j][i] - \
phi[1 + k][1 + j][2 + i] - phi[1 + k][3 + j][i] + phi[1 + k][3 + j][2 + \
i]))/2. + (3*(phi[1 + k][1 + j][1 + i] - phi[1 + k][1 + j][3 + i] - phi[1 + \
k][3 + j][1 + i] + phi[1 + k][3 + j][3 + i]))/4. - 19*phi[2 + k][1 + j][1 + \
i] + 6*(-phi[k][1 + j][1 + i] + phi[2 + k][1 + j][1 + i]) + 18*phi[2 + k][1 + \
j][2 + i] - 6*(-phi[k][1 + j][2 + i] + phi[2 + k][1 + j][2 + i]) - 6*(-phi[2 \
+ k][1 + j][i] + phi[2 + k][1 + j][2 + i]) + 2*(phi[k][1 + j][i] - phi[k][1 + \
j][2 + i] - phi[2 + k][1 + j][i] + phi[2 + k][1 + j][2 + i]) + phi[2 + k][1 + \
j][3 + i] - 3*(-phi[2 + k][1 + j][1 + i] + phi[2 + k][1 + j][3 + i]) + \
19*phi[2 + k][2 + j][1 + i] - 6*(-phi[k][2 + j][1 + i] + phi[2 + k][2 + j][1 \
+ i]) - (9*(-phi[2 + k][j][1 + i] + phi[2 + k][2 + j][1 + i]))/2. + \
(3*(phi[k][j][1 + i] - phi[k][2 + j][1 + i] - phi[2 + k][j][1 + i] + phi[2 + \
k][2 + j][1 + i]))/2. - 18*phi[2 + k][2 + j][2 + i] + 6*(-phi[k][2 + j][2 + \
i] + phi[2 + k][2 + j][2 + i]) + (9*(-phi[2 + k][j][2 + i] + phi[2 + k][2 + \
j][2 + i]))/2. - (3*(phi[k][j][2 + i] - phi[k][2 + j][2 + i] - phi[2 + \
k][j][2 + i] + phi[2 + k][2 + j][2 + i]))/2. + 6*(-phi[2 + k][2 + j][i] + \
phi[2 + k][2 + j][2 + i]) - 2*(phi[k][2 + j][i] - phi[k][2 + j][2 + i] - \
phi[2 + k][2 + j][i] + phi[2 + k][2 + j][2 + i]) - (3*(phi[2 + k][j][i] - \
phi[2 + k][j][2 + i] - phi[2 + k][2 + j][i] + phi[2 + k][2 + j][2 + i]))/2. + \
(-phi[k][j][i] + phi[k][j][2 + i] + phi[k][2 + j][i] - phi[k][2 + j][2 + i] + \
phi[2 + k][j][i] - phi[2 + k][j][2 + i] - phi[2 + k][2 + j][i] + phi[2 + k][2 \
+ j][2 + i])/2. - phi[2 + k][2 + j][3 + i] + 3*(-phi[2 + k][2 + j][1 + i] + \
phi[2 + k][2 + j][3 + i]) - (3*(phi[2 + k][j][1 + i] - phi[2 + k][j][3 + i] - \
phi[2 + k][2 + j][1 + i] + phi[2 + k][2 + j][3 + i]))/4. + (-phi[k][j][1 + i] \
+ phi[k][j][3 + i] + phi[k][2 + j][1 + i] - phi[k][2 + j][3 + i] + phi[2 + \
k][j][1 + i] - phi[2 + k][j][3 + i] - phi[2 + k][2 + j][1 + i] + phi[2 + k][2 \
+ j][3 + i])/4. - (9*(-phi[2 + k][1 + j][1 + i] + phi[2 + k][3 + j][1 + \
i]))/2. + (3*(phi[k][1 + j][1 + i] - phi[k][3 + j][1 + i] - phi[2 + k][1 + \
j][1 + i] + phi[2 + k][3 + j][1 + i]))/2. + (9*(-phi[2 + k][1 + j][2 + i] + \
phi[2 + k][3 + j][2 + i]))/2. - (3*(phi[k][1 + j][2 + i] - phi[k][3 + j][2 + \
i] - phi[2 + k][1 + j][2 + i] + phi[2 + k][3 + j][2 + i]))/2. - (3*(phi[2 + \
k][1 + j][i] - phi[2 + k][1 + j][2 + i] - phi[2 + k][3 + j][i] + phi[2 + k][3 \
+ j][2 + i]))/2. + (-phi[k][1 + j][i] + phi[k][1 + j][2 + i] + phi[k][3 + \
j][i] - phi[k][3 + j][2 + i] + phi[2 + k][1 + j][i] - phi[2 + k][1 + j][2 + \
i] - phi[2 + k][3 + j][i] + phi[2 + k][3 + j][2 + i])/2. - (3*(phi[2 + k][1 + \
j][1 + i] - phi[2 + k][1 + j][3 + i] - phi[2 + k][3 + j][1 + i] + phi[2 + \
k][3 + j][3 + i]))/4. + (-phi[k][1 + j][1 + i] + phi[k][1 + j][3 + i] + \
phi[k][3 + j][1 + i] - phi[k][3 + j][3 + i] + phi[2 + k][1 + j][1 + i] - \
phi[2 + k][1 + j][3 + i] - phi[2 + k][3 + j][1 + i] + phi[2 + k][3 + j][3 + \
i])/4. - phi[3 + k][1 + j][i] + 3*(-phi[1 + k][1 + j][1 + i] + phi[3 + k][1 + \
j][1 + i]) + phi[3 + k][1 + j][2 + i] - 3*(-phi[1 + k][1 + j][2 + i] + phi[3 \
+ k][1 + j][2 + i]) + (phi[1 + k][1 + j][1 + i] - phi[1 + k][1 + j][3 + i] - \
phi[3 + k][1 + j][1 + i] + phi[3 + k][1 + j][3 + i])/2. + phi[3 + k][2 + \
j][i] - 3*(-phi[1 + k][2 + j][1 + i] + phi[3 + k][2 + j][1 + i]) + (3*(phi[1 \
+ k][j][1 + i] - phi[1 + k][2 + j][1 + i] - phi[3 + k][j][1 + i] + phi[3 + \
k][2 + j][1 + i]))/4. - phi[3 + k][2 + j][2 + i] + 3*(-phi[1 + k][2 + j][2 + \
i] + phi[3 + k][2 + j][2 + i]) - (3*(phi[1 + k][j][2 + i] - phi[1 + k][2 + \
j][2 + i] - phi[3 + k][j][2 + i] + phi[3 + k][2 + j][2 + i]))/4. + (-phi[1 + \
k][j][i] + phi[1 + k][j][2 + i] + phi[1 + k][2 + j][i] - phi[1 + k][2 + j][2 \
+ i] + phi[3 + k][j][i] - phi[3 + k][j][2 + i] - phi[3 + k][2 + j][i] + phi[3 \
+ k][2 + j][2 + i])/4. + (-phi[1 + k][2 + j][1 + i] + phi[1 + k][2 + j][3 + \
i] + phi[3 + k][2 + j][1 + i] - phi[3 + k][2 + j][3 + i])/2. + (-phi[1 + \
k][j][1 + i] + phi[1 + k][j][3 + i] + phi[1 + k][2 + j][1 + i] - phi[1 + k][2 \
+ j][3 + i] + phi[3 + k][j][1 + i] - phi[3 + k][j][3 + i] - phi[3 + k][2 + \
j][1 + i] + phi[3 + k][2 + j][3 + i])/8. + (3*(phi[1 + k][1 + j][1 + i] - \
phi[1 + k][3 + j][1 + i] - phi[3 + k][1 + j][1 + i] + phi[3 + k][3 + j][1 + \
i]))/4. - (3*(phi[1 + k][1 + j][2 + i] - phi[1 + k][3 + j][2 + i] - phi[3 + \
k][1 + j][2 + i] + phi[3 + k][3 + j][2 + i]))/4. + (-phi[1 + k][1 + j][i] + \
phi[1 + k][1 + j][2 + i] + phi[1 + k][3 + j][i] - phi[1 + k][3 + j][2 + i] + \
phi[3 + k][1 + j][i] - phi[3 + k][1 + j][2 + i] - phi[3 + k][3 + j][i] + \
phi[3 + k][3 + j][2 + i])/4. + (-phi[1 + k][1 + j][1 + i] + phi[1 + k][1 + \
j][3 + i] + phi[1 + k][3 + j][1 + i] - phi[1 + k][3 + j][3 + i] + phi[3 + \
k][1 + j][1 + i] - phi[3 + k][1 + j][3 + i] - phi[3 + k][3 + j][1 + i] + \
phi[3 + k][3 + j][3 + i])/8.", 
        "-phi[k][j][1 + i] + phi[k][j][2 + i] - phi[k][1 + j][i] - 2*phi[k][1 \
+ j][1 + i] + 2*phi[k][1 + j][2 + i] + phi[k][1 + j][3 + i] + phi[k][2 + \
j][i] + 2*phi[k][2 + j][1 + i] - 2*phi[k][2 + j][2 + i] - phi[k][2 + j][3 + \
i] + phi[k][3 + j][1 + i] - phi[k][3 + j][2 + i] - 12*phi[1 + k][1 + j][1 + \
i] + 12*phi[1 + k][1 + j][2 + i] - 3*(-phi[1 + k][1 + j][i] + phi[1 + k][1 + \
j][2 + i]) - 3*(-phi[1 + k][1 + j][1 + i] + phi[1 + k][1 + j][3 + i]) + \
12*phi[1 + k][2 + j][1 + i] - 3*(-phi[1 + k][j][1 + i] + phi[1 + k][2 + j][1 \
+ i]) - 12*phi[1 + k][2 + j][2 + i] + 3*(-phi[1 + k][j][2 + i] + phi[1 + k][2 \
+ j][2 + i]) + 3*(-phi[1 + k][2 + j][i] + phi[1 + k][2 + j][2 + i]) - \
(3*(phi[1 + k][j][i] - phi[1 + k][j][2 + i] - phi[1 + k][2 + j][i] + phi[1 + \
k][2 + j][2 + i]))/4. + 3*(-phi[1 + k][2 + j][1 + i] + phi[1 + k][2 + j][3 + \
i]) - (3*(phi[1 + k][j][1 + i] - phi[1 + k][j][3 + i] - phi[1 + k][2 + j][1 + \
i] + phi[1 + k][2 + j][3 + i]))/4. - 3*(-phi[1 + k][1 + j][1 + i] + phi[1 + \
k][3 + j][1 + i]) + 3*(-phi[1 + k][1 + j][2 + i] + phi[1 + k][3 + j][2 + i]) \
- (3*(phi[1 + k][1 + j][i] - phi[1 + k][1 + j][2 + i] - phi[1 + k][3 + j][i] \
+ phi[1 + k][3 + j][2 + i]))/4. - (3*(phi[1 + k][1 + j][1 + i] - phi[1 + k][1 \
+ j][3 + i] - phi[1 + k][3 + j][1 + i] + phi[1 + k][3 + j][3 + i]))/4. + \
phi[2 + k][j][1 + i] - phi[2 + k][j][2 + i] + phi[2 + k][1 + j][i] + 14*phi[2 \
+ k][1 + j][1 + i] - 4*(-phi[k][1 + j][1 + i] + phi[2 + k][1 + j][1 + i]) - \
14*phi[2 + k][1 + j][2 + i] + 4*(-phi[k][1 + j][2 + i] + phi[2 + k][1 + j][2 \
+ i]) + 3*(-phi[2 + k][1 + j][i] + phi[2 + k][1 + j][2 + i]) - phi[2 + k][1 + \
j][3 + i] + 3*(-phi[2 + k][1 + j][1 + i] + phi[2 + k][1 + j][3 + i]) - phi[2 \
+ k][2 + j][i] - 14*phi[2 + k][2 + j][1 + i] + 4*(-phi[k][2 + j][1 + i] + \
phi[2 + k][2 + j][1 + i]) + 3*(-phi[2 + k][j][1 + i] + phi[2 + k][2 + j][1 + \
i]) + (phi[k][j][i] - phi[k][j][2 + i] - phi[k][2 + j][i] + phi[k][2 + j][2 + \
i] - phi[2 + k][j][i] + phi[2 + k][j][2 + i] + phi[2 + k][2 + j][i] - phi[2 + \
k][2 + j][2 + i])/4. + 14*phi[2 + k][2 + j][2 + i] - 4*(-phi[k][2 + j][2 + i] \
+ phi[2 + k][2 + j][2 + i]) - 3*(-phi[2 + k][j][2 + i] + phi[2 + k][2 + j][2 \
+ i]) - 3*(-phi[2 + k][2 + j][i] + phi[2 + k][2 + j][2 + i]) + (3*(phi[2 + \
k][j][i] - phi[2 + k][j][2 + i] - phi[2 + k][2 + j][i] + phi[2 + k][2 + j][2 \
+ i]))/4. + (phi[k][j][1 + i] - phi[k][j][3 + i] - phi[k][2 + j][1 + i] + \
phi[k][2 + j][3 + i] - phi[2 + k][j][1 + i] + phi[2 + k][j][3 + i] + phi[2 + \
k][2 + j][1 + i] - phi[2 + k][2 + j][3 + i])/4. + phi[2 + k][2 + j][3 + i] - \
3*(-phi[2 + k][2 + j][1 + i] + phi[2 + k][2 + j][3 + i]) + (3*(phi[2 + \
k][j][1 + i] - phi[2 + k][j][3 + i] - phi[2 + k][2 + j][1 + i] + phi[2 + k][2 \
+ j][3 + i]))/4. - phi[2 + k][3 + j][1 + i] + 3*(-phi[2 + k][1 + j][1 + i] + \
phi[2 + k][3 + j][1 + i]) + (phi[k][1 + j][i] - phi[k][1 + j][2 + i] - \
phi[k][3 + j][i] + phi[k][3 + j][2 + i] - phi[2 + k][1 + j][i] + phi[2 + k][1 \
+ j][2 + i] + phi[2 + k][3 + j][i] - phi[2 + k][3 + j][2 + i])/4. + phi[2 + \
k][3 + j][2 + i] - 3*(-phi[2 + k][1 + j][2 + i] + phi[2 + k][3 + j][2 + i]) + \
(3*(phi[2 + k][1 + j][i] - phi[2 + k][1 + j][2 + i] - phi[2 + k][3 + j][i] + \
phi[2 + k][3 + j][2 + i]))/4. + (phi[k][1 + j][1 + i] - phi[k][1 + j][3 + i] \
- phi[k][3 + j][1 + i] + phi[k][3 + j][3 + i] - phi[2 + k][1 + j][1 + i] + \
phi[2 + k][1 + j][3 + i] + phi[2 + k][3 + j][1 + i] - phi[2 + k][3 + j][3 + \
i])/4. + (3*(phi[2 + k][1 + j][1 + i] - phi[2 + k][1 + j][3 + i] - phi[2 + \
k][3 + j][1 + i] + phi[2 + k][3 + j][3 + i]))/4. - 2*(-phi[1 + k][1 + j][1 + \
i] + phi[3 + k][1 + j][1 + i]) + (-phi[1 + k][1 + j][i] + phi[1 + k][1 + j][2 \
+ i] + phi[3 + k][1 + j][i] - phi[3 + k][1 + j][2 + i])/2. + 2*(-phi[1 + k][1 \
+ j][2 + i] + phi[3 + k][1 + j][2 + i]) + (-phi[1 + k][1 + j][1 + i] + phi[1 \
+ k][1 + j][3 + i] + phi[3 + k][1 + j][1 + i] - phi[3 + k][1 + j][3 + i])/2. \
+ (-phi[1 + k][j][1 + i] + phi[1 + k][2 + j][1 + i] + phi[3 + k][j][1 + i] - \
phi[3 + k][2 + j][1 + i])/2. + 2*(-phi[1 + k][2 + j][1 + i] + phi[3 + k][2 + \
j][1 + i]) + (phi[1 + k][j][i] - phi[1 + k][j][2 + i] - phi[1 + k][2 + j][i] \
+ phi[1 + k][2 + j][2 + i] - phi[3 + k][j][i] + phi[3 + k][j][2 + i] + phi[3 \
+ k][2 + j][i] - phi[3 + k][2 + j][2 + i])/8. - 2*(-phi[1 + k][2 + j][2 + i] \
+ phi[3 + k][2 + j][2 + i]) + (phi[1 + k][j][2 + i] - phi[1 + k][2 + j][2 + \
i] - phi[3 + k][j][2 + i] + phi[3 + k][2 + j][2 + i])/2. + (phi[1 + k][2 + \
j][i] - phi[1 + k][2 + j][2 + i] - phi[3 + k][2 + j][i] + phi[3 + k][2 + j][2 \
+ i])/2. + (phi[1 + k][j][1 + i] - phi[1 + k][j][3 + i] - phi[1 + k][2 + j][1 \
+ i] + phi[1 + k][2 + j][3 + i] - phi[3 + k][j][1 + i] + phi[3 + k][j][3 + i] \
+ phi[3 + k][2 + j][1 + i] - phi[3 + k][2 + j][3 + i])/8. + (phi[1 + k][2 + \
j][1 + i] - phi[1 + k][2 + j][3 + i] - phi[3 + k][2 + j][1 + i] + phi[3 + \
k][2 + j][3 + i])/2. + (-phi[1 + k][1 + j][1 + i] + phi[1 + k][3 + j][1 + i] \
+ phi[3 + k][1 + j][1 + i] - phi[3 + k][3 + j][1 + i])/2. + (phi[1 + k][1 + \
j][i] - phi[1 + k][1 + j][2 + i] - phi[1 + k][3 + j][i] + phi[1 + k][3 + j][2 \
+ i] - phi[3 + k][1 + j][i] + phi[3 + k][1 + j][2 + i] + phi[3 + k][3 + j][i] \
- phi[3 + k][3 + j][2 + i])/8. + (phi[1 + k][1 + j][2 + i] - phi[1 + k][3 + \
j][2 + i] - phi[3 + k][1 + j][2 + i] + phi[3 + k][3 + j][2 + i])/2. + (phi[1 \
+ k][1 + j][1 + i] - phi[1 + k][1 + j][3 + i] - phi[1 + k][3 + j][1 + i] + \
phi[1 + k][3 + j][3 + i] - phi[3 + k][1 + j][1 + i] + phi[3 + k][1 + j][3 + \
i] + phi[3 + k][3 + j][1 + i] - phi[3 + k][3 + j][3 + i])/8.", 
        "2*phi[1 + k][1 + j][1 + i] - 2*phi[2 + k][1 + j][1 + i] + (-phi[k][1 \
+ j][1 + i] + phi[2 + k][1 + j][1 + i])/2. + (-phi[1 + k][1 + j][1 + i] + \
phi[3 + k][1 + j][1 + i])/2.", 
        "-phi[1 + k][1 + j][i] + phi[1 + k][1 + j][2 + i] + phi[2 + k][1 + \
j][i] - phi[2 + k][1 + j][2 + i] + (phi[k][1 + j][i] - phi[k][1 + j][2 + i] - \
phi[2 + k][1 + j][i] + phi[2 + k][1 + j][2 + i])/4. + (phi[1 + k][1 + j][i] - \
phi[1 + k][1 + j][2 + i] - phi[3 + k][1 + j][i] + phi[3 + k][1 + j][2 + \
i])/4.", "-5*phi[1 + k][1 + j][1 + i] + 6*phi[1 + k][1 + j][2 + i] - \
2*(-phi[1 + k][1 + j][i] + phi[1 + k][1 + j][2 + i]) - phi[1 + k][1 + j][3 + \
i] + 5*phi[2 + k][1 + j][1 + i] - (3*(-phi[k][1 + j][1 + i] + phi[2 + k][1 + \
j][1 + i]))/2. + (-phi[k][1 + j][i] + phi[k][1 + j][2 + i] + phi[2 + k][1 + \
j][i] - phi[2 + k][1 + j][2 + i])/2. - 6*phi[2 + k][1 + j][2 + i] + \
(3*(-phi[k][1 + j][2 + i] + phi[2 + k][1 + j][2 + i]))/2. + 2*(-phi[2 + k][1 \
+ j][i] + phi[2 + k][1 + j][2 + i]) + (-phi[k][1 + j][1 + i] + phi[k][1 + \
j][3 + i] + phi[2 + k][1 + j][1 + i] - phi[2 + k][1 + j][3 + i])/4. + phi[2 + \
k][1 + j][3 + i] - (3*(-phi[1 + k][1 + j][1 + i] + phi[3 + k][1 + j][1 + \
i]))/2. + (-phi[1 + k][1 + j][i] + phi[1 + k][1 + j][2 + i] + phi[3 + k][1 + \
j][i] - phi[3 + k][1 + j][2 + i])/2. + (3*(-phi[1 + k][1 + j][2 + i] + phi[3 \
+ k][1 + j][2 + i]))/2. + (-phi[1 + k][1 + j][1 + i] + phi[1 + k][1 + j][3 + \
i] + phi[3 + k][1 + j][1 + i] - phi[3 + k][1 + j][3 + i])/4.", 
        "-phi[k][1 + j][1 + i] + phi[k][1 + j][2 + i] - phi[1 + k][1 + j][i] \
+ 2*phi[1 + k][1 + j][1 + i] - 2*phi[1 + k][1 + j][2 + i] + phi[1 + k][1 + \
j][3 + i] + phi[2 + k][1 + j][i] - 2*phi[2 + k][1 + j][1 + i] + 2*phi[2 + \
k][1 + j][2 + i] + (phi[k][1 + j][i] - phi[k][1 + j][2 + i] - phi[2 + k][1 + \
j][i] + phi[2 + k][1 + j][2 + i])/4. - phi[2 + k][1 + j][3 + i] + (phi[k][1 + \
j][1 + i] - phi[k][1 + j][3 + i] - phi[2 + k][1 + j][1 + i] + phi[2 + k][1 + \
j][3 + i])/4. + phi[3 + k][1 + j][1 + i] - phi[3 + k][1 + j][2 + i] + (phi[1 \
+ k][1 + j][i] - phi[1 + k][1 + j][2 + i] - phi[3 + k][1 + j][i] + phi[3 + \
k][1 + j][2 + i])/4. + (phi[1 + k][1 + j][1 + i] - phi[1 + k][1 + j][3 + i] - \
phi[3 + k][1 + j][1 + i] + phi[3 + k][1 + j][3 + i])/4.", 
        "-phi[1 + k][j][1 + i] + phi[1 + k][2 + j][1 + i] + phi[2 + k][j][1 + \
i] - phi[2 + k][2 + j][1 + i] + (phi[k][j][1 + i] - phi[k][2 + j][1 + i] - \
phi[2 + k][j][1 + i] + phi[2 + k][2 + j][1 + i])/4. + (phi[1 + k][j][1 + i] - \
phi[1 + k][2 + j][1 + i] - phi[3 + k][j][1 + i] + phi[3 + k][2 + j][1 + \
i])/4.", "(phi[1 + k][j][i] - phi[1 + k][j][2 + i] - phi[1 + k][2 + j][i] + \
phi[1 + k][2 + j][2 + i])/2. + (-phi[2 + k][j][i] + phi[2 + k][j][2 + i] + \
phi[2 + k][2 + j][i] - phi[2 + k][2 + j][2 + i])/2. + (-phi[k][j][i] + \
phi[k][j][2 + i] + phi[k][2 + j][i] - phi[k][2 + j][2 + i] + phi[2 + k][j][i] \
- phi[2 + k][j][2 + i] - phi[2 + k][2 + j][i] + phi[2 + k][2 + j][2 + i])/8. \
+ (-phi[1 + k][j][i] + phi[1 + k][j][2 + i] + phi[1 + k][2 + j][i] - phi[1 + \
k][2 + j][2 + i] + phi[3 + k][j][i] - phi[3 + k][j][2 + i] - phi[3 + k][2 + \
j][i] + phi[3 + k][2 + j][2 + i])/8.", 
        "-phi[1 + k][j][i] + phi[1 + k][j][2 + i] + phi[1 + k][2 + j][i] - \
3*(-phi[1 + k][j][1 + i] + phi[1 + k][2 + j][1 + i]) - phi[1 + k][2 + j][2 + \
i] + 3*(-phi[1 + k][j][2 + i] + phi[1 + k][2 + j][2 + i]) + (-phi[1 + k][j][1 \
+ i] + phi[1 + k][j][3 + i] + phi[1 + k][2 + j][1 + i] - phi[1 + k][2 + j][3 \
+ i])/2. + phi[2 + k][j][i] - phi[2 + k][j][2 + i] - phi[2 + k][2 + j][i] + \
3*(-phi[2 + k][j][1 + i] + phi[2 + k][2 + j][1 + i]) - (3*(phi[k][j][1 + i] - \
phi[k][2 + j][1 + i] - phi[2 + k][j][1 + i] + phi[2 + k][2 + j][1 + i]))/4. + \
(phi[k][j][i] - phi[k][j][2 + i] - phi[k][2 + j][i] + phi[k][2 + j][2 + i] - \
phi[2 + k][j][i] + phi[2 + k][j][2 + i] + phi[2 + k][2 + j][i] - phi[2 + k][2 \
+ j][2 + i])/4. + phi[2 + k][2 + j][2 + i] - 3*(-phi[2 + k][j][2 + i] + phi[2 \
+ k][2 + j][2 + i]) + (3*(phi[k][j][2 + i] - phi[k][2 + j][2 + i] - phi[2 + \
k][j][2 + i] + phi[2 + k][2 + j][2 + i]))/4. + (phi[k][j][1 + i] - \
phi[k][j][3 + i] - phi[k][2 + j][1 + i] + phi[k][2 + j][3 + i] - phi[2 + \
k][j][1 + i] + phi[2 + k][j][3 + i] + phi[2 + k][2 + j][1 + i] - phi[2 + k][2 \
+ j][3 + i])/8. + (phi[2 + k][j][1 + i] - phi[2 + k][j][3 + i] - phi[2 + k][2 \
+ j][1 + i] + phi[2 + k][2 + j][3 + i])/2. - (3*(phi[1 + k][j][1 + i] - phi[1 \
+ k][2 + j][1 + i] - phi[3 + k][j][1 + i] + phi[3 + k][2 + j][1 + i]))/4. + \
(phi[1 + k][j][i] - phi[1 + k][j][2 + i] - phi[1 + k][2 + j][i] + phi[1 + \
k][2 + j][2 + i] - phi[3 + k][j][i] + phi[3 + k][j][2 + i] + phi[3 + k][2 + \
j][i] - phi[3 + k][2 + j][2 + i])/4. + (3*(phi[1 + k][j][2 + i] - phi[1 + \
k][2 + j][2 + i] - phi[3 + k][j][2 + i] + phi[3 + k][2 + j][2 + i]))/4. + \
(phi[1 + k][j][1 + i] - phi[1 + k][j][3 + i] - phi[1 + k][2 + j][1 + i] + \
phi[1 + k][2 + j][3 + i] - phi[3 + k][j][1 + i] + phi[3 + k][j][3 + i] + \
phi[3 + k][2 + j][1 + i] - phi[3 + k][2 + j][3 + i])/8.", 
        "2*(-phi[1 + k][j][1 + i] + phi[1 + k][2 + j][1 + i]) - 2*(-phi[1 + \
k][j][2 + i] + phi[1 + k][2 + j][2 + i]) + (phi[1 + k][j][i] - phi[1 + \
k][j][2 + i] - phi[1 + k][2 + j][i] + phi[1 + k][2 + j][2 + i])/2. + (phi[1 + \
k][j][1 + i] - phi[1 + k][j][3 + i] - phi[1 + k][2 + j][1 + i] + phi[1 + k][2 \
+ j][3 + i])/2. - 2*(-phi[2 + k][j][1 + i] + phi[2 + k][2 + j][1 + i]) + \
(phi[k][j][1 + i] - phi[k][2 + j][1 + i] - phi[2 + k][j][1 + i] + phi[2 + \
k][2 + j][1 + i])/2. + (-phi[k][j][2 + i] + phi[k][2 + j][2 + i] + phi[2 + \
k][j][2 + i] - phi[2 + k][2 + j][2 + i])/2. + (-phi[2 + k][j][i] + phi[2 + \
k][j][2 + i] + phi[2 + k][2 + j][i] - phi[2 + k][2 + j][2 + i])/2. + \
2*(-phi[2 + k][j][2 + i] + phi[2 + k][2 + j][2 + i]) + (-phi[k][j][i] + \
phi[k][j][2 + i] + phi[k][2 + j][i] - phi[k][2 + j][2 + i] + phi[2 + k][j][i] \
- phi[2 + k][j][2 + i] - phi[2 + k][2 + j][i] + phi[2 + k][2 + j][2 + i])/8. \
+ (-phi[2 + k][j][1 + i] + phi[2 + k][j][3 + i] + phi[2 + k][2 + j][1 + i] - \
phi[2 + k][2 + j][3 + i])/2. + (-phi[k][j][1 + i] + phi[k][j][3 + i] + \
phi[k][2 + j][1 + i] - phi[k][2 + j][3 + i] + phi[2 + k][j][1 + i] - phi[2 + \
k][j][3 + i] - phi[2 + k][2 + j][1 + i] + phi[2 + k][2 + j][3 + i])/8. + \
(phi[1 + k][j][1 + i] - phi[1 + k][2 + j][1 + i] - phi[3 + k][j][1 + i] + \
phi[3 + k][2 + j][1 + i])/2. + (-phi[1 + k][j][2 + i] + phi[1 + k][2 + j][2 + \
i] + phi[3 + k][j][2 + i] - phi[3 + k][2 + j][2 + i])/2. + (-phi[1 + k][j][i] \
+ phi[1 + k][j][2 + i] + phi[1 + k][2 + j][i] - phi[1 + k][2 + j][2 + i] + \
phi[3 + k][j][i] - phi[3 + k][j][2 + i] - phi[3 + k][2 + j][i] + phi[3 + k][2 \
+ j][2 + i])/8. + (-phi[1 + k][j][1 + i] + phi[1 + k][j][3 + i] + phi[1 + \
k][2 + j][1 + i] - phi[1 + k][2 + j][3 + i] + phi[3 + k][j][1 + i] - phi[3 + \
k][j][3 + i] - phi[3 + k][2 + j][1 + i] + phi[3 + k][2 + j][3 + i])/8.", 
        "-5*phi[1 + k][1 + j][1 + i] + 6*phi[1 + k][2 + j][1 + i] - 2*(-phi[1 \
+ k][j][1 + i] + phi[1 + k][2 + j][1 + i]) - phi[1 + k][3 + j][1 + i] + \
5*phi[2 + k][1 + j][1 + i] - (3*(-phi[k][1 + j][1 + i] + phi[2 + k][1 + j][1 \
+ i]))/2. + (-phi[k][j][1 + i] + phi[k][2 + j][1 + i] + phi[2 + k][j][1 + i] \
- phi[2 + k][2 + j][1 + i])/2. - 6*phi[2 + k][2 + j][1 + i] + (3*(-phi[k][2 + \
j][1 + i] + phi[2 + k][2 + j][1 + i]))/2. + 2*(-phi[2 + k][j][1 + i] + phi[2 \
+ k][2 + j][1 + i]) + (-phi[k][1 + j][1 + i] + phi[k][3 + j][1 + i] + phi[2 + \
k][1 + j][1 + i] - phi[2 + k][3 + j][1 + i])/4. + phi[2 + k][3 + j][1 + i] - \
(3*(-phi[1 + k][1 + j][1 + i] + phi[3 + k][1 + j][1 + i]))/2. + (-phi[1 + \
k][j][1 + i] + phi[1 + k][2 + j][1 + i] + phi[3 + k][j][1 + i] - phi[3 + k][2 \
+ j][1 + i])/2. + (3*(-phi[1 + k][2 + j][1 + i] + phi[3 + k][2 + j][1 + \
i]))/2. + (-phi[1 + k][1 + j][1 + i] + phi[1 + k][3 + j][1 + i] + phi[3 + \
k][1 + j][1 + i] - phi[3 + k][3 + j][1 + i])/4.", 
        "-phi[1 + k][j][i] + phi[1 + k][j][2 + i] - 3*(-phi[1 + k][1 + j][i] \
+ phi[1 + k][1 + j][2 + i]) + phi[1 + k][2 + j][i] - phi[1 + k][2 + j][2 + i] \
+ 3*(-phi[1 + k][2 + j][i] + phi[1 + k][2 + j][2 + i]) + (-phi[1 + k][1 + \
j][i] + phi[1 + k][1 + j][2 + i] + phi[1 + k][3 + j][i] - phi[1 + k][3 + j][2 \
+ i])/2. + phi[2 + k][j][i] - phi[2 + k][j][2 + i] + 3*(-phi[2 + k][1 + j][i] \
+ phi[2 + k][1 + j][2 + i]) - (3*(phi[k][1 + j][i] - phi[k][1 + j][2 + i] - \
phi[2 + k][1 + j][i] + phi[2 + k][1 + j][2 + i]))/4. - phi[2 + k][2 + j][i] + \
(phi[k][j][i] - phi[k][j][2 + i] - phi[k][2 + j][i] + phi[k][2 + j][2 + i] - \
phi[2 + k][j][i] + phi[2 + k][j][2 + i] + phi[2 + k][2 + j][i] - phi[2 + k][2 \
+ j][2 + i])/4. + phi[2 + k][2 + j][2 + i] - 3*(-phi[2 + k][2 + j][i] + phi[2 \
+ k][2 + j][2 + i]) + (3*(phi[k][2 + j][i] - phi[k][2 + j][2 + i] - phi[2 + \
k][2 + j][i] + phi[2 + k][2 + j][2 + i]))/4. + (phi[k][1 + j][i] - phi[k][1 + \
j][2 + i] - phi[k][3 + j][i] + phi[k][3 + j][2 + i] - phi[2 + k][1 + j][i] + \
phi[2 + k][1 + j][2 + i] + phi[2 + k][3 + j][i] - phi[2 + k][3 + j][2 + \
i])/8. + (phi[2 + k][1 + j][i] - phi[2 + k][1 + j][2 + i] - phi[2 + k][3 + \
j][i] + phi[2 + k][3 + j][2 + i])/2. - (3*(phi[1 + k][1 + j][i] - phi[1 + \
k][1 + j][2 + i] - phi[3 + k][1 + j][i] + phi[3 + k][1 + j][2 + i]))/4. + \
(phi[1 + k][j][i] - phi[1 + k][j][2 + i] - phi[1 + k][2 + j][i] + phi[1 + \
k][2 + j][2 + i] - phi[3 + k][j][i] + phi[3 + k][j][2 + i] + phi[3 + k][2 + \
j][i] - phi[3 + k][2 + j][2 + i])/4. + (3*(phi[1 + k][2 + j][i] - phi[1 + \
k][2 + j][2 + i] - phi[3 + k][2 + j][i] + phi[3 + k][2 + j][2 + i]))/4. + \
(phi[1 + k][1 + j][i] - phi[1 + k][1 + j][2 + i] - phi[1 + k][3 + j][i] + \
phi[1 + k][3 + j][2 + i] - phi[3 + k][1 + j][i] + phi[3 + k][1 + j][2 + i] + \
phi[3 + k][3 + j][i] - phi[3 + k][3 + j][2 + i])/8.", 
        "phi[1 + k][j][1 + i] - phi[1 + k][j][3 + i] + phi[1 + k][1 + j][i] + \
18*phi[1 + k][1 + j][1 + i] - 19*phi[1 + k][1 + j][2 + i] + 6*(-phi[1 + k][1 \
+ j][i] + phi[1 + k][1 + j][2 + i]) + 3*(-phi[1 + k][1 + j][1 + i] + phi[1 + \
k][1 + j][3 + i]) - 19*phi[1 + k][2 + j][1 + i] + 6*(-phi[1 + k][j][1 + i] + \
phi[1 + k][2 + j][1 + i]) + 18*phi[1 + k][2 + j][2 + i] - 6*(-phi[1 + k][j][2 \
+ i] + phi[1 + k][2 + j][2 + i]) - 6*(-phi[1 + k][2 + j][i] + phi[1 + k][2 + \
j][2 + i]) + 2*(phi[1 + k][j][i] - phi[1 + k][j][2 + i] - phi[1 + k][2 + \
j][i] + phi[1 + k][2 + j][2 + i]) + phi[1 + k][2 + j][3 + i] - 3*(-phi[1 + \
k][2 + j][1 + i] + phi[1 + k][2 + j][3 + i]) - phi[1 + k][3 + j][i] + \
3*(-phi[1 + k][1 + j][1 + i] + phi[1 + k][3 + j][1 + i]) + phi[1 + k][3 + \
j][2 + i] - 3*(-phi[1 + k][1 + j][2 + i] + phi[1 + k][3 + j][2 + i]) + (phi[1 \
+ k][1 + j][1 + i] - phi[1 + k][1 + j][3 + i] - phi[1 + k][3 + j][1 + i] + \
phi[1 + k][3 + j][3 + i])/2. - phi[2 + k][j][1 + i] + phi[2 + k][j][3 + i] - \
phi[2 + k][1 + j][i] - 18*phi[2 + k][1 + j][1 + i] + (9*(-phi[k][1 + j][1 + \
i] + phi[2 + k][1 + j][1 + i]))/2. + 19*phi[2 + k][1 + j][2 + i] - \
(9*(-phi[k][1 + j][2 + i] + phi[2 + k][1 + j][2 + i]))/2. - 6*(-phi[2 + k][1 \
+ j][i] + phi[2 + k][1 + j][2 + i]) + (3*(phi[k][1 + j][i] - phi[k][1 + j][2 \
+ i] - phi[2 + k][1 + j][i] + phi[2 + k][1 + j][2 + i]))/2. - 3*(-phi[2 + \
k][1 + j][1 + i] + phi[2 + k][1 + j][3 + i]) + (3*(phi[k][1 + j][1 + i] - \
phi[k][1 + j][3 + i] - phi[2 + k][1 + j][1 + i] + phi[2 + k][1 + j][3 + \
i]))/4. + 19*phi[2 + k][2 + j][1 + i] - (9*(-phi[k][2 + j][1 + i] + phi[2 + \
k][2 + j][1 + i]))/2. - 6*(-phi[2 + k][j][1 + i] + phi[2 + k][2 + j][1 + i]) \
+ (3*(phi[k][j][1 + i] - phi[k][2 + j][1 + i] - phi[2 + k][j][1 + i] + phi[2 \
+ k][2 + j][1 + i]))/2. - 18*phi[2 + k][2 + j][2 + i] + (9*(-phi[k][2 + j][2 \
+ i] + phi[2 + k][2 + j][2 + i]))/2. + 6*(-phi[2 + k][j][2 + i] + phi[2 + \
k][2 + j][2 + i]) - (3*(phi[k][j][2 + i] - phi[k][2 + j][2 + i] - phi[2 + \
k][j][2 + i] + phi[2 + k][2 + j][2 + i]))/2. + 6*(-phi[2 + k][2 + j][i] + \
phi[2 + k][2 + j][2 + i]) - (3*(phi[k][2 + j][i] - phi[k][2 + j][2 + i] - \
phi[2 + k][2 + j][i] + phi[2 + k][2 + j][2 + i]))/2. - 2*(phi[2 + k][j][i] - \
phi[2 + k][j][2 + i] - phi[2 + k][2 + j][i] + phi[2 + k][2 + j][2 + i]) + \
(-phi[k][j][i] + phi[k][j][2 + i] + phi[k][2 + j][i] - phi[k][2 + j][2 + i] + \
phi[2 + k][j][i] - phi[2 + k][j][2 + i] - phi[2 + k][2 + j][i] + phi[2 + k][2 \
+ j][2 + i])/2. - phi[2 + k][2 + j][3 + i] + 3*(-phi[2 + k][2 + j][1 + i] + \
phi[2 + k][2 + j][3 + i]) - (3*(phi[k][2 + j][1 + i] - phi[k][2 + j][3 + i] - \
phi[2 + k][2 + j][1 + i] + phi[2 + k][2 + j][3 + i]))/4. + (-phi[k][j][1 + i] \
+ phi[k][j][3 + i] + phi[k][2 + j][1 + i] - phi[k][2 + j][3 + i] + phi[2 + \
k][j][1 + i] - phi[2 + k][j][3 + i] - phi[2 + k][2 + j][1 + i] + phi[2 + k][2 \
+ j][3 + i])/4. + phi[2 + k][3 + j][i] - 3*(-phi[2 + k][1 + j][1 + i] + phi[2 \
+ k][3 + j][1 + i]) + (3*(phi[k][1 + j][1 + i] - phi[k][3 + j][1 + i] - phi[2 \
+ k][1 + j][1 + i] + phi[2 + k][3 + j][1 + i]))/4. - phi[2 + k][3 + j][2 + i] \
+ 3*(-phi[2 + k][1 + j][2 + i] + phi[2 + k][3 + j][2 + i]) - (3*(phi[k][1 + \
j][2 + i] - phi[k][3 + j][2 + i] - phi[2 + k][1 + j][2 + i] + phi[2 + k][3 + \
j][2 + i]))/4. + (-phi[k][1 + j][i] + phi[k][1 + j][2 + i] + phi[k][3 + j][i] \
- phi[k][3 + j][2 + i] + phi[2 + k][1 + j][i] - phi[2 + k][1 + j][2 + i] - \
phi[2 + k][3 + j][i] + phi[2 + k][3 + j][2 + i])/4. + (-phi[2 + k][1 + j][1 + \
i] + phi[2 + k][1 + j][3 + i] + phi[2 + k][3 + j][1 + i] - phi[2 + k][3 + \
j][3 + i])/2. + (-phi[k][1 + j][1 + i] + phi[k][1 + j][3 + i] + phi[k][3 + \
j][1 + i] - phi[k][3 + j][3 + i] + phi[2 + k][1 + j][1 + i] - phi[2 + k][1 + \
j][3 + i] - phi[2 + k][3 + j][1 + i] + phi[2 + k][3 + j][3 + i])/8. + \
(9*(-phi[1 + k][1 + j][1 + i] + phi[3 + k][1 + j][1 + i]))/2. - (9*(-phi[1 + \
k][1 + j][2 + i] + phi[3 + k][1 + j][2 + i]))/2. + (3*(phi[1 + k][1 + j][i] - \
phi[1 + k][1 + j][2 + i] - phi[3 + k][1 + j][i] + phi[3 + k][1 + j][2 + \
i]))/2. + (3*(phi[1 + k][1 + j][1 + i] - phi[1 + k][1 + j][3 + i] - phi[3 + \
k][1 + j][1 + i] + phi[3 + k][1 + j][3 + i]))/4. - (9*(-phi[1 + k][2 + j][1 + \
i] + phi[3 + k][2 + j][1 + i]))/2. + (3*(phi[1 + k][j][1 + i] - phi[1 + k][2 \
+ j][1 + i] - phi[3 + k][j][1 + i] + phi[3 + k][2 + j][1 + i]))/2. + \
(9*(-phi[1 + k][2 + j][2 + i] + phi[3 + k][2 + j][2 + i]))/2. - (3*(phi[1 + \
k][j][2 + i] - phi[1 + k][2 + j][2 + i] - phi[3 + k][j][2 + i] + phi[3 + k][2 \
+ j][2 + i]))/2. - (3*(phi[1 + k][2 + j][i] - phi[1 + k][2 + j][2 + i] - \
phi[3 + k][2 + j][i] + phi[3 + k][2 + j][2 + i]))/2. + (-phi[1 + k][j][i] + \
phi[1 + k][j][2 + i] + phi[1 + k][2 + j][i] - phi[1 + k][2 + j][2 + i] + \
phi[3 + k][j][i] - phi[3 + k][j][2 + i] - phi[3 + k][2 + j][i] + phi[3 + k][2 \
+ j][2 + i])/2. - (3*(phi[1 + k][2 + j][1 + i] - phi[1 + k][2 + j][3 + i] - \
phi[3 + k][2 + j][1 + i] + phi[3 + k][2 + j][3 + i]))/4. + (-phi[1 + k][j][1 \
+ i] + phi[1 + k][j][3 + i] + phi[1 + k][2 + j][1 + i] - phi[1 + k][2 + j][3 \
+ i] + phi[3 + k][j][1 + i] - phi[3 + k][j][3 + i] - phi[3 + k][2 + j][1 + i] \
+ phi[3 + k][2 + j][3 + i])/4. + (3*(phi[1 + k][1 + j][1 + i] - phi[1 + k][3 \
+ j][1 + i] - phi[3 + k][1 + j][1 + i] + phi[3 + k][3 + j][1 + i]))/4. - \
(3*(phi[1 + k][1 + j][2 + i] - phi[1 + k][3 + j][2 + i] - phi[3 + k][1 + j][2 \
+ i] + phi[3 + k][3 + j][2 + i]))/4. + (-phi[1 + k][1 + j][i] + phi[1 + k][1 \
+ j][2 + i] + phi[1 + k][3 + j][i] - phi[1 + k][3 + j][2 + i] + phi[3 + k][1 \
+ j][i] - phi[3 + k][1 + j][2 + i] - phi[3 + k][3 + j][i] + phi[3 + k][3 + \
j][2 + i])/4. + (-phi[1 + k][1 + j][1 + i] + phi[1 + k][1 + j][3 + i] + phi[1 \
+ k][3 + j][1 + i] - phi[1 + k][3 + j][3 + i] + phi[3 + k][1 + j][1 + i] - \
phi[3 + k][1 + j][3 + i] - phi[3 + k][3 + j][1 + i] + phi[3 + k][3 + j][3 + \
i])/8.", "-phi[k][j][1 + i] + phi[k][j][2 + i] + phi[k][2 + j][1 + i] - \
phi[k][2 + j][2 + i] - phi[1 + k][j][i] - 2*phi[1 + k][j][1 + i] + 2*phi[1 + \
k][j][2 + i] + phi[1 + k][j][3 + i] - 12*phi[1 + k][1 + j][1 + i] + 12*phi[1 \
+ k][1 + j][2 + i] - 3*(-phi[1 + k][1 + j][i] + phi[1 + k][1 + j][2 + i]) - \
3*(-phi[1 + k][1 + j][1 + i] + phi[1 + k][1 + j][3 + i]) + phi[1 + k][2 + \
j][i] + 14*phi[1 + k][2 + j][1 + i] - 4*(-phi[1 + k][j][1 + i] + phi[1 + k][2 \
+ j][1 + i]) - 14*phi[1 + k][2 + j][2 + i] + 4*(-phi[1 + k][j][2 + i] + phi[1 \
+ k][2 + j][2 + i]) + 3*(-phi[1 + k][2 + j][i] + phi[1 + k][2 + j][2 + i]) - \
phi[1 + k][2 + j][3 + i] + 3*(-phi[1 + k][2 + j][1 + i] + phi[1 + k][2 + j][3 \
+ i]) - 2*(-phi[1 + k][1 + j][1 + i] + phi[1 + k][3 + j][1 + i]) + (-phi[1 + \
k][1 + j][i] + phi[1 + k][1 + j][2 + i] + phi[1 + k][3 + j][i] - phi[1 + k][3 \
+ j][2 + i])/2. + 2*(-phi[1 + k][1 + j][2 + i] + phi[1 + k][3 + j][2 + i]) + \
(-phi[1 + k][1 + j][1 + i] + phi[1 + k][1 + j][3 + i] + phi[1 + k][3 + j][1 + \
i] - phi[1 + k][3 + j][3 + i])/2. + phi[2 + k][j][i] + 2*phi[2 + k][j][1 + i] \
- 2*phi[2 + k][j][2 + i] - phi[2 + k][j][3 + i] + 12*phi[2 + k][1 + j][1 + i] \
- 3*(-phi[k][1 + j][1 + i] + phi[2 + k][1 + j][1 + i]) - 12*phi[2 + k][1 + \
j][2 + i] + 3*(-phi[k][1 + j][2 + i] + phi[2 + k][1 + j][2 + i]) + 3*(-phi[2 \
+ k][1 + j][i] + phi[2 + k][1 + j][2 + i]) - (3*(phi[k][1 + j][i] - phi[k][1 \
+ j][2 + i] - phi[2 + k][1 + j][i] + phi[2 + k][1 + j][2 + i]))/4. + \
3*(-phi[2 + k][1 + j][1 + i] + phi[2 + k][1 + j][3 + i]) - (3*(phi[k][1 + \
j][1 + i] - phi[k][1 + j][3 + i] - phi[2 + k][1 + j][1 + i] + phi[2 + k][1 + \
j][3 + i]))/4. - phi[2 + k][2 + j][i] - 14*phi[2 + k][2 + j][1 + i] + \
3*(-phi[k][2 + j][1 + i] + phi[2 + k][2 + j][1 + i]) + 4*(-phi[2 + k][j][1 + \
i] + phi[2 + k][2 + j][1 + i]) + (phi[k][j][i] - phi[k][j][2 + i] - phi[k][2 \
+ j][i] + phi[k][2 + j][2 + i] - phi[2 + k][j][i] + phi[2 + k][j][2 + i] + \
phi[2 + k][2 + j][i] - phi[2 + k][2 + j][2 + i])/4. + 14*phi[2 + k][2 + j][2 \
+ i] - 3*(-phi[k][2 + j][2 + i] + phi[2 + k][2 + j][2 + i]) - 4*(-phi[2 + \
k][j][2 + i] + phi[2 + k][2 + j][2 + i]) - 3*(-phi[2 + k][2 + j][i] + phi[2 + \
k][2 + j][2 + i]) + (3*(phi[k][2 + j][i] - phi[k][2 + j][2 + i] - phi[2 + \
k][2 + j][i] + phi[2 + k][2 + j][2 + i]))/4. + (phi[k][j][1 + i] - \
phi[k][j][3 + i] - phi[k][2 + j][1 + i] + phi[k][2 + j][3 + i] - phi[2 + \
k][j][1 + i] + phi[2 + k][j][3 + i] + phi[2 + k][2 + j][1 + i] - phi[2 + k][2 \
+ j][3 + i])/4. + phi[2 + k][2 + j][3 + i] - 3*(-phi[2 + k][2 + j][1 + i] + \
phi[2 + k][2 + j][3 + i]) + (3*(phi[k][2 + j][1 + i] - phi[k][2 + j][3 + i] - \
phi[2 + k][2 + j][1 + i] + phi[2 + k][2 + j][3 + i]))/4. + (-phi[k][1 + j][1 \
+ i] + phi[k][3 + j][1 + i] + phi[2 + k][1 + j][1 + i] - phi[2 + k][3 + j][1 \
+ i])/2. + 2*(-phi[2 + k][1 + j][1 + i] + phi[2 + k][3 + j][1 + i]) + \
(phi[k][1 + j][i] - phi[k][1 + j][2 + i] - phi[k][3 + j][i] + phi[k][3 + j][2 \
+ i] - phi[2 + k][1 + j][i] + phi[2 + k][1 + j][2 + i] + phi[2 + k][3 + j][i] \
- phi[2 + k][3 + j][2 + i])/8. - 2*(-phi[2 + k][1 + j][2 + i] + phi[2 + k][3 \
+ j][2 + i]) + (phi[k][1 + j][2 + i] - phi[k][3 + j][2 + i] - phi[2 + k][1 + \
j][2 + i] + phi[2 + k][3 + j][2 + i])/2. + (phi[2 + k][1 + j][i] - phi[2 + \
k][1 + j][2 + i] - phi[2 + k][3 + j][i] + phi[2 + k][3 + j][2 + i])/2. + \
(phi[k][1 + j][1 + i] - phi[k][1 + j][3 + i] - phi[k][3 + j][1 + i] + \
phi[k][3 + j][3 + i] - phi[2 + k][1 + j][1 + i] + phi[2 + k][1 + j][3 + i] + \
phi[2 + k][3 + j][1 + i] - phi[2 + k][3 + j][3 + i])/8. + (phi[2 + k][1 + \
j][1 + i] - phi[2 + k][1 + j][3 + i] - phi[2 + k][3 + j][1 + i] + phi[2 + \
k][3 + j][3 + i])/2. + phi[3 + k][j][1 + i] - phi[3 + k][j][2 + i] - \
3*(-phi[1 + k][1 + j][1 + i] + phi[3 + k][1 + j][1 + i]) + 3*(-phi[1 + k][1 + \
j][2 + i] + phi[3 + k][1 + j][2 + i]) - (3*(phi[1 + k][1 + j][i] - phi[1 + \
k][1 + j][2 + i] - phi[3 + k][1 + j][i] + phi[3 + k][1 + j][2 + i]))/4. - \
(3*(phi[1 + k][1 + j][1 + i] - phi[1 + k][1 + j][3 + i] - phi[3 + k][1 + j][1 \
+ i] + phi[3 + k][1 + j][3 + i]))/4. - phi[3 + k][2 + j][1 + i] + 3*(-phi[1 + \
k][2 + j][1 + i] + phi[3 + k][2 + j][1 + i]) + (phi[1 + k][j][i] - phi[1 + \
k][j][2 + i] - phi[1 + k][2 + j][i] + phi[1 + k][2 + j][2 + i] - phi[3 + \
k][j][i] + phi[3 + k][j][2 + i] + phi[3 + k][2 + j][i] - phi[3 + k][2 + j][2 \
+ i])/4. + phi[3 + k][2 + j][2 + i] - 3*(-phi[1 + k][2 + j][2 + i] + phi[3 + \
k][2 + j][2 + i]) + (3*(phi[1 + k][2 + j][i] - phi[1 + k][2 + j][2 + i] - \
phi[3 + k][2 + j][i] + phi[3 + k][2 + j][2 + i]))/4. + (phi[1 + k][j][1 + i] \
- phi[1 + k][j][3 + i] - phi[1 + k][2 + j][1 + i] + phi[1 + k][2 + j][3 + i] \
- phi[3 + k][j][1 + i] + phi[3 + k][j][3 + i] + phi[3 + k][2 + j][1 + i] - \
phi[3 + k][2 + j][3 + i])/4. + (3*(phi[1 + k][2 + j][1 + i] - phi[1 + k][2 + \
j][3 + i] - phi[3 + k][2 + j][1 + i] + phi[3 + k][2 + j][3 + i]))/4. + \
(-phi[1 + k][1 + j][1 + i] + phi[1 + k][3 + j][1 + i] + phi[3 + k][1 + j][1 + \
i] - phi[3 + k][3 + j][1 + i])/2. + (phi[1 + k][1 + j][i] - phi[1 + k][1 + \
j][2 + i] - phi[1 + k][3 + j][i] + phi[1 + k][3 + j][2 + i] - phi[3 + k][1 + \
j][i] + phi[3 + k][1 + j][2 + i] + phi[3 + k][3 + j][i] - phi[3 + k][3 + j][2 \
+ i])/8. + (phi[1 + k][1 + j][2 + i] - phi[1 + k][3 + j][2 + i] - phi[3 + \
k][1 + j][2 + i] + phi[3 + k][3 + j][2 + i])/2. + (phi[1 + k][1 + j][1 + i] - \
phi[1 + k][1 + j][3 + i] - phi[1 + k][3 + j][1 + i] + phi[1 + k][3 + j][3 + \
i] - phi[3 + k][1 + j][1 + i] + phi[3 + k][1 + j][3 + i] + phi[3 + k][3 + \
j][1 + i] - phi[3 + k][3 + j][3 + i])/8.", 
        "-phi[k][1 + j][1 + i] + phi[k][2 + j][1 + i] - phi[1 + k][j][1 + i] \
+ 2*phi[1 + k][1 + j][1 + i] - 2*phi[1 + k][2 + j][1 + i] + phi[1 + k][3 + \
j][1 + i] + phi[2 + k][j][1 + i] - 2*phi[2 + k][1 + j][1 + i] + 2*phi[2 + \
k][2 + j][1 + i] + (phi[k][j][1 + i] - phi[k][2 + j][1 + i] - phi[2 + k][j][1 \
+ i] + phi[2 + k][2 + j][1 + i])/4. - phi[2 + k][3 + j][1 + i] + (phi[k][1 + \
j][1 + i] - phi[k][3 + j][1 + i] - phi[2 + k][1 + j][1 + i] + phi[2 + k][3 + \
j][1 + i])/4. + phi[3 + k][1 + j][1 + i] - phi[3 + k][2 + j][1 + i] + (phi[1 \
+ k][j][1 + i] - phi[1 + k][2 + j][1 + i] - phi[3 + k][j][1 + i] + phi[3 + \
k][2 + j][1 + i])/4. + (phi[1 + k][1 + j][1 + i] - phi[1 + k][3 + j][1 + i] - \
phi[3 + k][1 + j][1 + i] + phi[3 + k][3 + j][1 + i])/4.", 
        "2*(-phi[1 + k][1 + j][i] + phi[1 + k][1 + j][2 + i]) - 2*(-phi[1 + \
k][2 + j][i] + phi[1 + k][2 + j][2 + i]) + (phi[1 + k][j][i] - phi[1 + \
k][j][2 + i] - phi[1 + k][2 + j][i] + phi[1 + k][2 + j][2 + i])/2. + (phi[1 + \
k][1 + j][i] - phi[1 + k][1 + j][2 + i] - phi[1 + k][3 + j][i] + phi[1 + k][3 \
+ j][2 + i])/2. - 2*(-phi[2 + k][1 + j][i] + phi[2 + k][1 + j][2 + i]) + \
(phi[k][1 + j][i] - phi[k][1 + j][2 + i] - phi[2 + k][1 + j][i] + phi[2 + \
k][1 + j][2 + i])/2. + (-phi[k][2 + j][i] + phi[k][2 + j][2 + i] + phi[2 + \
k][2 + j][i] - phi[2 + k][2 + j][2 + i])/2. + (-phi[2 + k][j][i] + phi[2 + \
k][j][2 + i] + phi[2 + k][2 + j][i] - phi[2 + k][2 + j][2 + i])/2. + \
2*(-phi[2 + k][2 + j][i] + phi[2 + k][2 + j][2 + i]) + (-phi[k][j][i] + \
phi[k][j][2 + i] + phi[k][2 + j][i] - phi[k][2 + j][2 + i] + phi[2 + k][j][i] \
- phi[2 + k][j][2 + i] - phi[2 + k][2 + j][i] + phi[2 + k][2 + j][2 + i])/8. \
+ (-phi[2 + k][1 + j][i] + phi[2 + k][1 + j][2 + i] + phi[2 + k][3 + j][i] - \
phi[2 + k][3 + j][2 + i])/2. + (-phi[k][1 + j][i] + phi[k][1 + j][2 + i] + \
phi[k][3 + j][i] - phi[k][3 + j][2 + i] + phi[2 + k][1 + j][i] - phi[2 + k][1 \
+ j][2 + i] - phi[2 + k][3 + j][i] + phi[2 + k][3 + j][2 + i])/8. + (phi[1 + \
k][1 + j][i] - phi[1 + k][1 + j][2 + i] - phi[3 + k][1 + j][i] + phi[3 + k][1 \
+ j][2 + i])/2. + (-phi[1 + k][2 + j][i] + phi[1 + k][2 + j][2 + i] + phi[3 + \
k][2 + j][i] - phi[3 + k][2 + j][2 + i])/2. + (-phi[1 + k][j][i] + phi[1 + \
k][j][2 + i] + phi[1 + k][2 + j][i] - phi[1 + k][2 + j][2 + i] + phi[3 + \
k][j][i] - phi[3 + k][j][2 + i] - phi[3 + k][2 + j][i] + phi[3 + k][2 + j][2 \
+ i])/8. + (-phi[1 + k][1 + j][i] + phi[1 + k][1 + j][2 + i] + phi[1 + k][3 + \
j][i] - phi[1 + k][3 + j][2 + i] + phi[3 + k][1 + j][i] - phi[3 + k][1 + j][2 \
+ i] - phi[3 + k][3 + j][i] + phi[3 + k][3 + j][2 + i])/8.", 
        "-phi[k][1 + j][i] + phi[k][1 + j][2 + i] + phi[k][2 + j][i] - \
phi[k][2 + j][2 + i] - phi[1 + k][j][i] + phi[1 + k][j][2 + i] - 2*phi[1 + \
k][1 + j][i] - 12*phi[1 + k][1 + j][1 + i] + 14*phi[1 + k][1 + j][2 + i] - \
4*(-phi[1 + k][1 + j][i] + phi[1 + k][1 + j][2 + i]) - 2*(-phi[1 + k][1 + \
j][1 + i] + phi[1 + k][1 + j][3 + i]) + 2*phi[1 + k][2 + j][i] + 12*phi[1 + \
k][2 + j][1 + i] - 3*(-phi[1 + k][j][1 + i] + phi[1 + k][2 + j][1 + i]) - \
14*phi[1 + k][2 + j][2 + i] + 3*(-phi[1 + k][j][2 + i] + phi[1 + k][2 + j][2 \
+ i]) + 4*(-phi[1 + k][2 + j][i] + phi[1 + k][2 + j][2 + i]) + (-phi[1 + \
k][j][1 + i] + phi[1 + k][j][3 + i] + phi[1 + k][2 + j][1 + i] - phi[1 + k][2 \
+ j][3 + i])/2. + 2*(-phi[1 + k][2 + j][1 + i] + phi[1 + k][2 + j][3 + i]) + \
phi[1 + k][3 + j][i] - 3*(-phi[1 + k][1 + j][1 + i] + phi[1 + k][3 + j][1 + \
i]) - phi[1 + k][3 + j][2 + i] + 3*(-phi[1 + k][1 + j][2 + i] + phi[1 + k][3 \
+ j][2 + i]) + (-phi[1 + k][1 + j][1 + i] + phi[1 + k][1 + j][3 + i] + phi[1 \
+ k][3 + j][1 + i] - phi[1 + k][3 + j][3 + i])/2. + phi[2 + k][j][i] - phi[2 \
+ k][j][2 + i] + 2*phi[2 + k][1 + j][i] + 12*phi[2 + k][1 + j][1 + i] - \
3*(-phi[k][1 + j][1 + i] + phi[2 + k][1 + j][1 + i]) - 14*phi[2 + k][1 + j][2 \
+ i] + 3*(-phi[k][1 + j][2 + i] + phi[2 + k][1 + j][2 + i]) + 4*(-phi[2 + \
k][1 + j][i] + phi[2 + k][1 + j][2 + i]) + (-phi[k][1 + j][1 + i] + phi[k][1 \
+ j][3 + i] + phi[2 + k][1 + j][1 + i] - phi[2 + k][1 + j][3 + i])/2. + \
2*(-phi[2 + k][1 + j][1 + i] + phi[2 + k][1 + j][3 + i]) - 2*phi[2 + k][2 + \
j][i] - 12*phi[2 + k][2 + j][1 + i] + 3*(-phi[k][2 + j][1 + i] + phi[2 + k][2 \
+ j][1 + i]) + 3*(-phi[2 + k][j][1 + i] + phi[2 + k][2 + j][1 + i]) - \
(3*(phi[k][j][1 + i] - phi[k][2 + j][1 + i] - phi[2 + k][j][1 + i] + phi[2 + \
k][2 + j][1 + i]))/4. + (phi[k][j][i] - phi[k][j][2 + i] - phi[k][2 + j][i] + \
phi[k][2 + j][2 + i] - phi[2 + k][j][i] + phi[2 + k][j][2 + i] + phi[2 + k][2 \
+ j][i] - phi[2 + k][2 + j][2 + i])/4. + 14*phi[2 + k][2 + j][2 + i] - \
3*(-phi[k][2 + j][2 + i] + phi[2 + k][2 + j][2 + i]) - 3*(-phi[2 + k][j][2 + \
i] + phi[2 + k][2 + j][2 + i]) + (3*(phi[k][j][2 + i] - phi[k][2 + j][2 + i] \
- phi[2 + k][j][2 + i] + phi[2 + k][2 + j][2 + i]))/4. - 4*(-phi[2 + k][2 + \
j][i] + phi[2 + k][2 + j][2 + i]) + (phi[k][j][1 + i] - phi[k][j][3 + i] - \
phi[k][2 + j][1 + i] + phi[k][2 + j][3 + i] - phi[2 + k][j][1 + i] + phi[2 + \
k][j][3 + i] + phi[2 + k][2 + j][1 + i] - phi[2 + k][2 + j][3 + i])/8. - \
2*(-phi[2 + k][2 + j][1 + i] + phi[2 + k][2 + j][3 + i]) + (phi[k][2 + j][1 + \
i] - phi[k][2 + j][3 + i] - phi[2 + k][2 + j][1 + i] + phi[2 + k][2 + j][3 + \
i])/2. + (phi[2 + k][j][1 + i] - phi[2 + k][j][3 + i] - phi[2 + k][2 + j][1 + \
i] + phi[2 + k][2 + j][3 + i])/2. - phi[2 + k][3 + j][i] + 3*(-phi[2 + k][1 + \
j][1 + i] + phi[2 + k][3 + j][1 + i]) - (3*(phi[k][1 + j][1 + i] - phi[k][3 + \
j][1 + i] - phi[2 + k][1 + j][1 + i] + phi[2 + k][3 + j][1 + i]))/4. + \
(phi[k][1 + j][i] - phi[k][1 + j][2 + i] - phi[k][3 + j][i] + phi[k][3 + j][2 \
+ i] - phi[2 + k][1 + j][i] + phi[2 + k][1 + j][2 + i] + phi[2 + k][3 + j][i] \
- phi[2 + k][3 + j][2 + i])/4. + phi[2 + k][3 + j][2 + i] - 3*(-phi[2 + k][1 \
+ j][2 + i] + phi[2 + k][3 + j][2 + i]) + (3*(phi[k][1 + j][2 + i] - phi[k][3 \
+ j][2 + i] - phi[2 + k][1 + j][2 + i] + phi[2 + k][3 + j][2 + i]))/4. + \
(phi[k][1 + j][1 + i] - phi[k][1 + j][3 + i] - phi[k][3 + j][1 + i] + \
phi[k][3 + j][3 + i] - phi[2 + k][1 + j][1 + i] + phi[2 + k][1 + j][3 + i] + \
phi[2 + k][3 + j][1 + i] - phi[2 + k][3 + j][3 + i])/8. + (phi[2 + k][1 + \
j][1 + i] - phi[2 + k][1 + j][3 + i] - phi[2 + k][3 + j][1 + i] + phi[2 + \
k][3 + j][3 + i])/2. + phi[3 + k][1 + j][i] - 3*(-phi[1 + k][1 + j][1 + i] + \
phi[3 + k][1 + j][1 + i]) - phi[3 + k][1 + j][2 + i] + 3*(-phi[1 + k][1 + \
j][2 + i] + phi[3 + k][1 + j][2 + i]) + (-phi[1 + k][1 + j][1 + i] + phi[1 + \
k][1 + j][3 + i] + phi[3 + k][1 + j][1 + i] - phi[3 + k][1 + j][3 + i])/2. - \
phi[3 + k][2 + j][i] + 3*(-phi[1 + k][2 + j][1 + i] + phi[3 + k][2 + j][1 + \
i]) - (3*(phi[1 + k][j][1 + i] - phi[1 + k][2 + j][1 + i] - phi[3 + k][j][1 + \
i] + phi[3 + k][2 + j][1 + i]))/4. + (phi[1 + k][j][i] - phi[1 + k][j][2 + i] \
- phi[1 + k][2 + j][i] + phi[1 + k][2 + j][2 + i] - phi[3 + k][j][i] + phi[3 \
+ k][j][2 + i] + phi[3 + k][2 + j][i] - phi[3 + k][2 + j][2 + i])/4. + phi[3 \
+ k][2 + j][2 + i] - 3*(-phi[1 + k][2 + j][2 + i] + phi[3 + k][2 + j][2 + i]) \
+ (3*(phi[1 + k][j][2 + i] - phi[1 + k][2 + j][2 + i] - phi[3 + k][j][2 + i] \
+ phi[3 + k][2 + j][2 + i]))/4. + (phi[1 + k][j][1 + i] - phi[1 + k][j][3 + \
i] - phi[1 + k][2 + j][1 + i] + phi[1 + k][2 + j][3 + i] - phi[3 + k][j][1 + \
i] + phi[3 + k][j][3 + i] + phi[3 + k][2 + j][1 + i] - phi[3 + k][2 + j][3 + \
i])/8. + (phi[1 + k][2 + j][1 + i] - phi[1 + k][2 + j][3 + i] - phi[3 + k][2 \
+ j][1 + i] + phi[3 + k][2 + j][3 + i])/2. - (3*(phi[1 + k][1 + j][1 + i] - \
phi[1 + k][3 + j][1 + i] - phi[3 + k][1 + j][1 + i] + phi[3 + k][3 + j][1 + \
i]))/4. + (phi[1 + k][1 + j][i] - phi[1 + k][1 + j][2 + i] - phi[1 + k][3 + \
j][i] + phi[1 + k][3 + j][2 + i] - phi[3 + k][1 + j][i] + phi[3 + k][1 + j][2 \
+ i] + phi[3 + k][3 + j][i] - phi[3 + k][3 + j][2 + i])/4. + (3*(phi[1 + k][1 \
+ j][2 + i] - phi[1 + k][3 + j][2 + i] - phi[3 + k][1 + j][2 + i] + phi[3 + \
k][3 + j][2 + i]))/4. + (phi[1 + k][1 + j][1 + i] - phi[1 + k][1 + j][3 + i] \
- phi[1 + k][3 + j][1 + i] + phi[1 + k][3 + j][3 + i] - phi[3 + k][1 + j][1 + \
i] + phi[3 + k][1 + j][3 + i] + phi[3 + k][3 + j][1 + i] - phi[3 + k][3 + \
j][3 + i])/8.", 
        "8*phi[1 + k][1 + j][1 + i] - 8*phi[1 + k][1 + j][2 + i] + 2*(-phi[1 \
+ k][1 + j][i] + phi[1 + k][1 + j][2 + i]) + 2*(-phi[1 + k][1 + j][1 + i] + \
phi[1 + k][1 + j][3 + i]) - 8*phi[1 + k][2 + j][1 + i] + 2*(-phi[1 + k][j][1 \
+ i] + phi[1 + k][2 + j][1 + i]) + 8*phi[1 + k][2 + j][2 + i] - 2*(-phi[1 + \
k][j][2 + i] + phi[1 + k][2 + j][2 + i]) - 2*(-phi[1 + k][2 + j][i] + phi[1 + \
k][2 + j][2 + i]) + (phi[1 + k][j][i] - phi[1 + k][j][2 + i] - phi[1 + k][2 + \
j][i] + phi[1 + k][2 + j][2 + i])/2. - 2*(-phi[1 + k][2 + j][1 + i] + phi[1 + \
k][2 + j][3 + i]) + (phi[1 + k][j][1 + i] - phi[1 + k][j][3 + i] - phi[1 + \
k][2 + j][1 + i] + phi[1 + k][2 + j][3 + i])/2. + 2*(-phi[1 + k][1 + j][1 + \
i] + phi[1 + k][3 + j][1 + i]) - 2*(-phi[1 + k][1 + j][2 + i] + phi[1 + k][3 \
+ j][2 + i]) + (phi[1 + k][1 + j][i] - phi[1 + k][1 + j][2 + i] - phi[1 + \
k][3 + j][i] + phi[1 + k][3 + j][2 + i])/2. + (phi[1 + k][1 + j][1 + i] - \
phi[1 + k][1 + j][3 + i] - phi[1 + k][3 + j][1 + i] + phi[1 + k][3 + j][3 + \
i])/2. - 8*phi[2 + k][1 + j][1 + i] + 2*(-phi[k][1 + j][1 + i] + phi[2 + k][1 \
+ j][1 + i]) + 8*phi[2 + k][1 + j][2 + i] - 2*(-phi[k][1 + j][2 + i] + phi[2 \
+ k][1 + j][2 + i]) - 2*(-phi[2 + k][1 + j][i] + phi[2 + k][1 + j][2 + i]) + \
(phi[k][1 + j][i] - phi[k][1 + j][2 + i] - phi[2 + k][1 + j][i] + phi[2 + \
k][1 + j][2 + i])/2. - 2*(-phi[2 + k][1 + j][1 + i] + phi[2 + k][1 + j][3 + \
i]) + (phi[k][1 + j][1 + i] - phi[k][1 + j][3 + i] - phi[2 + k][1 + j][1 + i] \
+ phi[2 + k][1 + j][3 + i])/2. + 8*phi[2 + k][2 + j][1 + i] - 2*(-phi[k][2 + \
j][1 + i] + phi[2 + k][2 + j][1 + i]) - 2*(-phi[2 + k][j][1 + i] + phi[2 + \
k][2 + j][1 + i]) + (phi[k][j][1 + i] - phi[k][2 + j][1 + i] - phi[2 + \
k][j][1 + i] + phi[2 + k][2 + j][1 + i])/2. + (-phi[k][j][2 + i] + phi[k][2 + \
j][2 + i] + phi[2 + k][j][2 + i] - phi[2 + k][2 + j][2 + i])/2. + (-phi[k][2 \
+ j][i] + phi[k][2 + j][2 + i] + phi[2 + k][2 + j][i] - phi[2 + k][2 + j][2 + \
i])/2. + (-phi[2 + k][j][i] + phi[2 + k][j][2 + i] + phi[2 + k][2 + j][i] - \
phi[2 + k][2 + j][2 + i])/2. - 8*phi[2 + k][2 + j][2 + i] + 2*(-phi[k][2 + \
j][2 + i] + phi[2 + k][2 + j][2 + i]) + 2*(-phi[2 + k][j][2 + i] + phi[2 + \
k][2 + j][2 + i]) + 2*(-phi[2 + k][2 + j][i] + phi[2 + k][2 + j][2 + i]) + \
(-phi[k][j][i] + phi[k][j][2 + i] + phi[k][2 + j][i] - phi[k][2 + j][2 + i] + \
phi[2 + k][j][i] - phi[2 + k][j][2 + i] - phi[2 + k][2 + j][i] + phi[2 + k][2 \
+ j][2 + i])/8. + (-phi[k][2 + j][1 + i] + phi[k][2 + j][3 + i] + phi[2 + \
k][2 + j][1 + i] - phi[2 + k][2 + j][3 + i])/2. + (-phi[2 + k][j][1 + i] + \
phi[2 + k][j][3 + i] + phi[2 + k][2 + j][1 + i] - phi[2 + k][2 + j][3 + \
i])/2. + 2*(-phi[2 + k][2 + j][1 + i] + phi[2 + k][2 + j][3 + i]) + \
(-phi[k][j][1 + i] + phi[k][j][3 + i] + phi[k][2 + j][1 + i] - phi[k][2 + \
j][3 + i] + phi[2 + k][j][1 + i] - phi[2 + k][j][3 + i] - phi[2 + k][2 + j][1 \
+ i] + phi[2 + k][2 + j][3 + i])/8. - 2*(-phi[2 + k][1 + j][1 + i] + phi[2 + \
k][3 + j][1 + i]) + (phi[k][1 + j][1 + i] - phi[k][3 + j][1 + i] - phi[2 + \
k][1 + j][1 + i] + phi[2 + k][3 + j][1 + i])/2. + (-phi[k][1 + j][2 + i] + \
phi[k][3 + j][2 + i] + phi[2 + k][1 + j][2 + i] - phi[2 + k][3 + j][2 + \
i])/2. + (-phi[2 + k][1 + j][i] + phi[2 + k][1 + j][2 + i] + phi[2 + k][3 + \
j][i] - phi[2 + k][3 + j][2 + i])/2. + 2*(-phi[2 + k][1 + j][2 + i] + phi[2 + \
k][3 + j][2 + i]) + (-phi[k][1 + j][i] + phi[k][1 + j][2 + i] + phi[k][3 + \
j][i] - phi[k][3 + j][2 + i] + phi[2 + k][1 + j][i] - phi[2 + k][1 + j][2 + \
i] - phi[2 + k][3 + j][i] + phi[2 + k][3 + j][2 + i])/8. + (-phi[2 + k][1 + \
j][1 + i] + phi[2 + k][1 + j][3 + i] + phi[2 + k][3 + j][1 + i] - phi[2 + \
k][3 + j][3 + i])/2. + (-phi[k][1 + j][1 + i] + phi[k][1 + j][3 + i] + \
phi[k][3 + j][1 + i] - phi[k][3 + j][3 + i] + phi[2 + k][1 + j][1 + i] - \
phi[2 + k][1 + j][3 + i] - phi[2 + k][3 + j][1 + i] + phi[2 + k][3 + j][3 + \
i])/8. + 2*(-phi[1 + k][1 + j][1 + i] + phi[3 + k][1 + j][1 + i]) - 2*(-phi[1 \
+ k][1 + j][2 + i] + phi[3 + k][1 + j][2 + i]) + (phi[1 + k][1 + j][i] - \
phi[1 + k][1 + j][2 + i] - phi[3 + k][1 + j][i] + phi[3 + k][1 + j][2 + \
i])/2. + (phi[1 + k][1 + j][1 + i] - phi[1 + k][1 + j][3 + i] - phi[3 + k][1 \
+ j][1 + i] + phi[3 + k][1 + j][3 + i])/2. - 2*(-phi[1 + k][2 + j][1 + i] + \
phi[3 + k][2 + j][1 + i]) + (phi[1 + k][j][1 + i] - phi[1 + k][2 + j][1 + i] \
- phi[3 + k][j][1 + i] + phi[3 + k][2 + j][1 + i])/2. + (-phi[1 + k][j][2 + \
i] + phi[1 + k][2 + j][2 + i] + phi[3 + k][j][2 + i] - phi[3 + k][2 + j][2 + \
i])/2. + (-phi[1 + k][2 + j][i] + phi[1 + k][2 + j][2 + i] + phi[3 + k][2 + \
j][i] - phi[3 + k][2 + j][2 + i])/2. + 2*(-phi[1 + k][2 + j][2 + i] + phi[3 + \
k][2 + j][2 + i]) + (-phi[1 + k][j][i] + phi[1 + k][j][2 + i] + phi[1 + k][2 \
+ j][i] - phi[1 + k][2 + j][2 + i] + phi[3 + k][j][i] - phi[3 + k][j][2 + i] \
- phi[3 + k][2 + j][i] + phi[3 + k][2 + j][2 + i])/8. + (-phi[1 + k][2 + j][1 \
+ i] + phi[1 + k][2 + j][3 + i] + phi[3 + k][2 + j][1 + i] - phi[3 + k][2 + \
j][3 + i])/2. + (-phi[1 + k][j][1 + i] + phi[1 + k][j][3 + i] + phi[1 + k][2 \
+ j][1 + i] - phi[1 + k][2 + j][3 + i] + phi[3 + k][j][1 + i] - phi[3 + \
k][j][3 + i] - phi[3 + k][2 + j][1 + i] + phi[3 + k][2 + j][3 + i])/8. + \
(phi[1 + k][1 + j][1 + i] - phi[1 + k][3 + j][1 + i] - phi[3 + k][1 + j][1 + \
i] + phi[3 + k][3 + j][1 + i])/2. + (-phi[1 + k][1 + j][2 + i] + phi[1 + k][3 \
+ j][2 + i] + phi[3 + k][1 + j][2 + i] - phi[3 + k][3 + j][2 + i])/2. + \
(-phi[1 + k][1 + j][i] + phi[1 + k][1 + j][2 + i] + phi[1 + k][3 + j][i] - \
phi[1 + k][3 + j][2 + i] + phi[3 + k][1 + j][i] - phi[3 + k][1 + j][2 + i] - \
phi[3 + k][3 + j][i] + phi[3 + k][3 + j][2 + i])/8. + (-phi[1 + k][1 + j][1 + \
i] + phi[1 + k][1 + j][3 + i] + phi[1 + k][3 + j][1 + i] - phi[1 + k][3 + \
j][3 + i] + phi[3 + k][1 + j][1 + i] - phi[3 + k][1 + j][3 + i] - phi[3 + \
k][3 + j][1 + i] + phi[3 + k][3 + j][3 + i])/8."}]]], "Output"]
}, Open  ]],

Cell[BoxData[
    \(\(powers = 
        StringReplace[#, {"\<Symbol\>" -> "\<a[0]\>", \
\[IndentingNewLine]"\<Power(x,2)\>" -> "\<x2\>", "\<Power(x,3)\>" -> \
"\<x3\>", \[IndentingNewLine]"\<Power(y,2)\>" -> "\<y2\>", "\<Power(y,3)\>" -> \
"\<y3\>", \[IndentingNewLine]"\<Power(z,2)\>" -> "\<z2\>", "\<Power(z,3)\>" -> \
"\<z3\>"\[IndentingNewLine]}] &;\)\)], "Input"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(A = Table[a[\([i]\)], {i, 0, Length[X] - 1}]\), "\[IndentingNewLine]", 
    \(Astr = \(powers[ToString[CForm[#]]] &\) /@ A\)}], "Input"],

Cell[BoxData[
    RowBox[{\(Part::"partd"\), \(\(:\)\(\ \)\), "\<\"Part specification \
\\!\\(a \[LeftDoubleBracket] 1 \[RightDoubleBracket]\\) is longer than depth \
of object. \\!\\(\\*ButtonBox[\\\"More\[Ellipsis]\\\", \
ButtonStyle->\\\"RefGuideLinkText\\\", ButtonFrame->None, \
ButtonData:>\\\"General::partd\\\"]\\)\"\>"}]], "Message"],

Cell[BoxData[
    RowBox[{\(Part::"partd"\), \(\(:\)\(\ \)\), "\<\"Part specification \
\\!\\(a \[LeftDoubleBracket] 2 \[RightDoubleBracket]\\) is longer than depth \
of object. \\!\\(\\*ButtonBox[\\\"More\[Ellipsis]\\\", \
ButtonStyle->\\\"RefGuideLinkText\\\", ButtonFrame->None, \
ButtonData:>\\\"General::partd\\\"]\\)\"\>"}]], "Message"],

Cell[BoxData[
    RowBox[{\(Part::"partd"\), \(\(:\)\(\ \)\), "\<\"Part specification \
\\!\\(a \[LeftDoubleBracket] 3 \[RightDoubleBracket]\\) is longer than depth \
of object. \\!\\(\\*ButtonBox[\\\"More\[Ellipsis]\\\", \
ButtonStyle->\\\"RefGuideLinkText\\\", ButtonFrame->None, \
ButtonData:>\\\"General::partd\\\"]\\)\"\>"}]], "Message"],

Cell[BoxData[
    RowBox[{\(General::"stop"\), \(\(:\)\(\ \)\), "\<\"Further output of \
\\!\\(Part :: \\\"partd\\\"\\) will be suppressed during this calculation. \
\\!\\(\\*ButtonBox[\\\"More\[Ellipsis]\\\", ButtonStyle->\\\"RefGuideLinkText\
\\\", ButtonFrame->None, ButtonData:>\\\"General::stop\\\"]\\)\"\>"}]], \
"Message"],

Cell[BoxData[
    \({Symbol, a\[LeftDoubleBracket]1\[RightDoubleBracket], 
      a\[LeftDoubleBracket]2\[RightDoubleBracket], 
      a\[LeftDoubleBracket]3\[RightDoubleBracket], 
      a\[LeftDoubleBracket]4\[RightDoubleBracket], 
      a\[LeftDoubleBracket]5\[RightDoubleBracket], 
      a\[LeftDoubleBracket]6\[RightDoubleBracket], 
      a\[LeftDoubleBracket]7\[RightDoubleBracket], 
      a\[LeftDoubleBracket]8\[RightDoubleBracket], 
      a\[LeftDoubleBracket]9\[RightDoubleBracket], 
      a\[LeftDoubleBracket]10\[RightDoubleBracket], 
      a\[LeftDoubleBracket]11\[RightDoubleBracket], 
      a\[LeftDoubleBracket]12\[RightDoubleBracket], 
      a\[LeftDoubleBracket]13\[RightDoubleBracket], 
      a\[LeftDoubleBracket]14\[RightDoubleBracket], 
      a\[LeftDoubleBracket]15\[RightDoubleBracket], 
      a\[LeftDoubleBracket]16\[RightDoubleBracket], 
      a\[LeftDoubleBracket]17\[RightDoubleBracket], 
      a\[LeftDoubleBracket]18\[RightDoubleBracket], 
      a\[LeftDoubleBracket]19\[RightDoubleBracket], 
      a\[LeftDoubleBracket]20\[RightDoubleBracket], 
      a\[LeftDoubleBracket]21\[RightDoubleBracket], 
      a\[LeftDoubleBracket]22\[RightDoubleBracket], 
      a\[LeftDoubleBracket]23\[RightDoubleBracket], 
      a\[LeftDoubleBracket]24\[RightDoubleBracket], 
      a\[LeftDoubleBracket]25\[RightDoubleBracket], 
      a\[LeftDoubleBracket]26\[RightDoubleBracket], 
      a\[LeftDoubleBracket]27\[RightDoubleBracket], 
      a\[LeftDoubleBracket]28\[RightDoubleBracket], 
      a\[LeftDoubleBracket]29\[RightDoubleBracket], 
      a\[LeftDoubleBracket]30\[RightDoubleBracket], 
      a\[LeftDoubleBracket]31\[RightDoubleBracket], 
      a\[LeftDoubleBracket]32\[RightDoubleBracket], 
      a\[LeftDoubleBracket]33\[RightDoubleBracket], 
      a\[LeftDoubleBracket]34\[RightDoubleBracket], 
      a\[LeftDoubleBracket]35\[RightDoubleBracket], 
      a\[LeftDoubleBracket]36\[RightDoubleBracket], 
      a\[LeftDoubleBracket]37\[RightDoubleBracket], 
      a\[LeftDoubleBracket]38\[RightDoubleBracket], 
      a\[LeftDoubleBracket]39\[RightDoubleBracket], 
      a\[LeftDoubleBracket]40\[RightDoubleBracket], 
      a\[LeftDoubleBracket]41\[RightDoubleBracket], 
      a\[LeftDoubleBracket]42\[RightDoubleBracket], 
      a\[LeftDoubleBracket]43\[RightDoubleBracket], 
      a\[LeftDoubleBracket]44\[RightDoubleBracket], 
      a\[LeftDoubleBracket]45\[RightDoubleBracket], 
      a\[LeftDoubleBracket]46\[RightDoubleBracket], 
      a\[LeftDoubleBracket]47\[RightDoubleBracket], 
      a\[LeftDoubleBracket]48\[RightDoubleBracket], 
      a\[LeftDoubleBracket]49\[RightDoubleBracket], 
      a\[LeftDoubleBracket]50\[RightDoubleBracket], 
      a\[LeftDoubleBracket]51\[RightDoubleBracket], 
      a\[LeftDoubleBracket]52\[RightDoubleBracket], 
      a\[LeftDoubleBracket]53\[RightDoubleBracket], 
      a\[LeftDoubleBracket]54\[RightDoubleBracket], 
      a\[LeftDoubleBracket]55\[RightDoubleBracket], 
      a\[LeftDoubleBracket]56\[RightDoubleBracket], 
      a\[LeftDoubleBracket]57\[RightDoubleBracket], 
      a\[LeftDoubleBracket]58\[RightDoubleBracket], 
      a\[LeftDoubleBracket]59\[RightDoubleBracket], 
      a\[LeftDoubleBracket]60\[RightDoubleBracket], 
      a\[LeftDoubleBracket]61\[RightDoubleBracket], 
      a\[LeftDoubleBracket]62\[RightDoubleBracket], 
      a\[LeftDoubleBracket]63\[RightDoubleBracket]}\)], "Output"],

Cell[BoxData[
    \({"a[0]", "a[1]", "a[2]", "a[3]", "a[4]", "a[5]", "a[6]", "a[7]", 
      "a[8]", "a[9]", "a[10]", "a[11]", "a[12]", "a[13]", "a[14]", "a[15]", 
      "a[16]", "a[17]", "a[18]", "a[19]", "a[20]", "a[21]", "a[22]", "a[23]", 
      "a[24]", "a[25]", "a[26]", "a[27]", "a[28]", "a[29]", "a[30]", "a[31]", 
      "a[32]", "a[33]", "a[34]", "a[35]", "a[36]", "a[37]", "a[38]", "a[39]", 
      "a[40]", "a[41]", "a[42]", "a[43]", "a[44]", "a[45]", "a[46]", "a[47]", 
      "a[48]", "a[49]", "a[50]", "a[51]", "a[52]", "a[53]", "a[54]", "a[55]", 
      "a[56]", "a[57]", "a[58]", "a[59]", "a[60]", "a[61]", "a[62]", 
      "a[63]"}\)], "Output"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(code = 
        StringJoin[\(# <> "\<;\n\>" &\) /@ 
            MapThread[
              StringJoin[#1, "\< = \>", #2] &, {Astr, 
                code}]];\)\), "\[IndentingNewLine]", 
    \(Export["\</tmp/TricubicInverse.h\>", code, "\<Text\>"]\)}], "Input"],

Cell[BoxData[
    \("/tmp/code.txt"\)], "Output"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Function Evaluation", "Subsection"],

Cell[CellGroupData[{

Cell[BoxData[{
    \(\(P = "\<p = \>" <> 
          powers@\(ToString@
              CForm[A . X]\) <> "\<;\n\>";\)\), "\[IndentingNewLine]", 
    \(\(Px = "\<px = \>" <> 
          powers@\(ToString@
              CForm[D[A . X, x]]\) <> "\<;\n\>";\)\), "\[IndentingNewLine]", 
    \(\(Py = "\<py = \>" <> 
          powers@\(ToString@
              CForm[D[A . X, y]]\) <> "\<;\n\>";\)\), "\[IndentingNewLine]", 
    \(\(Pz = "\<pz = \>" <> 
          powers@\(ToString@
              CForm[D[A . X, z]]\) <> "\<;\n\>";\)\), "\[IndentingNewLine]", 
    \(code = StringJoin[P, Px, Py, Pz]\), "\[IndentingNewLine]", 
    \(Export["\</tmp/TricubicInterpolation.h\>", 
      code, "\<Text\>"]\)}], "Input"],

Cell[BoxData[
    \("p = a[0] + x*a[1] + x2*a[2] + x3*a[3] + y*a[4] + x*y*a[5] + x2*y*a[6] \
+ x3*y*a[7] + y2*a[8] + x*y2*a[9] + x2*y2*a[10] + x3*y2*a[11] + y3*a[12] + \
x*y3*a[13] + x2*y3*a[14] + x3*y3*a[15] + z*a[16] + x*z*a[17] + x2*z*a[18] + \
x3*z*a[19] + y*z*a[20] + x*y*z*a[21] + x2*y*z*a[22] + x3*y*z*a[23] + \
y2*z*a[24] + x*y2*z*a[25] + x2*y2*z*a[26] + x3*y2*z*a[27] + y3*z*a[28] + \
x*y3*z*a[29] + x2*y3*z*a[30] + x3*y3*z*a[31] + z2*a[32] + x*z2*a[33] + \
x2*z2*a[34] + x3*z2*a[35] + y*z2*a[36] + x*y*z2*a[37] + x2*y*z2*a[38] + \
x3*y*z2*a[39] + y2*z2*a[40] + x*y2*z2*a[41] + x2*y2*z2*a[42] + x3*y2*z2*a[43] \
+ y3*z2*a[44] + x*y3*z2*a[45] + x2*y3*z2*a[46] + x3*y3*z2*a[47] + z3*a[48] + \
x*z3*a[49] + x2*z3*a[50] + x3*z3*a[51] + y*z3*a[52] + x*y*z3*a[53] + \
x2*y*z3*a[54] + x3*y*z3*a[55] + y2*z3*a[56] + x*y2*z3*a[57] + x2*y2*z3*a[58] \
+ x3*y2*z3*a[59] + y3*z3*a[60] + x*y3*z3*a[61] + x2*y3*z3*a[62] + \
x3*y3*z3*a[63];\npx = a[1] + 2*x*a[2] + 3*x2*a[3] + y*a[5] + 2*x*y*a[6] + \
3*x2*y*a[7] + y2*a[9] + 2*x*y2*a[10] + 3*x2*y2*a[11] + y3*a[13] + \
2*x*y3*a[14] + 3*x2*y3*a[15] + z*a[17] + 2*x*z*a[18] + 3*x2*z*a[19] + \
y*z*a[21] + 2*x*y*z*a[22] + 3*x2*y*z*a[23] + y2*z*a[25] + 2*x*y2*z*a[26] + \
3*x2*y2*z*a[27] + y3*z*a[29] + 2*x*y3*z*a[30] + 3*x2*y3*z*a[31] + z2*a[33] + \
2*x*z2*a[34] + 3*x2*z2*a[35] + y*z2*a[37] + 2*x*y*z2*a[38] + 3*x2*y*z2*a[39] \
+ y2*z2*a[41] + 2*x*y2*z2*a[42] + 3*x2*y2*z2*a[43] + y3*z2*a[45] + \
2*x*y3*z2*a[46] + 3*x2*y3*z2*a[47] + z3*a[49] + 2*x*z3*a[50] + 3*x2*z3*a[51] \
+ y*z3*a[53] + 2*x*y*z3*a[54] + 3*x2*y*z3*a[55] + y2*z3*a[57] + \
2*x*y2*z3*a[58] + 3*x2*y2*z3*a[59] + y3*z3*a[61] + 2*x*y3*z3*a[62] + \
3*x2*y3*z3*a[63];\npy = a[4] + x*a[5] + x2*a[6] + x3*a[7] + 2*y*a[8] + \
2*x*y*a[9] + 2*x2*y*a[10] + 2*x3*y*a[11] + 3*y2*a[12] + 3*x*y2*a[13] + \
3*x2*y2*a[14] + 3*x3*y2*a[15] + z*a[20] + x*z*a[21] + x2*z*a[22] + x3*z*a[23] \
+ 2*y*z*a[24] + 2*x*y*z*a[25] + 2*x2*y*z*a[26] + 2*x3*y*z*a[27] + \
3*y2*z*a[28] + 3*x*y2*z*a[29] + 3*x2*y2*z*a[30] + 3*x3*y2*z*a[31] + z2*a[36] \
+ x*z2*a[37] + x2*z2*a[38] + x3*z2*a[39] + 2*y*z2*a[40] + 2*x*y*z2*a[41] + \
2*x2*y*z2*a[42] + 2*x3*y*z2*a[43] + 3*y2*z2*a[44] + 3*x*y2*z2*a[45] + \
3*x2*y2*z2*a[46] + 3*x3*y2*z2*a[47] + z3*a[52] + x*z3*a[53] + x2*z3*a[54] + \
x3*z3*a[55] + 2*y*z3*a[56] + 2*x*y*z3*a[57] + 2*x2*y*z3*a[58] + \
2*x3*y*z3*a[59] + 3*y2*z3*a[60] + 3*x*y2*z3*a[61] + 3*x2*y2*z3*a[62] + \
3*x3*y2*z3*a[63];\npz = a[16] + x*a[17] + x2*a[18] + x3*a[19] + y*a[20] + \
x*y*a[21] + x2*y*a[22] + x3*y*a[23] + y2*a[24] + x*y2*a[25] + x2*y2*a[26] + \
x3*y2*a[27] + y3*a[28] + x*y3*a[29] + x2*y3*a[30] + x3*y3*a[31] + 2*z*a[32] + \
2*x*z*a[33] + 2*x2*z*a[34] + 2*x3*z*a[35] + 2*y*z*a[36] + 2*x*y*z*a[37] + \
2*x2*y*z*a[38] + 2*x3*y*z*a[39] + 2*y2*z*a[40] + 2*x*y2*z*a[41] + \
2*x2*y2*z*a[42] + 2*x3*y2*z*a[43] + 2*y3*z*a[44] + 2*x*y3*z*a[45] + \
2*x2*y3*z*a[46] + 2*x3*y3*z*a[47] + 3*z2*a[48] + 3*x*z2*a[49] + 3*x2*z2*a[50] \
+ 3*x3*z2*a[51] + 3*y*z2*a[52] + 3*x*y*z2*a[53] + 3*x2*y*z2*a[54] + \
3*x3*y*z2*a[55] + 3*y2*z2*a[56] + 3*x*y2*z2*a[57] + 3*x2*y2*z2*a[58] + \
3*x3*y2*z2*a[59] + 3*y3*z2*a[60] + 3*x*y3*z2*a[61] + 3*x2*y3*z2*a[62] + \
3*x3*y3*z2*a[63];\n"\)], "Output"],

Cell[BoxData[
    \("/tmp/TricubicInterpolation.h"\)], "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
FrontEndVersion->"5.2 for X",
ScreenRectangle->{{0, 2400}, {0, 1600}},
WindowSize->{1196, 1519},
WindowMargins->{{0, Automatic}, {0, Automatic}}
]

(*******************************************************************
Cached data follows.  If you edit this Notebook file directly, not
using Mathematica, you must remove the line containing CacheID at
the top of  the file.  The cache data will then be recreated when
you save this file from within Mathematica.
*******************************************************************)

(*CellTagsOutline
CellTagsIndex->{}
*)

(*CellTagsIndex
CellTagsIndex->{}
*)

(*NotebookFileOutline
Notebook[{

Cell[CellGroupData[{
Cell[1776, 53, 41, 0, 74, "Section"],

Cell[CellGroupData[{
Cell[1842, 57, 163, 4, 43, "Input"],
Cell[2008, 63, 834, 12, 59, "Output"],
Cell[2845, 77, 36, 1, 26, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[2918, 83, 206, 4, 43, "Input"],
Cell[3127, 89, 407, 6, 41, "Output"],
Cell[3537, 97, 35, 1, 26, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[3609, 103, 287, 5, 59, "Input"],
Cell[3899, 110, 41, 1, 26, "Output"],
Cell[3943, 113, 4581, 71, 147, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[8561, 189, 46, 1, 27, "Input"],
Cell[8610, 192, 518, 7, 43, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[9165, 204, 404, 6, 59, "Input"],
Cell[9572, 212, 358, 5, 20, "Message"],
Cell[9933, 219, 30067, 467, 969, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[40037, 691, 103, 2, 27, "Input"],
Cell[40143, 695, 31989, 485, 987, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[72169, 1185, 109, 2, 43, "Input"],
Cell[72281, 1189, 28235, 409, 969, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[100553, 1603, 37, 0, 40, "Subsection"],

Cell[CellGroupData[{
Cell[100615, 1607, 2214, 37, 379, "Input"],
Cell[102832, 1646, 407, 6, 41, "Output"],
Cell[103242, 1654, 315, 5, 20, "Message"],
Cell[103560, 1661, 315, 5, 20, "Message"],
Cell[103878, 1668, 315, 5, 20, "Message"],
Cell[104196, 1675, 329, 5, 20, "Message"],
Cell[104528, 1682, 59607, 935, 969, "Output"]
}, Open  ]],
Cell[164150, 2620, 187, 3, 47, "Input"],

Cell[CellGroupData[{
Cell[164362, 2627, 283, 7, 59, "Input"],
Cell[164648, 2636, 315, 5, 20, "Message"],
Cell[164966, 2643, 315, 5, 20, "Message"],
Cell[165284, 2650, 315, 5, 20, "Message"],
Cell[165602, 2657, 329, 5, 20, "Message"],
Cell[165934, 2664, 178637, 2349, 969, "Output"]
}, Open  ]],
Cell[344586, 5016, 368, 6, 91, "Input"],

Cell[CellGroupData[{
Cell[344979, 5026, 157, 2, 43, "Input"],
Cell[345139, 5030, 342, 5, 20, "Message"],
Cell[345484, 5037, 342, 5, 20, "Message"],
Cell[345829, 5044, 342, 5, 20, "Message"],
Cell[346174, 5051, 329, 5, 20, "Message"],
Cell[346506, 5058, 3365, 63, 56, "Output"],
Cell[349874, 5123, 656, 9, 56, "Output"]
}, Open  ]],

Cell[CellGroupData[{
Cell[350567, 5137, 281, 6, 43, "Input"],
Cell[350851, 5145, 49, 1, 26, "Output"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{
Cell[350949, 5152, 41, 0, 40, "Subsection"],

Cell[CellGroupData[{
Cell[351015, 5156, 704, 15, 107, "Input"],
Cell[351722, 5173, 3172, 43, 356, "Output"],
Cell[354897, 5218, 64, 1, 26, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)



(*******************************************************************
End of Mathematica Notebook file.
*******************************************************************)

